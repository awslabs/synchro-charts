/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AlarmsConfig, DataPoint, DataStream, DataStreamInfo, MessageOverrides, MinimalSizeConfig, MinimalViewPortConfig, Primitive, RequestDataFn, SizeConfig, SizePositionConfig, TableColumn, ViewPort, ViewPortConfig } from "./utils/dataTypes";
import { Annotations, Axis, LayoutConfig, Legend, LegendConfig, MovementConfig, ScaleConfig, Threshold, Tooltip, WidgetConfigurationUpdate } from "./components/charts/common/types";
import { Trend, TrendResult } from "./components/charts/common/trends/types";
import { DATA_ALIGNMENT, StatusIcon } from "./components/charts/common/constants";
import { POINT_TYPE } from "./components/charts/sc-webgl-base-chart/activePoints";
import { RectScrollFixed } from "./utils/types";
import { LabelsConfig } from "./components/common/types";
import { Cell, Row } from "./components/sc-table/constructTableData";
import { ChartSceneCreator, ChartSceneUpdater } from "./components/charts/sc-webgl-base-chart/types";
import { RenderCell } from "./components/sc-widget-grid/types";
export namespace Components {
    interface LineChartViewportChange {
    }
    interface MultipleStatuses {
    }
    interface ScAngledLineSegment {
    }
    interface ScAnnotationsDraggableMulti {
    }
    interface ScApp {
    }
    interface ScBarChart {
        "alarms"?: AlarmsConfig;
        "annotations": Annotations;
        "axis"?: Axis.Options;
        /**
          * Memory Management
         */
        "bufferFactor": number;
        "dataStreams": DataStream[];
        "gestures": boolean;
        /**
          * Status
         */
        "isEditing": boolean;
        "layout"?: LayoutConfig;
        "legend"?: LegendConfig;
        "messageOverrides"?: MessageOverrides;
        "minBufferSize": number;
        "movement"?: MovementConfig;
        "requestData"?: RequestDataFn;
        "scale"?: ScaleConfig;
        "size"?: MinimalSizeConfig;
        "trends": Trend[];
        /**
          * Chart API
         */
        "viewport": MinimalViewPortConfig;
        "widgetId": string;
    }
    interface ScBox {
        "size": MinimalSizeConfig;
        "someObject"?: Object;
    }
    interface ScChartIcon {
        "color"?: string;
        "name": StatusIcon;
        "size"?: number;
    }
    interface ScChartYRange {
        "component": string;
    }
    interface ScCirclePointShaders {
    }
    interface ScDataStreamName {
        "date"?: Date;
        "detailedLabel"?: string;
        "displayTooltip"?: boolean;
        "isEditing": boolean;
        "label": string;
        "onNameChange": (name: string) => void;
        "pointType"?: POINT_TYPE;
    }
    interface ScErrorBadge {
    }
    interface ScExpandableInput {
        "isDisabled"?: boolean;
        "onValueChange": (value: string) => void;
        "value": string;
    }
    interface ScExpandableInputStandard {
    }
    interface ScGestureHandler {
        "onDateRangeChange": ({ end, start }: { start: Date; end: Date }) => void;
        "size": SizeConfig;
        "viewport": ViewPort;
    }
    interface ScGrid {
    }
    interface ScGridTooltip {
        "alarmPoint"?: DataPoint;
        "breachedThreshold"?: Threshold;
        "isEnabled": boolean;
        "propertyPoint"?: DataPoint;
        "title": string;
    }
    interface ScHelpTooltip {
        "message": string;
    }
    interface ScKpi {
        "annotations": Annotations;
        "dataStreams": DataStream[];
        "isEditing": boolean;
        "liveModeOnlyMessage": string;
        "messageOverrides": MessageOverrides;
        "viewport": MinimalViewPortConfig;
        "widgetId": string;
    }
    interface ScKpiBase {
        "alarmPoint"?: DataPoint<Primitive>;
        "alarmStream"?: DataStream;
        "breachedThreshold"?: Threshold;
        "isEditing": boolean;
        "isEnabled": boolean;
        "isLoading"?: boolean;
        "isRefreshing"?: boolean;
        "messageOverrides": MessageOverrides;
        "miniVersion": boolean;
        "onChangeLabel": ({ streamId, name }: { streamId: string; name: string }) => void;
        "propertyPoint"?: DataPoint<Primitive>;
        "propertyStream"?: DataStream;
        "trendStream": DataStream | undefined;
        "valueColor"?: string;
        "viewport": MinimalViewPortConfig;
    }
    interface ScKpiStandard {
    }
    interface ScLegend {
        "config": LegendConfig;
        "dataStreams": DataStream[];
        "isEditing": boolean;
        "isLoading": boolean;
        "showDataStreamColor": boolean;
        "supportString": boolean;
        "thresholds": Threshold[];
        "trendResults": TrendResult[];
        "updateDataStreamName": ({ streamId, name }: { streamId: string; name: string }) => void;
        "viewport": ViewPort;
        "visualizesAlarms": boolean;
    }
    interface ScLegendRow {
        "color": string;
        "detailedLabel"?: string;
        "icon"?: StatusIcon;
        "isEditing": boolean;
        "isLoading": boolean;
        "label": string;
        "point"?: DataPoint<Primitive>;
        "pointType"?: POINT_TYPE;
        "showDataStreamColor": boolean;
        "streamId": string;
        "unit"?: string;
        "updateDataStreamName": ({ streamId, name }: { streamId: string; name: string }) => void;
        "valueColor"?: string;
    }
    interface ScLineChart {
        "alarms"?: AlarmsConfig;
        "annotations": Annotations;
        "axis"?: Axis.Options;
        /**
          * Memory Management
         */
        "bufferFactor": number;
        "dataStreams": DataStream[];
        "gestures": boolean;
        /**
          * Status
         */
        "isEditing": boolean;
        "layout"?: LayoutConfig;
        "legend"?: LegendConfig;
        "messageOverrides"?: MessageOverrides;
        "minBufferSize": number;
        "movement"?: MovementConfig;
        "requestData"?: RequestDataFn;
        "scale"?: ScaleConfig;
        "size"?: MinimalSizeConfig;
        "trends": Trend[];
        /**
          * Chart API
         */
        "viewport": MinimalViewPortConfig;
        "widgetId": string;
    }
    interface ScLineChartColoredPoint {
    }
    interface ScLineChartStreamData {
    }
    interface ScLoadingSpinner {
        "dark"?: boolean;
        "size"?: number;
    }
    interface ScMultipleBars {
    }
    interface ScMultipleLines {
    }
    interface ScMultipleLinesOverlapping {
    }
    interface ScScatterChart {
        "alarms"?: AlarmsConfig;
        "annotations": Annotations;
        "axis"?: Axis.Options;
        /**
          * Memory Management
         */
        "bufferFactor": number;
        "dataStreams": DataStream[];
        "gestures": boolean;
        /**
          * Status
         */
        "isEditing": boolean;
        "layout"?: LayoutConfig;
        "legend"?: LegendConfig;
        "messageOverrides"?: MessageOverrides;
        "minBufferSize": number;
        "movement"?: MovementConfig;
        "requestData"?: RequestDataFn;
        "scale"?: ScaleConfig;
        "size"?: MinimalSizeConfig;
        "trends": Trend[];
        /**
          * Chart API
         */
        "viewport": MinimalViewPortConfig;
        "widgetId": string;
    }
    interface ScScatterChartDynamicData {
    }
    interface ScScatterChartThreshold {
    }
    interface ScScatterChartThresholdColorationBand {
    }
    interface ScScatterChartThresholdColorationExactPoint {
    }
    interface ScScatterChartThresholdColorationMultipleDataStream {
    }
    interface ScScatterChartThresholdColorationMultipleThresholds {
    }
    interface ScScatterChartThresholdNoColoration {
    }
    interface ScScatterChartTooltipWithMultipleDataStreamsAndTrends {
    }
    interface ScScatterChartTrendLineColorConfiguration {
    }
    interface ScScatterChartTrendLineWithLegend {
    }
    interface ScSingleBar {
    }
    interface ScSingleColoredBar {
    }
    interface ScSizeProvider {
        "renderFunc": (rect: RectScrollFixed) => void;
        /**
          * Size overrides. these will take precident over any auto-calculated sizing
         */
        "size"?: Size;
    }
    interface ScSizeProviderStandard {
    }
    interface ScStatusCell {
        "alarmPoint"?: DataPoint;
        "alarmStream"?: DataStream;
        "breachedThreshold"?: Threshold;
        "icon"?: StatusIcon;
        "isEditing": boolean;
        "isEnabled": boolean;
        "labelsConfig": Required<LabelsConfig>;
        "messageOverrides": MessageOverrides;
        "onChangeLabel": ({ streamId, name }: { streamId: string; name: string }) => void;
        "propertyPoint"?: DataPoint;
        "propertyStream"?: DataStream;
        "valueColor"?: string;
    }
    interface ScStatusGrid {
        "annotations": Annotations;
        "dataStreams": DataStream[];
        "isEditing": boolean;
        /**
          * Status Grid Specific configuration
         */
        "labelsConfig": LabelsConfig;
        "liveModeOnlyMessage": string;
        "messageOverrides": MessageOverrides;
        "viewport": MinimalViewPortConfig;
        "widgetId": string;
    }
    interface ScStatusGridStandard {
    }
    interface ScStatusTimeline {
        "alarms"?: AlarmsConfig;
        "annotations"?: Annotations;
        "axis"?: Axis.Options;
        /**
          * Memory Management
         */
        "bufferFactor": number;
        "dataStreams": DataStream[];
        "gestures": boolean;
        /**
          * Status
         */
        "isEditing": boolean;
        "layout"?: LayoutConfig;
        "messageOverrides"?: MessageOverrides;
        "minBufferSize": number;
        "movement"?: MovementConfig;
        "requestData"?: RequestDataFn;
        "scale"?: ScaleConfig;
        "size"?: MinimalSizeConfig;
        /**
          * Chart API
         */
        "viewport": MinimalViewPortConfig;
        "widgetId": string;
    }
    interface ScStatusTimelineOverlay {
        "dataStreams": DataStream[];
        "date": Date;
        "isEditing": boolean;
        "size": SizeConfig;
        "thresholds": Threshold[];
        "widgetId": string;
    }
    interface ScStatusTimelineOverlayRow {
        "detailedLabel"?: string;
        "icon"?: StatusIcon;
        "isEditing": boolean;
        "label": string;
        "onNameChange": (name: string) => void;
        "unit"?: string;
        "value"?: Primitive;
        "valueColor"?: string;
    }
    interface ScStraightLineSegment {
    }
    interface ScStraightLineSegmentColored {
    }
    interface ScTable {
        "annotations": Annotations;
        "dataStreams": DataStream[];
        "liveModeOnlyMessage": string;
        "messageOverrides": MessageOverrides;
        /**
          * Table column values
         */
        "tableColumns": TableColumn[];
        "trends": Trend[];
        "viewport": MinimalViewPortConfig;
        "widgetId": string;
    }
    interface ScTableBase {
        "columns": TableColumn[];
        "isEnabled": boolean;
        "liveModeOnlyMessage": string;
        "messageOverrides": MessageOverrides;
        "rows": Row[];
    }
    interface ScTableCell {
        "cell": Cell | undefined;
    }
    interface ScThresholdLegend {
        "thresholds": Threshold[];
    }
    interface ScThresholdLegendRow {
        "color": string;
        "label": string;
    }
    interface ScTooltip {
        /**
          * If we are drawing data from the data timestamp to timestamp + resolution we want the tooltip to align on the left side  Otherwise we are drawing the data from timestamp - resolution to timestamp then we want the tooltip to align on the right side
         */
        "dataAlignment": DATA_ALIGNMENT;
        "dataContainer": HTMLElement;
        "dataStreams": DataStream[];
        "maxDurationFromDate"?: number;
        "showBlankTooltipRows": boolean;
        "showDataStreamColor": boolean;
        "size": SizeConfig;
        "sortPoints": boolean;
        "supportString": boolean;
        "thresholds": Threshold[];
        /**
          * CSS Top property for the tooltip container
         */
        "top": number;
        "trendResults": TrendResult[];
        "viewport": ViewPort;
        "visualizesAlarms": boolean;
    }
    interface ScTooltipRow {
        "color": string;
        "icon"?: StatusIcon;
        "label": string;
        "point": DataPoint | undefined;
        "pointType": POINT_TYPE;
        "resolution": number | undefined;
        "showDataStreamColor": boolean;
        "valueColor"?: string;
    }
    interface ScTooltipRows {
        /**
          * If we are drawing data from the data timestamp to timestamp + resolution we want the tooltip to align on the left side  Otherwise we are drawing the data from timestamp - resolution to timestamp then we want the tooltip to align on the right side
         */
        "dataAlignment": DATA_ALIGNMENT;
        "dataStreams": DataStream[];
        "maxDurationFromDate"?: number;
        "selectedDate": Date;
        "showBlankTooltipRows": boolean;
        "showDataStreamColor": boolean;
        "size": SizeConfig;
        "sortPoints"?: boolean;
        "supportString": boolean;
        "thresholds": Threshold[];
        /**
          * CSS Top property for the tooltip container
         */
        "top"?: number;
        "trendResults": TrendResult[];
        "viewport": ViewPort;
        "visualizesAlarms": boolean;
    }
    interface ScWebglAxis {
        "size": SizeConfig;
    }
    interface ScWebglBarChartDynamicBuffer {
    }
    interface ScWebglBarChartDynamicData {
    }
    interface ScWebglBarChartDynamicDataStreams {
    }
    interface ScWebglBarChartFastViewport {
    }
    interface ScWebglBarChartMargin {
    }
    interface ScWebglBarChartNegative {
    }
    interface ScWebglBarChartPositiveNegative {
    }
    interface ScWebglBarChartStandard {
    }
    interface ScWebglBarChartStartFromZero {
    }
    interface ScWebglBarChartThresholdColoration {
    }
    interface ScWebglBarChartThresholdColorationBand {
    }
    interface ScWebglBarChartThresholdColorationExactPoint {
    }
    interface ScWebglBarChartThresholdColorationMultipleDataStream {
    }
    interface ScWebglBarChartThresholdColorationMultipleThresholds {
    }
    interface ScWebglBarChartThresholdNoColoration {
    }
    interface ScWebglBaseChart {
        "alarms"?: AlarmsConfig;
        "annotations": Annotations;
        "axis"?: Axis.Options;
        "bufferFactor": number;
        "configId": string;
        "createChartScene": ChartSceneCreator;
        "dataStreams": DataStream[];
        "displaysError": boolean;
        /**
          * if false, base chart will not display an empty state message when there is no data present.
         */
        "displaysNoDataPresentMsg"?: boolean;
        "gestures": boolean;
        "isEditing": boolean;
        "legend": LegendConfig;
        "messageOverrides"?: MessageOverrides;
        "minBufferSize": number;
        /**
          * Optionally hooks to integrate custom logic into the base chart
         */
        "onUpdateLifeCycle"?: (viewport: ViewPortConfig) => void;
        "renderLegend": (props: Legend.Props) => HTMLElement;
        "renderTooltip": (props: Tooltip.Props) => HTMLElement;
        /**
          * Optionally provided callback to initiate a request for data. Used to ensure gestures emit events for request data.
         */
        "requestData"?: RequestDataFn;
        "shouldRerenderOnViewportChange"?: ({ oldViewport, newViewport }) => boolean;
        "size": SizePositionConfig;
        "supportString": boolean;
        "trends": Trend[];
        "updateChartScene": ChartSceneUpdater;
        "viewport": MinimalViewPortConfig;
        "visualizesAlarms": boolean;
        "yRangeStartFromZero": boolean;
    }
    interface ScWebglChartAnnotationEditable {
    }
    interface ScWebglChartAnnotations {
    }
    interface ScWebglChartAnnotationsAlwaysInViewport {
    }
    interface ScWebglChartAxis {
    }
    interface ScWebglChartDynamicCharts {
    }
    interface ScWebglChartLargeViewport {
    }
    interface ScWebglChartMulti {
    }
    interface ScWebglChartNoAnnotations {
    }
    interface ScWebglChartStandard {
    }
    interface ScWebglChartStandardWithLegend {
    }
    interface ScWebglChartStandardWithLegendOnRight {
    }
    interface ScWebglChartThresholdColorationBand {
    }
    interface ScWebglChartThresholdColorationExactPoint {
    }
    interface ScWebglChartThresholdColorationMultipleDataStream {
    }
    interface ScWebglChartThresholdColorationMultipleThresholds {
    }
    interface ScWebglChartThresholdColorationSplitHalf {
    }
    interface ScWebglChartTooltipWithMultipleDataStreams {
    }
    interface ScWebglContext {
    }
    interface ScWebglLineChartDynamicBuffer {
    }
    interface ScWebglLineChartDynamicData {
    }
    interface ScWebglLineChartDynamicDataStreams {
    }
    interface ScWidgetGrid {
        "annotations": Annotations;
        "collapseVertically": boolean;
        "dataStreams": DataStream[];
        "isEditing": boolean;
        /**
          * Chart API
         */
        "labelsConfig"?: LabelsConfig;
        "liveModeOnlyMessage": string;
        "messageOverrides": MessageOverrides;
        "renderCell": RenderCell;
        "viewport": MinimalViewPortConfig;
        "widgetId": string;
    }
    interface SingleColoredStatus {
    }
    interface SingleStatus {
    }
    interface StatusTimelineDynamicBuffer {
    }
    interface StatusTimelineDynamicData {
    }
    interface StatusTimelineDynamicDataStreams {
    }
    interface StatusTimelineFastViewport {
    }
    interface StatusTimelineMargin {
    }
    interface StatusTimelineMultipleDataStreams {
    }
    interface StatusTimelineRawData {
    }
    interface StatusTimelineStandard {
    }
    interface StatusTimelineThresholdColoration {
    }
    interface StatusTimelineThresholdColorationBand {
    }
    interface StatusTimelineThresholdColorationExactPoint {
    }
    interface StatusTimelineThresholdColorationMultipleDataStream {
    }
    interface StatusTimelineThresholdColorationMultipleThresholds {
    }
    interface StatusTimelineThresholdNoColoration {
    }
    interface WidgetTestRoute {
        "component": string;
        "dataStreamInfos": DataStreamInfo[];
    }
}
declare global {
    interface HTMLLineChartViewportChangeElement extends Components.LineChartViewportChange, HTMLStencilElement {
    }
    var HTMLLineChartViewportChangeElement: {
        prototype: HTMLLineChartViewportChangeElement;
        new (): HTMLLineChartViewportChangeElement;
    };
    interface HTMLMultipleStatusesElement extends Components.MultipleStatuses, HTMLStencilElement {
    }
    var HTMLMultipleStatusesElement: {
        prototype: HTMLMultipleStatusesElement;
        new (): HTMLMultipleStatusesElement;
    };
    interface HTMLScAngledLineSegmentElement extends Components.ScAngledLineSegment, HTMLStencilElement {
    }
    var HTMLScAngledLineSegmentElement: {
        prototype: HTMLScAngledLineSegmentElement;
        new (): HTMLScAngledLineSegmentElement;
    };
    interface HTMLScAnnotationsDraggableMultiElement extends Components.ScAnnotationsDraggableMulti, HTMLStencilElement {
    }
    var HTMLScAnnotationsDraggableMultiElement: {
        prototype: HTMLScAnnotationsDraggableMultiElement;
        new (): HTMLScAnnotationsDraggableMultiElement;
    };
    interface HTMLScAppElement extends Components.ScApp, HTMLStencilElement {
    }
    var HTMLScAppElement: {
        prototype: HTMLScAppElement;
        new (): HTMLScAppElement;
    };
    interface HTMLScBarChartElement extends Components.ScBarChart, HTMLStencilElement {
    }
    var HTMLScBarChartElement: {
        prototype: HTMLScBarChartElement;
        new (): HTMLScBarChartElement;
    };
    interface HTMLScBoxElement extends Components.ScBox, HTMLStencilElement {
    }
    var HTMLScBoxElement: {
        prototype: HTMLScBoxElement;
        new (): HTMLScBoxElement;
    };
    interface HTMLScChartIconElement extends Components.ScChartIcon, HTMLStencilElement {
    }
    var HTMLScChartIconElement: {
        prototype: HTMLScChartIconElement;
        new (): HTMLScChartIconElement;
    };
    interface HTMLScChartYRangeElement extends Components.ScChartYRange, HTMLStencilElement {
    }
    var HTMLScChartYRangeElement: {
        prototype: HTMLScChartYRangeElement;
        new (): HTMLScChartYRangeElement;
    };
    interface HTMLScCirclePointShadersElement extends Components.ScCirclePointShaders, HTMLStencilElement {
    }
    var HTMLScCirclePointShadersElement: {
        prototype: HTMLScCirclePointShadersElement;
        new (): HTMLScCirclePointShadersElement;
    };
    interface HTMLScDataStreamNameElement extends Components.ScDataStreamName, HTMLStencilElement {
    }
    var HTMLScDataStreamNameElement: {
        prototype: HTMLScDataStreamNameElement;
        new (): HTMLScDataStreamNameElement;
    };
    interface HTMLScErrorBadgeElement extends Components.ScErrorBadge, HTMLStencilElement {
    }
    var HTMLScErrorBadgeElement: {
        prototype: HTMLScErrorBadgeElement;
        new (): HTMLScErrorBadgeElement;
    };
    interface HTMLScExpandableInputElement extends Components.ScExpandableInput, HTMLStencilElement {
    }
    var HTMLScExpandableInputElement: {
        prototype: HTMLScExpandableInputElement;
        new (): HTMLScExpandableInputElement;
    };
    interface HTMLScExpandableInputStandardElement extends Components.ScExpandableInputStandard, HTMLStencilElement {
    }
    var HTMLScExpandableInputStandardElement: {
        prototype: HTMLScExpandableInputStandardElement;
        new (): HTMLScExpandableInputStandardElement;
    };
    interface HTMLScGestureHandlerElement extends Components.ScGestureHandler, HTMLStencilElement {
    }
    var HTMLScGestureHandlerElement: {
        prototype: HTMLScGestureHandlerElement;
        new (): HTMLScGestureHandlerElement;
    };
    interface HTMLScGridElement extends Components.ScGrid, HTMLStencilElement {
    }
    var HTMLScGridElement: {
        prototype: HTMLScGridElement;
        new (): HTMLScGridElement;
    };
    interface HTMLScGridTooltipElement extends Components.ScGridTooltip, HTMLStencilElement {
    }
    var HTMLScGridTooltipElement: {
        prototype: HTMLScGridTooltipElement;
        new (): HTMLScGridTooltipElement;
    };
    interface HTMLScHelpTooltipElement extends Components.ScHelpTooltip, HTMLStencilElement {
    }
    var HTMLScHelpTooltipElement: {
        prototype: HTMLScHelpTooltipElement;
        new (): HTMLScHelpTooltipElement;
    };
    interface HTMLScKpiElement extends Components.ScKpi, HTMLStencilElement {
    }
    var HTMLScKpiElement: {
        prototype: HTMLScKpiElement;
        new (): HTMLScKpiElement;
    };
    interface HTMLScKpiBaseElement extends Components.ScKpiBase, HTMLStencilElement {
    }
    var HTMLScKpiBaseElement: {
        prototype: HTMLScKpiBaseElement;
        new (): HTMLScKpiBaseElement;
    };
    interface HTMLScKpiStandardElement extends Components.ScKpiStandard, HTMLStencilElement {
    }
    var HTMLScKpiStandardElement: {
        prototype: HTMLScKpiStandardElement;
        new (): HTMLScKpiStandardElement;
    };
    interface HTMLScLegendElement extends Components.ScLegend, HTMLStencilElement {
    }
    var HTMLScLegendElement: {
        prototype: HTMLScLegendElement;
        new (): HTMLScLegendElement;
    };
    interface HTMLScLegendRowElement extends Components.ScLegendRow, HTMLStencilElement {
    }
    var HTMLScLegendRowElement: {
        prototype: HTMLScLegendRowElement;
        new (): HTMLScLegendRowElement;
    };
    interface HTMLScLineChartElement extends Components.ScLineChart, HTMLStencilElement {
    }
    var HTMLScLineChartElement: {
        prototype: HTMLScLineChartElement;
        new (): HTMLScLineChartElement;
    };
    interface HTMLScLineChartColoredPointElement extends Components.ScLineChartColoredPoint, HTMLStencilElement {
    }
    var HTMLScLineChartColoredPointElement: {
        prototype: HTMLScLineChartColoredPointElement;
        new (): HTMLScLineChartColoredPointElement;
    };
    interface HTMLScLineChartStreamDataElement extends Components.ScLineChartStreamData, HTMLStencilElement {
    }
    var HTMLScLineChartStreamDataElement: {
        prototype: HTMLScLineChartStreamDataElement;
        new (): HTMLScLineChartStreamDataElement;
    };
    interface HTMLScLoadingSpinnerElement extends Components.ScLoadingSpinner, HTMLStencilElement {
    }
    var HTMLScLoadingSpinnerElement: {
        prototype: HTMLScLoadingSpinnerElement;
        new (): HTMLScLoadingSpinnerElement;
    };
    interface HTMLScMultipleBarsElement extends Components.ScMultipleBars, HTMLStencilElement {
    }
    var HTMLScMultipleBarsElement: {
        prototype: HTMLScMultipleBarsElement;
        new (): HTMLScMultipleBarsElement;
    };
    interface HTMLScMultipleLinesElement extends Components.ScMultipleLines, HTMLStencilElement {
    }
    var HTMLScMultipleLinesElement: {
        prototype: HTMLScMultipleLinesElement;
        new (): HTMLScMultipleLinesElement;
    };
    interface HTMLScMultipleLinesOverlappingElement extends Components.ScMultipleLinesOverlapping, HTMLStencilElement {
    }
    var HTMLScMultipleLinesOverlappingElement: {
        prototype: HTMLScMultipleLinesOverlappingElement;
        new (): HTMLScMultipleLinesOverlappingElement;
    };
    interface HTMLScScatterChartElement extends Components.ScScatterChart, HTMLStencilElement {
    }
    var HTMLScScatterChartElement: {
        prototype: HTMLScScatterChartElement;
        new (): HTMLScScatterChartElement;
    };
    interface HTMLScScatterChartDynamicDataElement extends Components.ScScatterChartDynamicData, HTMLStencilElement {
    }
    var HTMLScScatterChartDynamicDataElement: {
        prototype: HTMLScScatterChartDynamicDataElement;
        new (): HTMLScScatterChartDynamicDataElement;
    };
    interface HTMLScScatterChartThresholdElement extends Components.ScScatterChartThreshold, HTMLStencilElement {
    }
    var HTMLScScatterChartThresholdElement: {
        prototype: HTMLScScatterChartThresholdElement;
        new (): HTMLScScatterChartThresholdElement;
    };
    interface HTMLScScatterChartThresholdColorationBandElement extends Components.ScScatterChartThresholdColorationBand, HTMLStencilElement {
    }
    var HTMLScScatterChartThresholdColorationBandElement: {
        prototype: HTMLScScatterChartThresholdColorationBandElement;
        new (): HTMLScScatterChartThresholdColorationBandElement;
    };
    interface HTMLScScatterChartThresholdColorationExactPointElement extends Components.ScScatterChartThresholdColorationExactPoint, HTMLStencilElement {
    }
    var HTMLScScatterChartThresholdColorationExactPointElement: {
        prototype: HTMLScScatterChartThresholdColorationExactPointElement;
        new (): HTMLScScatterChartThresholdColorationExactPointElement;
    };
    interface HTMLScScatterChartThresholdColorationMultipleDataStreamElement extends Components.ScScatterChartThresholdColorationMultipleDataStream, HTMLStencilElement {
    }
    var HTMLScScatterChartThresholdColorationMultipleDataStreamElement: {
        prototype: HTMLScScatterChartThresholdColorationMultipleDataStreamElement;
        new (): HTMLScScatterChartThresholdColorationMultipleDataStreamElement;
    };
    interface HTMLScScatterChartThresholdColorationMultipleThresholdsElement extends Components.ScScatterChartThresholdColorationMultipleThresholds, HTMLStencilElement {
    }
    var HTMLScScatterChartThresholdColorationMultipleThresholdsElement: {
        prototype: HTMLScScatterChartThresholdColorationMultipleThresholdsElement;
        new (): HTMLScScatterChartThresholdColorationMultipleThresholdsElement;
    };
    interface HTMLScScatterChartThresholdNoColorationElement extends Components.ScScatterChartThresholdNoColoration, HTMLStencilElement {
    }
    var HTMLScScatterChartThresholdNoColorationElement: {
        prototype: HTMLScScatterChartThresholdNoColorationElement;
        new (): HTMLScScatterChartThresholdNoColorationElement;
    };
    interface HTMLScScatterChartTooltipWithMultipleDataStreamsAndTrendsElement extends Components.ScScatterChartTooltipWithMultipleDataStreamsAndTrends, HTMLStencilElement {
    }
    var HTMLScScatterChartTooltipWithMultipleDataStreamsAndTrendsElement: {
        prototype: HTMLScScatterChartTooltipWithMultipleDataStreamsAndTrendsElement;
        new (): HTMLScScatterChartTooltipWithMultipleDataStreamsAndTrendsElement;
    };
    interface HTMLScScatterChartTrendLineColorConfigurationElement extends Components.ScScatterChartTrendLineColorConfiguration, HTMLStencilElement {
    }
    var HTMLScScatterChartTrendLineColorConfigurationElement: {
        prototype: HTMLScScatterChartTrendLineColorConfigurationElement;
        new (): HTMLScScatterChartTrendLineColorConfigurationElement;
    };
    interface HTMLScScatterChartTrendLineWithLegendElement extends Components.ScScatterChartTrendLineWithLegend, HTMLStencilElement {
    }
    var HTMLScScatterChartTrendLineWithLegendElement: {
        prototype: HTMLScScatterChartTrendLineWithLegendElement;
        new (): HTMLScScatterChartTrendLineWithLegendElement;
    };
    interface HTMLScSingleBarElement extends Components.ScSingleBar, HTMLStencilElement {
    }
    var HTMLScSingleBarElement: {
        prototype: HTMLScSingleBarElement;
        new (): HTMLScSingleBarElement;
    };
    interface HTMLScSingleColoredBarElement extends Components.ScSingleColoredBar, HTMLStencilElement {
    }
    var HTMLScSingleColoredBarElement: {
        prototype: HTMLScSingleColoredBarElement;
        new (): HTMLScSingleColoredBarElement;
    };
    interface HTMLScSizeProviderElement extends Components.ScSizeProvider, HTMLStencilElement {
    }
    var HTMLScSizeProviderElement: {
        prototype: HTMLScSizeProviderElement;
        new (): HTMLScSizeProviderElement;
    };
    interface HTMLScSizeProviderStandardElement extends Components.ScSizeProviderStandard, HTMLStencilElement {
    }
    var HTMLScSizeProviderStandardElement: {
        prototype: HTMLScSizeProviderStandardElement;
        new (): HTMLScSizeProviderStandardElement;
    };
    interface HTMLScStatusCellElement extends Components.ScStatusCell, HTMLStencilElement {
    }
    var HTMLScStatusCellElement: {
        prototype: HTMLScStatusCellElement;
        new (): HTMLScStatusCellElement;
    };
    interface HTMLScStatusGridElement extends Components.ScStatusGrid, HTMLStencilElement {
    }
    var HTMLScStatusGridElement: {
        prototype: HTMLScStatusGridElement;
        new (): HTMLScStatusGridElement;
    };
    interface HTMLScStatusGridStandardElement extends Components.ScStatusGridStandard, HTMLStencilElement {
    }
    var HTMLScStatusGridStandardElement: {
        prototype: HTMLScStatusGridStandardElement;
        new (): HTMLScStatusGridStandardElement;
    };
    interface HTMLScStatusTimelineElement extends Components.ScStatusTimeline, HTMLStencilElement {
    }
    var HTMLScStatusTimelineElement: {
        prototype: HTMLScStatusTimelineElement;
        new (): HTMLScStatusTimelineElement;
    };
    interface HTMLScStatusTimelineOverlayElement extends Components.ScStatusTimelineOverlay, HTMLStencilElement {
    }
    var HTMLScStatusTimelineOverlayElement: {
        prototype: HTMLScStatusTimelineOverlayElement;
        new (): HTMLScStatusTimelineOverlayElement;
    };
    interface HTMLScStatusTimelineOverlayRowElement extends Components.ScStatusTimelineOverlayRow, HTMLStencilElement {
    }
    var HTMLScStatusTimelineOverlayRowElement: {
        prototype: HTMLScStatusTimelineOverlayRowElement;
        new (): HTMLScStatusTimelineOverlayRowElement;
    };
    interface HTMLScStraightLineSegmentElement extends Components.ScStraightLineSegment, HTMLStencilElement {
    }
    var HTMLScStraightLineSegmentElement: {
        prototype: HTMLScStraightLineSegmentElement;
        new (): HTMLScStraightLineSegmentElement;
    };
    interface HTMLScStraightLineSegmentColoredElement extends Components.ScStraightLineSegmentColored, HTMLStencilElement {
    }
    var HTMLScStraightLineSegmentColoredElement: {
        prototype: HTMLScStraightLineSegmentColoredElement;
        new (): HTMLScStraightLineSegmentColoredElement;
    };
    interface HTMLScTableElement extends Components.ScTable, HTMLStencilElement {
    }
    var HTMLScTableElement: {
        prototype: HTMLScTableElement;
        new (): HTMLScTableElement;
    };
    interface HTMLScTableBaseElement extends Components.ScTableBase, HTMLStencilElement {
    }
    var HTMLScTableBaseElement: {
        prototype: HTMLScTableBaseElement;
        new (): HTMLScTableBaseElement;
    };
    interface HTMLScTableCellElement extends Components.ScTableCell, HTMLStencilElement {
    }
    var HTMLScTableCellElement: {
        prototype: HTMLScTableCellElement;
        new (): HTMLScTableCellElement;
    };
    interface HTMLScThresholdLegendElement extends Components.ScThresholdLegend, HTMLStencilElement {
    }
    var HTMLScThresholdLegendElement: {
        prototype: HTMLScThresholdLegendElement;
        new (): HTMLScThresholdLegendElement;
    };
    interface HTMLScThresholdLegendRowElement extends Components.ScThresholdLegendRow, HTMLStencilElement {
    }
    var HTMLScThresholdLegendRowElement: {
        prototype: HTMLScThresholdLegendRowElement;
        new (): HTMLScThresholdLegendRowElement;
    };
    interface HTMLScTooltipElement extends Components.ScTooltip, HTMLStencilElement {
    }
    var HTMLScTooltipElement: {
        prototype: HTMLScTooltipElement;
        new (): HTMLScTooltipElement;
    };
    interface HTMLScTooltipRowElement extends Components.ScTooltipRow, HTMLStencilElement {
    }
    var HTMLScTooltipRowElement: {
        prototype: HTMLScTooltipRowElement;
        new (): HTMLScTooltipRowElement;
    };
    interface HTMLScTooltipRowsElement extends Components.ScTooltipRows, HTMLStencilElement {
    }
    var HTMLScTooltipRowsElement: {
        prototype: HTMLScTooltipRowsElement;
        new (): HTMLScTooltipRowsElement;
    };
    interface HTMLScWebglAxisElement extends Components.ScWebglAxis, HTMLStencilElement {
    }
    var HTMLScWebglAxisElement: {
        prototype: HTMLScWebglAxisElement;
        new (): HTMLScWebglAxisElement;
    };
    interface HTMLScWebglBarChartDynamicBufferElement extends Components.ScWebglBarChartDynamicBuffer, HTMLStencilElement {
    }
    var HTMLScWebglBarChartDynamicBufferElement: {
        prototype: HTMLScWebglBarChartDynamicBufferElement;
        new (): HTMLScWebglBarChartDynamicBufferElement;
    };
    interface HTMLScWebglBarChartDynamicDataElement extends Components.ScWebglBarChartDynamicData, HTMLStencilElement {
    }
    var HTMLScWebglBarChartDynamicDataElement: {
        prototype: HTMLScWebglBarChartDynamicDataElement;
        new (): HTMLScWebglBarChartDynamicDataElement;
    };
    interface HTMLScWebglBarChartDynamicDataStreamsElement extends Components.ScWebglBarChartDynamicDataStreams, HTMLStencilElement {
    }
    var HTMLScWebglBarChartDynamicDataStreamsElement: {
        prototype: HTMLScWebglBarChartDynamicDataStreamsElement;
        new (): HTMLScWebglBarChartDynamicDataStreamsElement;
    };
    interface HTMLScWebglBarChartFastViewportElement extends Components.ScWebglBarChartFastViewport, HTMLStencilElement {
    }
    var HTMLScWebglBarChartFastViewportElement: {
        prototype: HTMLScWebglBarChartFastViewportElement;
        new (): HTMLScWebglBarChartFastViewportElement;
    };
    interface HTMLScWebglBarChartMarginElement extends Components.ScWebglBarChartMargin, HTMLStencilElement {
    }
    var HTMLScWebglBarChartMarginElement: {
        prototype: HTMLScWebglBarChartMarginElement;
        new (): HTMLScWebglBarChartMarginElement;
    };
    interface HTMLScWebglBarChartNegativeElement extends Components.ScWebglBarChartNegative, HTMLStencilElement {
    }
    var HTMLScWebglBarChartNegativeElement: {
        prototype: HTMLScWebglBarChartNegativeElement;
        new (): HTMLScWebglBarChartNegativeElement;
    };
    interface HTMLScWebglBarChartPositiveNegativeElement extends Components.ScWebglBarChartPositiveNegative, HTMLStencilElement {
    }
    var HTMLScWebglBarChartPositiveNegativeElement: {
        prototype: HTMLScWebglBarChartPositiveNegativeElement;
        new (): HTMLScWebglBarChartPositiveNegativeElement;
    };
    interface HTMLScWebglBarChartStandardElement extends Components.ScWebglBarChartStandard, HTMLStencilElement {
    }
    var HTMLScWebglBarChartStandardElement: {
        prototype: HTMLScWebglBarChartStandardElement;
        new (): HTMLScWebglBarChartStandardElement;
    };
    interface HTMLScWebglBarChartStartFromZeroElement extends Components.ScWebglBarChartStartFromZero, HTMLStencilElement {
    }
    var HTMLScWebglBarChartStartFromZeroElement: {
        prototype: HTMLScWebglBarChartStartFromZeroElement;
        new (): HTMLScWebglBarChartStartFromZeroElement;
    };
    interface HTMLScWebglBarChartThresholdColorationElement extends Components.ScWebglBarChartThresholdColoration, HTMLStencilElement {
    }
    var HTMLScWebglBarChartThresholdColorationElement: {
        prototype: HTMLScWebglBarChartThresholdColorationElement;
        new (): HTMLScWebglBarChartThresholdColorationElement;
    };
    interface HTMLScWebglBarChartThresholdColorationBandElement extends Components.ScWebglBarChartThresholdColorationBand, HTMLStencilElement {
    }
    var HTMLScWebglBarChartThresholdColorationBandElement: {
        prototype: HTMLScWebglBarChartThresholdColorationBandElement;
        new (): HTMLScWebglBarChartThresholdColorationBandElement;
    };
    interface HTMLScWebglBarChartThresholdColorationExactPointElement extends Components.ScWebglBarChartThresholdColorationExactPoint, HTMLStencilElement {
    }
    var HTMLScWebglBarChartThresholdColorationExactPointElement: {
        prototype: HTMLScWebglBarChartThresholdColorationExactPointElement;
        new (): HTMLScWebglBarChartThresholdColorationExactPointElement;
    };
    interface HTMLScWebglBarChartThresholdColorationMultipleDataStreamElement extends Components.ScWebglBarChartThresholdColorationMultipleDataStream, HTMLStencilElement {
    }
    var HTMLScWebglBarChartThresholdColorationMultipleDataStreamElement: {
        prototype: HTMLScWebglBarChartThresholdColorationMultipleDataStreamElement;
        new (): HTMLScWebglBarChartThresholdColorationMultipleDataStreamElement;
    };
    interface HTMLScWebglBarChartThresholdColorationMultipleThresholdsElement extends Components.ScWebglBarChartThresholdColorationMultipleThresholds, HTMLStencilElement {
    }
    var HTMLScWebglBarChartThresholdColorationMultipleThresholdsElement: {
        prototype: HTMLScWebglBarChartThresholdColorationMultipleThresholdsElement;
        new (): HTMLScWebglBarChartThresholdColorationMultipleThresholdsElement;
    };
    interface HTMLScWebglBarChartThresholdNoColorationElement extends Components.ScWebglBarChartThresholdNoColoration, HTMLStencilElement {
    }
    var HTMLScWebglBarChartThresholdNoColorationElement: {
        prototype: HTMLScWebglBarChartThresholdNoColorationElement;
        new (): HTMLScWebglBarChartThresholdNoColorationElement;
    };
    interface HTMLScWebglBaseChartElement extends Components.ScWebglBaseChart, HTMLStencilElement {
    }
    var HTMLScWebglBaseChartElement: {
        prototype: HTMLScWebglBaseChartElement;
        new (): HTMLScWebglBaseChartElement;
    };
    interface HTMLScWebglChartAnnotationEditableElement extends Components.ScWebglChartAnnotationEditable, HTMLStencilElement {
    }
    var HTMLScWebglChartAnnotationEditableElement: {
        prototype: HTMLScWebglChartAnnotationEditableElement;
        new (): HTMLScWebglChartAnnotationEditableElement;
    };
    interface HTMLScWebglChartAnnotationsElement extends Components.ScWebglChartAnnotations, HTMLStencilElement {
    }
    var HTMLScWebglChartAnnotationsElement: {
        prototype: HTMLScWebglChartAnnotationsElement;
        new (): HTMLScWebglChartAnnotationsElement;
    };
    interface HTMLScWebglChartAnnotationsAlwaysInViewportElement extends Components.ScWebglChartAnnotationsAlwaysInViewport, HTMLStencilElement {
    }
    var HTMLScWebglChartAnnotationsAlwaysInViewportElement: {
        prototype: HTMLScWebglChartAnnotationsAlwaysInViewportElement;
        new (): HTMLScWebglChartAnnotationsAlwaysInViewportElement;
    };
    interface HTMLScWebglChartAxisElement extends Components.ScWebglChartAxis, HTMLStencilElement {
    }
    var HTMLScWebglChartAxisElement: {
        prototype: HTMLScWebglChartAxisElement;
        new (): HTMLScWebglChartAxisElement;
    };
    interface HTMLScWebglChartDynamicChartsElement extends Components.ScWebglChartDynamicCharts, HTMLStencilElement {
    }
    var HTMLScWebglChartDynamicChartsElement: {
        prototype: HTMLScWebglChartDynamicChartsElement;
        new (): HTMLScWebglChartDynamicChartsElement;
    };
    interface HTMLScWebglChartLargeViewportElement extends Components.ScWebglChartLargeViewport, HTMLStencilElement {
    }
    var HTMLScWebglChartLargeViewportElement: {
        prototype: HTMLScWebglChartLargeViewportElement;
        new (): HTMLScWebglChartLargeViewportElement;
    };
    interface HTMLScWebglChartMultiElement extends Components.ScWebglChartMulti, HTMLStencilElement {
    }
    var HTMLScWebglChartMultiElement: {
        prototype: HTMLScWebglChartMultiElement;
        new (): HTMLScWebglChartMultiElement;
    };
    interface HTMLScWebglChartNoAnnotationsElement extends Components.ScWebglChartNoAnnotations, HTMLStencilElement {
    }
    var HTMLScWebglChartNoAnnotationsElement: {
        prototype: HTMLScWebglChartNoAnnotationsElement;
        new (): HTMLScWebglChartNoAnnotationsElement;
    };
    interface HTMLScWebglChartStandardElement extends Components.ScWebglChartStandard, HTMLStencilElement {
    }
    var HTMLScWebglChartStandardElement: {
        prototype: HTMLScWebglChartStandardElement;
        new (): HTMLScWebglChartStandardElement;
    };
    interface HTMLScWebglChartStandardWithLegendElement extends Components.ScWebglChartStandardWithLegend, HTMLStencilElement {
    }
    var HTMLScWebglChartStandardWithLegendElement: {
        prototype: HTMLScWebglChartStandardWithLegendElement;
        new (): HTMLScWebglChartStandardWithLegendElement;
    };
    interface HTMLScWebglChartStandardWithLegendOnRightElement extends Components.ScWebglChartStandardWithLegendOnRight, HTMLStencilElement {
    }
    var HTMLScWebglChartStandardWithLegendOnRightElement: {
        prototype: HTMLScWebglChartStandardWithLegendOnRightElement;
        new (): HTMLScWebglChartStandardWithLegendOnRightElement;
    };
    interface HTMLScWebglChartThresholdColorationBandElement extends Components.ScWebglChartThresholdColorationBand, HTMLStencilElement {
    }
    var HTMLScWebglChartThresholdColorationBandElement: {
        prototype: HTMLScWebglChartThresholdColorationBandElement;
        new (): HTMLScWebglChartThresholdColorationBandElement;
    };
    interface HTMLScWebglChartThresholdColorationExactPointElement extends Components.ScWebglChartThresholdColorationExactPoint, HTMLStencilElement {
    }
    var HTMLScWebglChartThresholdColorationExactPointElement: {
        prototype: HTMLScWebglChartThresholdColorationExactPointElement;
        new (): HTMLScWebglChartThresholdColorationExactPointElement;
    };
    interface HTMLScWebglChartThresholdColorationMultipleDataStreamElement extends Components.ScWebglChartThresholdColorationMultipleDataStream, HTMLStencilElement {
    }
    var HTMLScWebglChartThresholdColorationMultipleDataStreamElement: {
        prototype: HTMLScWebglChartThresholdColorationMultipleDataStreamElement;
        new (): HTMLScWebglChartThresholdColorationMultipleDataStreamElement;
    };
    interface HTMLScWebglChartThresholdColorationMultipleThresholdsElement extends Components.ScWebglChartThresholdColorationMultipleThresholds, HTMLStencilElement {
    }
    var HTMLScWebglChartThresholdColorationMultipleThresholdsElement: {
        prototype: HTMLScWebglChartThresholdColorationMultipleThresholdsElement;
        new (): HTMLScWebglChartThresholdColorationMultipleThresholdsElement;
    };
    interface HTMLScWebglChartThresholdColorationSplitHalfElement extends Components.ScWebglChartThresholdColorationSplitHalf, HTMLStencilElement {
    }
    var HTMLScWebglChartThresholdColorationSplitHalfElement: {
        prototype: HTMLScWebglChartThresholdColorationSplitHalfElement;
        new (): HTMLScWebglChartThresholdColorationSplitHalfElement;
    };
    interface HTMLScWebglChartTooltipWithMultipleDataStreamsElement extends Components.ScWebglChartTooltipWithMultipleDataStreams, HTMLStencilElement {
    }
    var HTMLScWebglChartTooltipWithMultipleDataStreamsElement: {
        prototype: HTMLScWebglChartTooltipWithMultipleDataStreamsElement;
        new (): HTMLScWebglChartTooltipWithMultipleDataStreamsElement;
    };
    interface HTMLScWebglContextElement extends Components.ScWebglContext, HTMLStencilElement {
    }
    var HTMLScWebglContextElement: {
        prototype: HTMLScWebglContextElement;
        new (): HTMLScWebglContextElement;
    };
    interface HTMLScWebglLineChartDynamicBufferElement extends Components.ScWebglLineChartDynamicBuffer, HTMLStencilElement {
    }
    var HTMLScWebglLineChartDynamicBufferElement: {
        prototype: HTMLScWebglLineChartDynamicBufferElement;
        new (): HTMLScWebglLineChartDynamicBufferElement;
    };
    interface HTMLScWebglLineChartDynamicDataElement extends Components.ScWebglLineChartDynamicData, HTMLStencilElement {
    }
    var HTMLScWebglLineChartDynamicDataElement: {
        prototype: HTMLScWebglLineChartDynamicDataElement;
        new (): HTMLScWebglLineChartDynamicDataElement;
    };
    interface HTMLScWebglLineChartDynamicDataStreamsElement extends Components.ScWebglLineChartDynamicDataStreams, HTMLStencilElement {
    }
    var HTMLScWebglLineChartDynamicDataStreamsElement: {
        prototype: HTMLScWebglLineChartDynamicDataStreamsElement;
        new (): HTMLScWebglLineChartDynamicDataStreamsElement;
    };
    interface HTMLScWidgetGridElement extends Components.ScWidgetGrid, HTMLStencilElement {
    }
    var HTMLScWidgetGridElement: {
        prototype: HTMLScWidgetGridElement;
        new (): HTMLScWidgetGridElement;
    };
    interface HTMLSingleColoredStatusElement extends Components.SingleColoredStatus, HTMLStencilElement {
    }
    var HTMLSingleColoredStatusElement: {
        prototype: HTMLSingleColoredStatusElement;
        new (): HTMLSingleColoredStatusElement;
    };
    interface HTMLSingleStatusElement extends Components.SingleStatus, HTMLStencilElement {
    }
    var HTMLSingleStatusElement: {
        prototype: HTMLSingleStatusElement;
        new (): HTMLSingleStatusElement;
    };
    interface HTMLStatusTimelineDynamicBufferElement extends Components.StatusTimelineDynamicBuffer, HTMLStencilElement {
    }
    var HTMLStatusTimelineDynamicBufferElement: {
        prototype: HTMLStatusTimelineDynamicBufferElement;
        new (): HTMLStatusTimelineDynamicBufferElement;
    };
    interface HTMLStatusTimelineDynamicDataElement extends Components.StatusTimelineDynamicData, HTMLStencilElement {
    }
    var HTMLStatusTimelineDynamicDataElement: {
        prototype: HTMLStatusTimelineDynamicDataElement;
        new (): HTMLStatusTimelineDynamicDataElement;
    };
    interface HTMLStatusTimelineDynamicDataStreamsElement extends Components.StatusTimelineDynamicDataStreams, HTMLStencilElement {
    }
    var HTMLStatusTimelineDynamicDataStreamsElement: {
        prototype: HTMLStatusTimelineDynamicDataStreamsElement;
        new (): HTMLStatusTimelineDynamicDataStreamsElement;
    };
    interface HTMLStatusTimelineFastViewportElement extends Components.StatusTimelineFastViewport, HTMLStencilElement {
    }
    var HTMLStatusTimelineFastViewportElement: {
        prototype: HTMLStatusTimelineFastViewportElement;
        new (): HTMLStatusTimelineFastViewportElement;
    };
    interface HTMLStatusTimelineMarginElement extends Components.StatusTimelineMargin, HTMLStencilElement {
    }
    var HTMLStatusTimelineMarginElement: {
        prototype: HTMLStatusTimelineMarginElement;
        new (): HTMLStatusTimelineMarginElement;
    };
    interface HTMLStatusTimelineMultipleDataStreamsElement extends Components.StatusTimelineMultipleDataStreams, HTMLStencilElement {
    }
    var HTMLStatusTimelineMultipleDataStreamsElement: {
        prototype: HTMLStatusTimelineMultipleDataStreamsElement;
        new (): HTMLStatusTimelineMultipleDataStreamsElement;
    };
    interface HTMLStatusTimelineRawDataElement extends Components.StatusTimelineRawData, HTMLStencilElement {
    }
    var HTMLStatusTimelineRawDataElement: {
        prototype: HTMLStatusTimelineRawDataElement;
        new (): HTMLStatusTimelineRawDataElement;
    };
    interface HTMLStatusTimelineStandardElement extends Components.StatusTimelineStandard, HTMLStencilElement {
    }
    var HTMLStatusTimelineStandardElement: {
        prototype: HTMLStatusTimelineStandardElement;
        new (): HTMLStatusTimelineStandardElement;
    };
    interface HTMLStatusTimelineThresholdColorationElement extends Components.StatusTimelineThresholdColoration, HTMLStencilElement {
    }
    var HTMLStatusTimelineThresholdColorationElement: {
        prototype: HTMLStatusTimelineThresholdColorationElement;
        new (): HTMLStatusTimelineThresholdColorationElement;
    };
    interface HTMLStatusTimelineThresholdColorationBandElement extends Components.StatusTimelineThresholdColorationBand, HTMLStencilElement {
    }
    var HTMLStatusTimelineThresholdColorationBandElement: {
        prototype: HTMLStatusTimelineThresholdColorationBandElement;
        new (): HTMLStatusTimelineThresholdColorationBandElement;
    };
    interface HTMLStatusTimelineThresholdColorationExactPointElement extends Components.StatusTimelineThresholdColorationExactPoint, HTMLStencilElement {
    }
    var HTMLStatusTimelineThresholdColorationExactPointElement: {
        prototype: HTMLStatusTimelineThresholdColorationExactPointElement;
        new (): HTMLStatusTimelineThresholdColorationExactPointElement;
    };
    interface HTMLStatusTimelineThresholdColorationMultipleDataStreamElement extends Components.StatusTimelineThresholdColorationMultipleDataStream, HTMLStencilElement {
    }
    var HTMLStatusTimelineThresholdColorationMultipleDataStreamElement: {
        prototype: HTMLStatusTimelineThresholdColorationMultipleDataStreamElement;
        new (): HTMLStatusTimelineThresholdColorationMultipleDataStreamElement;
    };
    interface HTMLStatusTimelineThresholdColorationMultipleThresholdsElement extends Components.StatusTimelineThresholdColorationMultipleThresholds, HTMLStencilElement {
    }
    var HTMLStatusTimelineThresholdColorationMultipleThresholdsElement: {
        prototype: HTMLStatusTimelineThresholdColorationMultipleThresholdsElement;
        new (): HTMLStatusTimelineThresholdColorationMultipleThresholdsElement;
    };
    interface HTMLStatusTimelineThresholdNoColorationElement extends Components.StatusTimelineThresholdNoColoration, HTMLStencilElement {
    }
    var HTMLStatusTimelineThresholdNoColorationElement: {
        prototype: HTMLStatusTimelineThresholdNoColorationElement;
        new (): HTMLStatusTimelineThresholdNoColorationElement;
    };
    interface HTMLWidgetTestRouteElement extends Components.WidgetTestRoute, HTMLStencilElement {
    }
    var HTMLWidgetTestRouteElement: {
        prototype: HTMLWidgetTestRouteElement;
        new (): HTMLWidgetTestRouteElement;
    };
    interface HTMLElementTagNameMap {
        "line-chart-viewport-change": HTMLLineChartViewportChangeElement;
        "multiple-statuses": HTMLMultipleStatusesElement;
        "sc-angled-line-segment": HTMLScAngledLineSegmentElement;
        "sc-annotations-draggable-multi": HTMLScAnnotationsDraggableMultiElement;
        "sc-app": HTMLScAppElement;
        "sc-bar-chart": HTMLScBarChartElement;
        "sc-box": HTMLScBoxElement;
        "sc-chart-icon": HTMLScChartIconElement;
        "sc-chart-y-range": HTMLScChartYRangeElement;
        "sc-circle-point-shaders": HTMLScCirclePointShadersElement;
        "sc-data-stream-name": HTMLScDataStreamNameElement;
        "sc-error-badge": HTMLScErrorBadgeElement;
        "sc-expandable-input": HTMLScExpandableInputElement;
        "sc-expandable-input-standard": HTMLScExpandableInputStandardElement;
        "sc-gesture-handler": HTMLScGestureHandlerElement;
        "sc-grid": HTMLScGridElement;
        "sc-grid-tooltip": HTMLScGridTooltipElement;
        "sc-help-tooltip": HTMLScHelpTooltipElement;
        "sc-kpi": HTMLScKpiElement;
        "sc-kpi-base": HTMLScKpiBaseElement;
        "sc-kpi-standard": HTMLScKpiStandardElement;
        "sc-legend": HTMLScLegendElement;
        "sc-legend-row": HTMLScLegendRowElement;
        "sc-line-chart": HTMLScLineChartElement;
        "sc-line-chart-colored-point": HTMLScLineChartColoredPointElement;
        "sc-line-chart-stream-data": HTMLScLineChartStreamDataElement;
        "sc-loading-spinner": HTMLScLoadingSpinnerElement;
        "sc-multiple-bars": HTMLScMultipleBarsElement;
        "sc-multiple-lines": HTMLScMultipleLinesElement;
        "sc-multiple-lines-overlapping": HTMLScMultipleLinesOverlappingElement;
        "sc-scatter-chart": HTMLScScatterChartElement;
        "sc-scatter-chart-dynamic-data": HTMLScScatterChartDynamicDataElement;
        "sc-scatter-chart-threshold": HTMLScScatterChartThresholdElement;
        "sc-scatter-chart-threshold-coloration-band": HTMLScScatterChartThresholdColorationBandElement;
        "sc-scatter-chart-threshold-coloration-exact-point": HTMLScScatterChartThresholdColorationExactPointElement;
        "sc-scatter-chart-threshold-coloration-multiple-data-stream": HTMLScScatterChartThresholdColorationMultipleDataStreamElement;
        "sc-scatter-chart-threshold-coloration-multiple-thresholds": HTMLScScatterChartThresholdColorationMultipleThresholdsElement;
        "sc-scatter-chart-threshold-no-coloration": HTMLScScatterChartThresholdNoColorationElement;
        "sc-scatter-chart-tooltip-with-multiple-data-streams-and-trends": HTMLScScatterChartTooltipWithMultipleDataStreamsAndTrendsElement;
        "sc-scatter-chart-trend-line-color-configuration": HTMLScScatterChartTrendLineColorConfigurationElement;
        "sc-scatter-chart-trend-line-with-legend": HTMLScScatterChartTrendLineWithLegendElement;
        "sc-single-bar": HTMLScSingleBarElement;
        "sc-single-colored-bar": HTMLScSingleColoredBarElement;
        "sc-size-provider": HTMLScSizeProviderElement;
        "sc-size-provider-standard": HTMLScSizeProviderStandardElement;
        "sc-status-cell": HTMLScStatusCellElement;
        "sc-status-grid": HTMLScStatusGridElement;
        "sc-status-grid-standard": HTMLScStatusGridStandardElement;
        "sc-status-timeline": HTMLScStatusTimelineElement;
        "sc-status-timeline-overlay": HTMLScStatusTimelineOverlayElement;
        "sc-status-timeline-overlay-row": HTMLScStatusTimelineOverlayRowElement;
        "sc-straight-line-segment": HTMLScStraightLineSegmentElement;
        "sc-straight-line-segment-colored": HTMLScStraightLineSegmentColoredElement;
        "sc-table": HTMLScTableElement;
        "sc-table-base": HTMLScTableBaseElement;
        "sc-table-cell": HTMLScTableCellElement;
        "sc-threshold-legend": HTMLScThresholdLegendElement;
        "sc-threshold-legend-row": HTMLScThresholdLegendRowElement;
        "sc-tooltip": HTMLScTooltipElement;
        "sc-tooltip-row": HTMLScTooltipRowElement;
        "sc-tooltip-rows": HTMLScTooltipRowsElement;
        "sc-webgl-axis": HTMLScWebglAxisElement;
        "sc-webgl-bar-chart-dynamic-buffer": HTMLScWebglBarChartDynamicBufferElement;
        "sc-webgl-bar-chart-dynamic-data": HTMLScWebglBarChartDynamicDataElement;
        "sc-webgl-bar-chart-dynamic-data-streams": HTMLScWebglBarChartDynamicDataStreamsElement;
        "sc-webgl-bar-chart-fast-viewport": HTMLScWebglBarChartFastViewportElement;
        "sc-webgl-bar-chart-margin": HTMLScWebglBarChartMarginElement;
        "sc-webgl-bar-chart-negative": HTMLScWebglBarChartNegativeElement;
        "sc-webgl-bar-chart-positive-negative": HTMLScWebglBarChartPositiveNegativeElement;
        "sc-webgl-bar-chart-standard": HTMLScWebglBarChartStandardElement;
        "sc-webgl-bar-chart-start-from-zero": HTMLScWebglBarChartStartFromZeroElement;
        "sc-webgl-bar-chart-threshold-coloration": HTMLScWebglBarChartThresholdColorationElement;
        "sc-webgl-bar-chart-threshold-coloration-band": HTMLScWebglBarChartThresholdColorationBandElement;
        "sc-webgl-bar-chart-threshold-coloration-exact-point": HTMLScWebglBarChartThresholdColorationExactPointElement;
        "sc-webgl-bar-chart-threshold-coloration-multiple-data-stream": HTMLScWebglBarChartThresholdColorationMultipleDataStreamElement;
        "sc-webgl-bar-chart-threshold-coloration-multiple-thresholds": HTMLScWebglBarChartThresholdColorationMultipleThresholdsElement;
        "sc-webgl-bar-chart-threshold-no-coloration": HTMLScWebglBarChartThresholdNoColorationElement;
        "sc-webgl-base-chart": HTMLScWebglBaseChartElement;
        "sc-webgl-chart-annotation-editable": HTMLScWebglChartAnnotationEditableElement;
        "sc-webgl-chart-annotations": HTMLScWebglChartAnnotationsElement;
        "sc-webgl-chart-annotations-always-in-viewport": HTMLScWebglChartAnnotationsAlwaysInViewportElement;
        "sc-webgl-chart-axis": HTMLScWebglChartAxisElement;
        "sc-webgl-chart-dynamic-charts": HTMLScWebglChartDynamicChartsElement;
        "sc-webgl-chart-large-viewport": HTMLScWebglChartLargeViewportElement;
        "sc-webgl-chart-multi": HTMLScWebglChartMultiElement;
        "sc-webgl-chart-no-annotations": HTMLScWebglChartNoAnnotationsElement;
        "sc-webgl-chart-standard": HTMLScWebglChartStandardElement;
        "sc-webgl-chart-standard-with-legend": HTMLScWebglChartStandardWithLegendElement;
        "sc-webgl-chart-standard-with-legend-on-right": HTMLScWebglChartStandardWithLegendOnRightElement;
        "sc-webgl-chart-threshold-coloration-band": HTMLScWebglChartThresholdColorationBandElement;
        "sc-webgl-chart-threshold-coloration-exact-point": HTMLScWebglChartThresholdColorationExactPointElement;
        "sc-webgl-chart-threshold-coloration-multiple-data-stream": HTMLScWebglChartThresholdColorationMultipleDataStreamElement;
        "sc-webgl-chart-threshold-coloration-multiple-thresholds": HTMLScWebglChartThresholdColorationMultipleThresholdsElement;
        "sc-webgl-chart-threshold-coloration-split-half": HTMLScWebglChartThresholdColorationSplitHalfElement;
        "sc-webgl-chart-tooltip-with-multiple-data-streams": HTMLScWebglChartTooltipWithMultipleDataStreamsElement;
        "sc-webgl-context": HTMLScWebglContextElement;
        "sc-webgl-line-chart-dynamic-buffer": HTMLScWebglLineChartDynamicBufferElement;
        "sc-webgl-line-chart-dynamic-data": HTMLScWebglLineChartDynamicDataElement;
        "sc-webgl-line-chart-dynamic-data-streams": HTMLScWebglLineChartDynamicDataStreamsElement;
        "sc-widget-grid": HTMLScWidgetGridElement;
        "single-colored-status": HTMLSingleColoredStatusElement;
        "single-status": HTMLSingleStatusElement;
        "status-timeline-dynamic-buffer": HTMLStatusTimelineDynamicBufferElement;
        "status-timeline-dynamic-data": HTMLStatusTimelineDynamicDataElement;
        "status-timeline-dynamic-data-streams": HTMLStatusTimelineDynamicDataStreamsElement;
        "status-timeline-fast-viewport": HTMLStatusTimelineFastViewportElement;
        "status-timeline-margin": HTMLStatusTimelineMarginElement;
        "status-timeline-multiple-data-streams": HTMLStatusTimelineMultipleDataStreamsElement;
        "status-timeline-raw-data": HTMLStatusTimelineRawDataElement;
        "status-timeline-standard": HTMLStatusTimelineStandardElement;
        "status-timeline-threshold-coloration": HTMLStatusTimelineThresholdColorationElement;
        "status-timeline-threshold-coloration-band": HTMLStatusTimelineThresholdColorationBandElement;
        "status-timeline-threshold-coloration-exact-point": HTMLStatusTimelineThresholdColorationExactPointElement;
        "status-timeline-threshold-coloration-multiple-data-stream": HTMLStatusTimelineThresholdColorationMultipleDataStreamElement;
        "status-timeline-threshold-coloration-multiple-thresholds": HTMLStatusTimelineThresholdColorationMultipleThresholdsElement;
        "status-timeline-threshold-no-coloration": HTMLStatusTimelineThresholdNoColorationElement;
        "widget-test-route": HTMLWidgetTestRouteElement;
    }
}
declare namespace LocalJSX {
    interface LineChartViewportChange {
    }
    interface MultipleStatuses {
    }
    interface ScAngledLineSegment {
    }
    interface ScAnnotationsDraggableMulti {
    }
    interface ScApp {
    }
    interface ScBarChart {
        "alarms"?: AlarmsConfig;
        "annotations"?: Annotations;
        "axis"?: Axis.Options;
        /**
          * Memory Management
         */
        "bufferFactor"?: number;
        "dataStreams": DataStream[];
        "gestures"?: boolean;
        /**
          * Status
         */
        "isEditing"?: boolean;
        "layout"?: LayoutConfig;
        "legend"?: LegendConfig;
        "messageOverrides"?: MessageOverrides;
        "minBufferSize"?: number;
        "movement"?: MovementConfig;
        "requestData"?: RequestDataFn;
        "scale"?: ScaleConfig;
        "size"?: MinimalSizeConfig;
        "trends"?: Trend[];
        /**
          * Chart API
         */
        "viewport"?: MinimalViewPortConfig;
        "widgetId": string;
    }
    interface ScBox {
        "size"?: MinimalSizeConfig;
        "someObject"?: Object;
    }
    interface ScChartIcon {
        "color"?: string;
        "name"?: StatusIcon;
        "size"?: number;
    }
    interface ScChartYRange {
        "component"?: string;
    }
    interface ScCirclePointShaders {
    }
    interface ScDataStreamName {
        "date"?: Date;
        "detailedLabel"?: string;
        "displayTooltip"?: boolean;
        "isEditing": boolean;
        "label": string;
        "onNameChange": (name: string) => void;
        "pointType"?: POINT_TYPE;
    }
    interface ScErrorBadge {
    }
    interface ScExpandableInput {
        "isDisabled"?: boolean;
        "onValueChange": (value: string) => void;
        "value": string;
    }
    interface ScExpandableInputStandard {
    }
    interface ScGestureHandler {
        "onDateRangeChange": ({ end, start }: { start: Date; end: Date }) => void;
        "size": SizeConfig;
        "viewport": ViewPort;
    }
    interface ScGrid {
    }
    interface ScGridTooltip {
        "alarmPoint"?: DataPoint;
        "breachedThreshold"?: Threshold;
        "isEnabled"?: boolean;
        "propertyPoint"?: DataPoint;
        "title"?: string;
    }
    interface ScHelpTooltip {
        "message": string;
    }
    interface ScKpi {
        "annotations"?: Annotations;
        "dataStreams": DataStream[];
        "isEditing"?: boolean;
        "liveModeOnlyMessage"?: string;
        "messageOverrides"?: MessageOverrides;
        "viewport"?: MinimalViewPortConfig;
        "widgetId": string;
    }
    interface ScKpiBase {
        "alarmPoint"?: DataPoint<Primitive>;
        "alarmStream"?: DataStream;
        "breachedThreshold"?: Threshold;
        "isEditing"?: boolean;
        "isEnabled"?: boolean;
        "isLoading"?: boolean;
        "isRefreshing"?: boolean;
        "messageOverrides": MessageOverrides;
        "miniVersion": boolean;
        "onChangeLabel": ({ streamId, name }: { streamId: string; name: string }) => void;
        "propertyPoint"?: DataPoint<Primitive>;
        "propertyStream"?: DataStream;
        "trendStream": DataStream | undefined;
        "valueColor"?: string;
        "viewport": MinimalViewPortConfig;
    }
    interface ScKpiStandard {
    }
    interface ScLegend {
        "config": LegendConfig;
        "dataStreams": DataStream[];
        "isEditing"?: boolean;
        "isLoading": boolean;
        "showDataStreamColor": boolean;
        "supportString"?: boolean;
        "thresholds": Threshold[];
        "trendResults"?: TrendResult[];
        "updateDataStreamName": ({ streamId, name }: { streamId: string; name: string }) => void;
        "viewport": ViewPort;
        "visualizesAlarms": boolean;
    }
    interface ScLegendRow {
        "color": string;
        "detailedLabel"?: string;
        "icon"?: StatusIcon;
        "isEditing": boolean;
        "isLoading": boolean;
        "label": string;
        "point"?: DataPoint<Primitive>;
        "pointType"?: POINT_TYPE;
        "showDataStreamColor": boolean;
        "streamId": string;
        "unit"?: string;
        "updateDataStreamName": ({ streamId, name }: { streamId: string; name: string }) => void;
        "valueColor"?: string;
    }
    interface ScLineChart {
        "alarms"?: AlarmsConfig;
        "annotations"?: Annotations;
        "axis"?: Axis.Options;
        /**
          * Memory Management
         */
        "bufferFactor"?: number;
        "dataStreams": DataStream[];
        "gestures"?: boolean;
        /**
          * Status
         */
        "isEditing"?: boolean;
        "layout"?: LayoutConfig;
        "legend"?: LegendConfig;
        "messageOverrides"?: MessageOverrides;
        "minBufferSize"?: number;
        "movement"?: MovementConfig;
        "requestData"?: RequestDataFn;
        "scale"?: ScaleConfig;
        "size"?: MinimalSizeConfig;
        "trends"?: Trend[];
        /**
          * Chart API
         */
        "viewport": MinimalViewPortConfig;
        "widgetId": string;
    }
    interface ScLineChartColoredPoint {
    }
    interface ScLineChartStreamData {
    }
    interface ScLoadingSpinner {
        "dark"?: boolean;
        "size"?: number;
    }
    interface ScMultipleBars {
    }
    interface ScMultipleLines {
    }
    interface ScMultipleLinesOverlapping {
    }
    interface ScScatterChart {
        "alarms"?: AlarmsConfig;
        "annotations"?: Annotations;
        "axis"?: Axis.Options;
        /**
          * Memory Management
         */
        "bufferFactor"?: number;
        "dataStreams": DataStream[];
        "gestures"?: boolean;
        /**
          * Status
         */
        "isEditing"?: boolean;
        "layout"?: LayoutConfig;
        "legend"?: LegendConfig;
        "messageOverrides"?: MessageOverrides;
        "minBufferSize"?: number;
        "movement"?: MovementConfig;
        "requestData"?: RequestDataFn;
        "scale"?: ScaleConfig;
        "size"?: MinimalSizeConfig;
        "trends"?: Trend[];
        /**
          * Chart API
         */
        "viewport"?: MinimalViewPortConfig;
        "widgetId": string;
    }
    interface ScScatterChartDynamicData {
    }
    interface ScScatterChartThreshold {
    }
    interface ScScatterChartThresholdColorationBand {
    }
    interface ScScatterChartThresholdColorationExactPoint {
    }
    interface ScScatterChartThresholdColorationMultipleDataStream {
    }
    interface ScScatterChartThresholdColorationMultipleThresholds {
    }
    interface ScScatterChartThresholdNoColoration {
    }
    interface ScScatterChartTooltipWithMultipleDataStreamsAndTrends {
    }
    interface ScScatterChartTrendLineColorConfiguration {
    }
    interface ScScatterChartTrendLineWithLegend {
    }
    interface ScSingleBar {
    }
    interface ScSingleColoredBar {
    }
    interface ScSizeProvider {
        "renderFunc": (rect: RectScrollFixed) => void;
        /**
          * Size overrides. these will take precident over any auto-calculated sizing
         */
        "size"?: Size;
    }
    interface ScSizeProviderStandard {
    }
    interface ScStatusCell {
        "alarmPoint"?: DataPoint;
        "alarmStream"?: DataStream;
        "breachedThreshold"?: Threshold;
        "icon"?: StatusIcon;
        "isEditing"?: boolean;
        "isEnabled"?: boolean;
        "labelsConfig"?: Required<LabelsConfig>;
        "messageOverrides"?: MessageOverrides;
        "onChangeLabel": ({ streamId, name }: { streamId: string; name: string }) => void;
        "propertyPoint"?: DataPoint;
        "propertyStream"?: DataStream;
        "valueColor"?: string;
    }
    interface ScStatusGrid {
        "annotations"?: Annotations;
        "dataStreams": DataStream[];
        "isEditing"?: boolean;
        /**
          * Status Grid Specific configuration
         */
        "labelsConfig"?: LabelsConfig;
        "liveModeOnlyMessage"?: string;
        "messageOverrides"?: MessageOverrides;
        "viewport"?: MinimalViewPortConfig;
        "widgetId": string;
    }
    interface ScStatusGridStandard {
    }
    interface ScStatusTimeline {
        "alarms"?: AlarmsConfig;
        "annotations"?: Annotations;
        "axis"?: Axis.Options;
        /**
          * Memory Management
         */
        "bufferFactor"?: number;
        "dataStreams": DataStream[];
        "gestures"?: boolean;
        /**
          * Status
         */
        "isEditing"?: boolean;
        "layout"?: LayoutConfig;
        "messageOverrides"?: MessageOverrides;
        "minBufferSize"?: number;
        "movement"?: MovementConfig;
        "requestData"?: RequestDataFn;
        "scale"?: ScaleConfig;
        "size"?: MinimalSizeConfig;
        /**
          * Chart API
         */
        "viewport"?: MinimalViewPortConfig;
        "widgetId": string;
    }
    interface ScStatusTimelineOverlay {
        "dataStreams": DataStream[];
        "date": Date;
        "isEditing": boolean;
        "onWidgetUpdated"?: (event: CustomEvent<WidgetConfigurationUpdate>) => void;
        "size": SizeConfig;
        "thresholds": Threshold[];
        "widgetId": string;
    }
    interface ScStatusTimelineOverlayRow {
        "detailedLabel"?: string;
        "icon"?: StatusIcon;
        "isEditing": boolean;
        "label": string;
        "onNameChange": (name: string) => void;
        "unit"?: string;
        "value"?: Primitive;
        "valueColor"?: string;
    }
    interface ScStraightLineSegment {
    }
    interface ScStraightLineSegmentColored {
    }
    interface ScTable {
        "annotations"?: Annotations;
        "dataStreams": DataStream[];
        "liveModeOnlyMessage"?: string;
        "messageOverrides"?: MessageOverrides;
        /**
          * Table column values
         */
        "tableColumns"?: TableColumn[];
        "trends"?: Trend[];
        "viewport"?: MinimalViewPortConfig;
        "widgetId": string;
    }
    interface ScTableBase {
        "columns": TableColumn[];
        "isEnabled": boolean;
        "liveModeOnlyMessage"?: string;
        "messageOverrides": MessageOverrides;
        "rows": Row[];
    }
    interface ScTableCell {
        "cell": Cell | undefined;
    }
    interface ScThresholdLegend {
        "thresholds": Threshold[];
    }
    interface ScThresholdLegendRow {
        "color": string;
        "label": string;
    }
    interface ScTooltip {
        /**
          * If we are drawing data from the data timestamp to timestamp + resolution we want the tooltip to align on the left side  Otherwise we are drawing the data from timestamp - resolution to timestamp then we want the tooltip to align on the right side
         */
        "dataAlignment": DATA_ALIGNMENT;
        "dataContainer": HTMLElement;
        "dataStreams": DataStream[];
        "maxDurationFromDate"?: number;
        "showBlankTooltipRows"?: boolean;
        "showDataStreamColor"?: boolean;
        "size": SizeConfig;
        "sortPoints"?: boolean;
        "supportString": boolean;
        "thresholds": Threshold[];
        /**
          * CSS Top property for the tooltip container
         */
        "top"?: number;
        "trendResults"?: TrendResult[];
        "viewport": ViewPort;
        "visualizesAlarms": boolean;
    }
    interface ScTooltipRow {
        "color": string;
        "icon"?: StatusIcon;
        "label": string;
        "point": DataPoint | undefined;
        "pointType": POINT_TYPE;
        "resolution": number | undefined;
        "showDataStreamColor": boolean;
        "valueColor"?: string;
    }
    interface ScTooltipRows {
        /**
          * If we are drawing data from the data timestamp to timestamp + resolution we want the tooltip to align on the left side  Otherwise we are drawing the data from timestamp - resolution to timestamp then we want the tooltip to align on the right side
         */
        "dataAlignment": DATA_ALIGNMENT;
        "dataStreams": DataStream[];
        "maxDurationFromDate"?: number;
        "selectedDate": Date;
        "showBlankTooltipRows": boolean;
        "showDataStreamColor"?: boolean;
        "size": SizeConfig;
        "sortPoints"?: boolean;
        "supportString": boolean;
        "thresholds": Threshold[];
        /**
          * CSS Top property for the tooltip container
         */
        "top"?: number;
        "trendResults"?: TrendResult[];
        "viewport": ViewPort;
        "visualizesAlarms": boolean;
    }
    interface ScWebglAxis {
        "size": SizeConfig;
    }
    interface ScWebglBarChartDynamicBuffer {
    }
    interface ScWebglBarChartDynamicData {
    }
    interface ScWebglBarChartDynamicDataStreams {
    }
    interface ScWebglBarChartFastViewport {
    }
    interface ScWebglBarChartMargin {
    }
    interface ScWebglBarChartNegative {
    }
    interface ScWebglBarChartPositiveNegative {
    }
    interface ScWebglBarChartStandard {
    }
    interface ScWebglBarChartStartFromZero {
    }
    interface ScWebglBarChartThresholdColoration {
    }
    interface ScWebglBarChartThresholdColorationBand {
    }
    interface ScWebglBarChartThresholdColorationExactPoint {
    }
    interface ScWebglBarChartThresholdColorationMultipleDataStream {
    }
    interface ScWebglBarChartThresholdColorationMultipleThresholds {
    }
    interface ScWebglBarChartThresholdNoColoration {
    }
    interface ScWebglBaseChart {
        "alarms"?: AlarmsConfig;
        "annotations"?: Annotations;
        "axis"?: Axis.Options;
        "bufferFactor": number;
        "configId": string;
        "createChartScene": ChartSceneCreator;
        "dataStreams": DataStream[];
        "displaysError"?: boolean;
        /**
          * if false, base chart will not display an empty state message when there is no data present.
         */
        "displaysNoDataPresentMsg"?: boolean;
        "gestures": boolean;
        "isEditing"?: boolean;
        "legend"?: LegendConfig;
        "messageOverrides"?: MessageOverrides;
        "minBufferSize": number;
        /**
          * On view port date range change, this component emits a `dateRangeChange` event. This allows other data visualization components to sync to the same date range.
         */
        "onDateRangeChange"?: (event: CustomEvent<[Date, Date, string | undefined]>) => void;
        /**
          * Optionally hooks to integrate custom logic into the base chart
         */
        "onUpdateLifeCycle"?: (viewport: ViewPortConfig) => void;
        "onWidgetUpdated"?: (event: CustomEvent<WidgetConfigurationUpdate>) => void;
        "renderLegend"?: (props: Legend.Props) => HTMLElement;
        "renderTooltip"?: (props: Tooltip.Props) => HTMLElement;
        /**
          * Optionally provided callback to initiate a request for data. Used to ensure gestures emit events for request data.
         */
        "requestData"?: RequestDataFn;
        "shouldRerenderOnViewportChange"?: ({ oldViewport, newViewport }) => boolean;
        "size": SizePositionConfig;
        "supportString"?: boolean;
        "trends"?: Trend[];
        "updateChartScene": ChartSceneUpdater;
        "viewport": MinimalViewPortConfig;
        "visualizesAlarms"?: boolean;
        "yRangeStartFromZero"?: boolean;
    }
    interface ScWebglChartAnnotationEditable {
    }
    interface ScWebglChartAnnotations {
    }
    interface ScWebglChartAnnotationsAlwaysInViewport {
    }
    interface ScWebglChartAxis {
    }
    interface ScWebglChartDynamicCharts {
    }
    interface ScWebglChartLargeViewport {
    }
    interface ScWebglChartMulti {
    }
    interface ScWebglChartNoAnnotations {
    }
    interface ScWebglChartStandard {
    }
    interface ScWebglChartStandardWithLegend {
    }
    interface ScWebglChartStandardWithLegendOnRight {
    }
    interface ScWebglChartThresholdColorationBand {
    }
    interface ScWebglChartThresholdColorationExactPoint {
    }
    interface ScWebglChartThresholdColorationMultipleDataStream {
    }
    interface ScWebglChartThresholdColorationMultipleThresholds {
    }
    interface ScWebglChartThresholdColorationSplitHalf {
    }
    interface ScWebglChartTooltipWithMultipleDataStreams {
    }
    interface ScWebglContext {
    }
    interface ScWebglLineChartDynamicBuffer {
    }
    interface ScWebglLineChartDynamicData {
    }
    interface ScWebglLineChartDynamicDataStreams {
    }
    interface ScWidgetGrid {
        "annotations"?: Annotations;
        "collapseVertically"?: boolean;
        "dataStreams": DataStream[];
        "isEditing"?: boolean;
        /**
          * Chart API
         */
        "labelsConfig"?: LabelsConfig;
        "liveModeOnlyMessage"?: string;
        "messageOverrides"?: MessageOverrides;
        "onWidgetUpdated"?: (event: CustomEvent<WidgetConfigurationUpdate>) => void;
        "renderCell"?: RenderCell;
        "viewport"?: MinimalViewPortConfig;
        "widgetId": string;
    }
    interface SingleColoredStatus {
    }
    interface SingleStatus {
    }
    interface StatusTimelineDynamicBuffer {
    }
    interface StatusTimelineDynamicData {
    }
    interface StatusTimelineDynamicDataStreams {
    }
    interface StatusTimelineFastViewport {
    }
    interface StatusTimelineMargin {
    }
    interface StatusTimelineMultipleDataStreams {
    }
    interface StatusTimelineRawData {
    }
    interface StatusTimelineStandard {
    }
    interface StatusTimelineThresholdColoration {
    }
    interface StatusTimelineThresholdColorationBand {
    }
    interface StatusTimelineThresholdColorationExactPoint {
    }
    interface StatusTimelineThresholdColorationMultipleDataStream {
    }
    interface StatusTimelineThresholdColorationMultipleThresholds {
    }
    interface StatusTimelineThresholdNoColoration {
    }
    interface WidgetTestRoute {
        "component"?: string;
        "dataStreamInfos"?: DataStreamInfo[];
    }
    interface IntrinsicElements {
        "line-chart-viewport-change": LineChartViewportChange;
        "multiple-statuses": MultipleStatuses;
        "sc-angled-line-segment": ScAngledLineSegment;
        "sc-annotations-draggable-multi": ScAnnotationsDraggableMulti;
        "sc-app": ScApp;
        "sc-bar-chart": ScBarChart;
        "sc-box": ScBox;
        "sc-chart-icon": ScChartIcon;
        "sc-chart-y-range": ScChartYRange;
        "sc-circle-point-shaders": ScCirclePointShaders;
        "sc-data-stream-name": ScDataStreamName;
        "sc-error-badge": ScErrorBadge;
        "sc-expandable-input": ScExpandableInput;
        "sc-expandable-input-standard": ScExpandableInputStandard;
        "sc-gesture-handler": ScGestureHandler;
        "sc-grid": ScGrid;
        "sc-grid-tooltip": ScGridTooltip;
        "sc-help-tooltip": ScHelpTooltip;
        "sc-kpi": ScKpi;
        "sc-kpi-base": ScKpiBase;
        "sc-kpi-standard": ScKpiStandard;
        "sc-legend": ScLegend;
        "sc-legend-row": ScLegendRow;
        "sc-line-chart": ScLineChart;
        "sc-line-chart-colored-point": ScLineChartColoredPoint;
        "sc-line-chart-stream-data": ScLineChartStreamData;
        "sc-loading-spinner": ScLoadingSpinner;
        "sc-multiple-bars": ScMultipleBars;
        "sc-multiple-lines": ScMultipleLines;
        "sc-multiple-lines-overlapping": ScMultipleLinesOverlapping;
        "sc-scatter-chart": ScScatterChart;
        "sc-scatter-chart-dynamic-data": ScScatterChartDynamicData;
        "sc-scatter-chart-threshold": ScScatterChartThreshold;
        "sc-scatter-chart-threshold-coloration-band": ScScatterChartThresholdColorationBand;
        "sc-scatter-chart-threshold-coloration-exact-point": ScScatterChartThresholdColorationExactPoint;
        "sc-scatter-chart-threshold-coloration-multiple-data-stream": ScScatterChartThresholdColorationMultipleDataStream;
        "sc-scatter-chart-threshold-coloration-multiple-thresholds": ScScatterChartThresholdColorationMultipleThresholds;
        "sc-scatter-chart-threshold-no-coloration": ScScatterChartThresholdNoColoration;
        "sc-scatter-chart-tooltip-with-multiple-data-streams-and-trends": ScScatterChartTooltipWithMultipleDataStreamsAndTrends;
        "sc-scatter-chart-trend-line-color-configuration": ScScatterChartTrendLineColorConfiguration;
        "sc-scatter-chart-trend-line-with-legend": ScScatterChartTrendLineWithLegend;
        "sc-single-bar": ScSingleBar;
        "sc-single-colored-bar": ScSingleColoredBar;
        "sc-size-provider": ScSizeProvider;
        "sc-size-provider-standard": ScSizeProviderStandard;
        "sc-status-cell": ScStatusCell;
        "sc-status-grid": ScStatusGrid;
        "sc-status-grid-standard": ScStatusGridStandard;
        "sc-status-timeline": ScStatusTimeline;
        "sc-status-timeline-overlay": ScStatusTimelineOverlay;
        "sc-status-timeline-overlay-row": ScStatusTimelineOverlayRow;
        "sc-straight-line-segment": ScStraightLineSegment;
        "sc-straight-line-segment-colored": ScStraightLineSegmentColored;
        "sc-table": ScTable;
        "sc-table-base": ScTableBase;
        "sc-table-cell": ScTableCell;
        "sc-threshold-legend": ScThresholdLegend;
        "sc-threshold-legend-row": ScThresholdLegendRow;
        "sc-tooltip": ScTooltip;
        "sc-tooltip-row": ScTooltipRow;
        "sc-tooltip-rows": ScTooltipRows;
        "sc-webgl-axis": ScWebglAxis;
        "sc-webgl-bar-chart-dynamic-buffer": ScWebglBarChartDynamicBuffer;
        "sc-webgl-bar-chart-dynamic-data": ScWebglBarChartDynamicData;
        "sc-webgl-bar-chart-dynamic-data-streams": ScWebglBarChartDynamicDataStreams;
        "sc-webgl-bar-chart-fast-viewport": ScWebglBarChartFastViewport;
        "sc-webgl-bar-chart-margin": ScWebglBarChartMargin;
        "sc-webgl-bar-chart-negative": ScWebglBarChartNegative;
        "sc-webgl-bar-chart-positive-negative": ScWebglBarChartPositiveNegative;
        "sc-webgl-bar-chart-standard": ScWebglBarChartStandard;
        "sc-webgl-bar-chart-start-from-zero": ScWebglBarChartStartFromZero;
        "sc-webgl-bar-chart-threshold-coloration": ScWebglBarChartThresholdColoration;
        "sc-webgl-bar-chart-threshold-coloration-band": ScWebglBarChartThresholdColorationBand;
        "sc-webgl-bar-chart-threshold-coloration-exact-point": ScWebglBarChartThresholdColorationExactPoint;
        "sc-webgl-bar-chart-threshold-coloration-multiple-data-stream": ScWebglBarChartThresholdColorationMultipleDataStream;
        "sc-webgl-bar-chart-threshold-coloration-multiple-thresholds": ScWebglBarChartThresholdColorationMultipleThresholds;
        "sc-webgl-bar-chart-threshold-no-coloration": ScWebglBarChartThresholdNoColoration;
        "sc-webgl-base-chart": ScWebglBaseChart;
        "sc-webgl-chart-annotation-editable": ScWebglChartAnnotationEditable;
        "sc-webgl-chart-annotations": ScWebglChartAnnotations;
        "sc-webgl-chart-annotations-always-in-viewport": ScWebglChartAnnotationsAlwaysInViewport;
        "sc-webgl-chart-axis": ScWebglChartAxis;
        "sc-webgl-chart-dynamic-charts": ScWebglChartDynamicCharts;
        "sc-webgl-chart-large-viewport": ScWebglChartLargeViewport;
        "sc-webgl-chart-multi": ScWebglChartMulti;
        "sc-webgl-chart-no-annotations": ScWebglChartNoAnnotations;
        "sc-webgl-chart-standard": ScWebglChartStandard;
        "sc-webgl-chart-standard-with-legend": ScWebglChartStandardWithLegend;
        "sc-webgl-chart-standard-with-legend-on-right": ScWebglChartStandardWithLegendOnRight;
        "sc-webgl-chart-threshold-coloration-band": ScWebglChartThresholdColorationBand;
        "sc-webgl-chart-threshold-coloration-exact-point": ScWebglChartThresholdColorationExactPoint;
        "sc-webgl-chart-threshold-coloration-multiple-data-stream": ScWebglChartThresholdColorationMultipleDataStream;
        "sc-webgl-chart-threshold-coloration-multiple-thresholds": ScWebglChartThresholdColorationMultipleThresholds;
        "sc-webgl-chart-threshold-coloration-split-half": ScWebglChartThresholdColorationSplitHalf;
        "sc-webgl-chart-tooltip-with-multiple-data-streams": ScWebglChartTooltipWithMultipleDataStreams;
        "sc-webgl-context": ScWebglContext;
        "sc-webgl-line-chart-dynamic-buffer": ScWebglLineChartDynamicBuffer;
        "sc-webgl-line-chart-dynamic-data": ScWebglLineChartDynamicData;
        "sc-webgl-line-chart-dynamic-data-streams": ScWebglLineChartDynamicDataStreams;
        "sc-widget-grid": ScWidgetGrid;
        "single-colored-status": SingleColoredStatus;
        "single-status": SingleStatus;
        "status-timeline-dynamic-buffer": StatusTimelineDynamicBuffer;
        "status-timeline-dynamic-data": StatusTimelineDynamicData;
        "status-timeline-dynamic-data-streams": StatusTimelineDynamicDataStreams;
        "status-timeline-fast-viewport": StatusTimelineFastViewport;
        "status-timeline-margin": StatusTimelineMargin;
        "status-timeline-multiple-data-streams": StatusTimelineMultipleDataStreams;
        "status-timeline-raw-data": StatusTimelineRawData;
        "status-timeline-standard": StatusTimelineStandard;
        "status-timeline-threshold-coloration": StatusTimelineThresholdColoration;
        "status-timeline-threshold-coloration-band": StatusTimelineThresholdColorationBand;
        "status-timeline-threshold-coloration-exact-point": StatusTimelineThresholdColorationExactPoint;
        "status-timeline-threshold-coloration-multiple-data-stream": StatusTimelineThresholdColorationMultipleDataStream;
        "status-timeline-threshold-coloration-multiple-thresholds": StatusTimelineThresholdColorationMultipleThresholds;
        "status-timeline-threshold-no-coloration": StatusTimelineThresholdNoColoration;
        "widget-test-route": WidgetTestRoute;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "line-chart-viewport-change": LocalJSX.LineChartViewportChange & JSXBase.HTMLAttributes<HTMLLineChartViewportChangeElement>;
            "multiple-statuses": LocalJSX.MultipleStatuses & JSXBase.HTMLAttributes<HTMLMultipleStatusesElement>;
            "sc-angled-line-segment": LocalJSX.ScAngledLineSegment & JSXBase.HTMLAttributes<HTMLScAngledLineSegmentElement>;
            "sc-annotations-draggable-multi": LocalJSX.ScAnnotationsDraggableMulti & JSXBase.HTMLAttributes<HTMLScAnnotationsDraggableMultiElement>;
            "sc-app": LocalJSX.ScApp & JSXBase.HTMLAttributes<HTMLScAppElement>;
            "sc-bar-chart": LocalJSX.ScBarChart & JSXBase.HTMLAttributes<HTMLScBarChartElement>;
            "sc-box": LocalJSX.ScBox & JSXBase.HTMLAttributes<HTMLScBoxElement>;
            "sc-chart-icon": LocalJSX.ScChartIcon & JSXBase.HTMLAttributes<HTMLScChartIconElement>;
            "sc-chart-y-range": LocalJSX.ScChartYRange & JSXBase.HTMLAttributes<HTMLScChartYRangeElement>;
            "sc-circle-point-shaders": LocalJSX.ScCirclePointShaders & JSXBase.HTMLAttributes<HTMLScCirclePointShadersElement>;
            "sc-data-stream-name": LocalJSX.ScDataStreamName & JSXBase.HTMLAttributes<HTMLScDataStreamNameElement>;
            "sc-error-badge": LocalJSX.ScErrorBadge & JSXBase.HTMLAttributes<HTMLScErrorBadgeElement>;
            "sc-expandable-input": LocalJSX.ScExpandableInput & JSXBase.HTMLAttributes<HTMLScExpandableInputElement>;
            "sc-expandable-input-standard": LocalJSX.ScExpandableInputStandard & JSXBase.HTMLAttributes<HTMLScExpandableInputStandardElement>;
            "sc-gesture-handler": LocalJSX.ScGestureHandler & JSXBase.HTMLAttributes<HTMLScGestureHandlerElement>;
            "sc-grid": LocalJSX.ScGrid & JSXBase.HTMLAttributes<HTMLScGridElement>;
            "sc-grid-tooltip": LocalJSX.ScGridTooltip & JSXBase.HTMLAttributes<HTMLScGridTooltipElement>;
            "sc-help-tooltip": LocalJSX.ScHelpTooltip & JSXBase.HTMLAttributes<HTMLScHelpTooltipElement>;
            "sc-kpi": LocalJSX.ScKpi & JSXBase.HTMLAttributes<HTMLScKpiElement>;
            "sc-kpi-base": LocalJSX.ScKpiBase & JSXBase.HTMLAttributes<HTMLScKpiBaseElement>;
            "sc-kpi-standard": LocalJSX.ScKpiStandard & JSXBase.HTMLAttributes<HTMLScKpiStandardElement>;
            "sc-legend": LocalJSX.ScLegend & JSXBase.HTMLAttributes<HTMLScLegendElement>;
            "sc-legend-row": LocalJSX.ScLegendRow & JSXBase.HTMLAttributes<HTMLScLegendRowElement>;
            "sc-line-chart": LocalJSX.ScLineChart & JSXBase.HTMLAttributes<HTMLScLineChartElement>;
            "sc-line-chart-colored-point": LocalJSX.ScLineChartColoredPoint & JSXBase.HTMLAttributes<HTMLScLineChartColoredPointElement>;
            "sc-line-chart-stream-data": LocalJSX.ScLineChartStreamData & JSXBase.HTMLAttributes<HTMLScLineChartStreamDataElement>;
            "sc-loading-spinner": LocalJSX.ScLoadingSpinner & JSXBase.HTMLAttributes<HTMLScLoadingSpinnerElement>;
            "sc-multiple-bars": LocalJSX.ScMultipleBars & JSXBase.HTMLAttributes<HTMLScMultipleBarsElement>;
            "sc-multiple-lines": LocalJSX.ScMultipleLines & JSXBase.HTMLAttributes<HTMLScMultipleLinesElement>;
            "sc-multiple-lines-overlapping": LocalJSX.ScMultipleLinesOverlapping & JSXBase.HTMLAttributes<HTMLScMultipleLinesOverlappingElement>;
            "sc-scatter-chart": LocalJSX.ScScatterChart & JSXBase.HTMLAttributes<HTMLScScatterChartElement>;
            "sc-scatter-chart-dynamic-data": LocalJSX.ScScatterChartDynamicData & JSXBase.HTMLAttributes<HTMLScScatterChartDynamicDataElement>;
            "sc-scatter-chart-threshold": LocalJSX.ScScatterChartThreshold & JSXBase.HTMLAttributes<HTMLScScatterChartThresholdElement>;
            "sc-scatter-chart-threshold-coloration-band": LocalJSX.ScScatterChartThresholdColorationBand & JSXBase.HTMLAttributes<HTMLScScatterChartThresholdColorationBandElement>;
            "sc-scatter-chart-threshold-coloration-exact-point": LocalJSX.ScScatterChartThresholdColorationExactPoint & JSXBase.HTMLAttributes<HTMLScScatterChartThresholdColorationExactPointElement>;
            "sc-scatter-chart-threshold-coloration-multiple-data-stream": LocalJSX.ScScatterChartThresholdColorationMultipleDataStream & JSXBase.HTMLAttributes<HTMLScScatterChartThresholdColorationMultipleDataStreamElement>;
            "sc-scatter-chart-threshold-coloration-multiple-thresholds": LocalJSX.ScScatterChartThresholdColorationMultipleThresholds & JSXBase.HTMLAttributes<HTMLScScatterChartThresholdColorationMultipleThresholdsElement>;
            "sc-scatter-chart-threshold-no-coloration": LocalJSX.ScScatterChartThresholdNoColoration & JSXBase.HTMLAttributes<HTMLScScatterChartThresholdNoColorationElement>;
            "sc-scatter-chart-tooltip-with-multiple-data-streams-and-trends": LocalJSX.ScScatterChartTooltipWithMultipleDataStreamsAndTrends & JSXBase.HTMLAttributes<HTMLScScatterChartTooltipWithMultipleDataStreamsAndTrendsElement>;
            "sc-scatter-chart-trend-line-color-configuration": LocalJSX.ScScatterChartTrendLineColorConfiguration & JSXBase.HTMLAttributes<HTMLScScatterChartTrendLineColorConfigurationElement>;
            "sc-scatter-chart-trend-line-with-legend": LocalJSX.ScScatterChartTrendLineWithLegend & JSXBase.HTMLAttributes<HTMLScScatterChartTrendLineWithLegendElement>;
            "sc-single-bar": LocalJSX.ScSingleBar & JSXBase.HTMLAttributes<HTMLScSingleBarElement>;
            "sc-single-colored-bar": LocalJSX.ScSingleColoredBar & JSXBase.HTMLAttributes<HTMLScSingleColoredBarElement>;
            "sc-size-provider": LocalJSX.ScSizeProvider & JSXBase.HTMLAttributes<HTMLScSizeProviderElement>;
            "sc-size-provider-standard": LocalJSX.ScSizeProviderStandard & JSXBase.HTMLAttributes<HTMLScSizeProviderStandardElement>;
            "sc-status-cell": LocalJSX.ScStatusCell & JSXBase.HTMLAttributes<HTMLScStatusCellElement>;
            "sc-status-grid": LocalJSX.ScStatusGrid & JSXBase.HTMLAttributes<HTMLScStatusGridElement>;
            "sc-status-grid-standard": LocalJSX.ScStatusGridStandard & JSXBase.HTMLAttributes<HTMLScStatusGridStandardElement>;
            "sc-status-timeline": LocalJSX.ScStatusTimeline & JSXBase.HTMLAttributes<HTMLScStatusTimelineElement>;
            "sc-status-timeline-overlay": LocalJSX.ScStatusTimelineOverlay & JSXBase.HTMLAttributes<HTMLScStatusTimelineOverlayElement>;
            "sc-status-timeline-overlay-row": LocalJSX.ScStatusTimelineOverlayRow & JSXBase.HTMLAttributes<HTMLScStatusTimelineOverlayRowElement>;
            "sc-straight-line-segment": LocalJSX.ScStraightLineSegment & JSXBase.HTMLAttributes<HTMLScStraightLineSegmentElement>;
            "sc-straight-line-segment-colored": LocalJSX.ScStraightLineSegmentColored & JSXBase.HTMLAttributes<HTMLScStraightLineSegmentColoredElement>;
            "sc-table": LocalJSX.ScTable & JSXBase.HTMLAttributes<HTMLScTableElement>;
            "sc-table-base": LocalJSX.ScTableBase & JSXBase.HTMLAttributes<HTMLScTableBaseElement>;
            "sc-table-cell": LocalJSX.ScTableCell & JSXBase.HTMLAttributes<HTMLScTableCellElement>;
            "sc-threshold-legend": LocalJSX.ScThresholdLegend & JSXBase.HTMLAttributes<HTMLScThresholdLegendElement>;
            "sc-threshold-legend-row": LocalJSX.ScThresholdLegendRow & JSXBase.HTMLAttributes<HTMLScThresholdLegendRowElement>;
            "sc-tooltip": LocalJSX.ScTooltip & JSXBase.HTMLAttributes<HTMLScTooltipElement>;
            "sc-tooltip-row": LocalJSX.ScTooltipRow & JSXBase.HTMLAttributes<HTMLScTooltipRowElement>;
            "sc-tooltip-rows": LocalJSX.ScTooltipRows & JSXBase.HTMLAttributes<HTMLScTooltipRowsElement>;
            "sc-webgl-axis": LocalJSX.ScWebglAxis & JSXBase.HTMLAttributes<HTMLScWebglAxisElement>;
            "sc-webgl-bar-chart-dynamic-buffer": LocalJSX.ScWebglBarChartDynamicBuffer & JSXBase.HTMLAttributes<HTMLScWebglBarChartDynamicBufferElement>;
            "sc-webgl-bar-chart-dynamic-data": LocalJSX.ScWebglBarChartDynamicData & JSXBase.HTMLAttributes<HTMLScWebglBarChartDynamicDataElement>;
            "sc-webgl-bar-chart-dynamic-data-streams": LocalJSX.ScWebglBarChartDynamicDataStreams & JSXBase.HTMLAttributes<HTMLScWebglBarChartDynamicDataStreamsElement>;
            "sc-webgl-bar-chart-fast-viewport": LocalJSX.ScWebglBarChartFastViewport & JSXBase.HTMLAttributes<HTMLScWebglBarChartFastViewportElement>;
            "sc-webgl-bar-chart-margin": LocalJSX.ScWebglBarChartMargin & JSXBase.HTMLAttributes<HTMLScWebglBarChartMarginElement>;
            "sc-webgl-bar-chart-negative": LocalJSX.ScWebglBarChartNegative & JSXBase.HTMLAttributes<HTMLScWebglBarChartNegativeElement>;
            "sc-webgl-bar-chart-positive-negative": LocalJSX.ScWebglBarChartPositiveNegative & JSXBase.HTMLAttributes<HTMLScWebglBarChartPositiveNegativeElement>;
            "sc-webgl-bar-chart-standard": LocalJSX.ScWebglBarChartStandard & JSXBase.HTMLAttributes<HTMLScWebglBarChartStandardElement>;
            "sc-webgl-bar-chart-start-from-zero": LocalJSX.ScWebglBarChartStartFromZero & JSXBase.HTMLAttributes<HTMLScWebglBarChartStartFromZeroElement>;
            "sc-webgl-bar-chart-threshold-coloration": LocalJSX.ScWebglBarChartThresholdColoration & JSXBase.HTMLAttributes<HTMLScWebglBarChartThresholdColorationElement>;
            "sc-webgl-bar-chart-threshold-coloration-band": LocalJSX.ScWebglBarChartThresholdColorationBand & JSXBase.HTMLAttributes<HTMLScWebglBarChartThresholdColorationBandElement>;
            "sc-webgl-bar-chart-threshold-coloration-exact-point": LocalJSX.ScWebglBarChartThresholdColorationExactPoint & JSXBase.HTMLAttributes<HTMLScWebglBarChartThresholdColorationExactPointElement>;
            "sc-webgl-bar-chart-threshold-coloration-multiple-data-stream": LocalJSX.ScWebglBarChartThresholdColorationMultipleDataStream & JSXBase.HTMLAttributes<HTMLScWebglBarChartThresholdColorationMultipleDataStreamElement>;
            "sc-webgl-bar-chart-threshold-coloration-multiple-thresholds": LocalJSX.ScWebglBarChartThresholdColorationMultipleThresholds & JSXBase.HTMLAttributes<HTMLScWebglBarChartThresholdColorationMultipleThresholdsElement>;
            "sc-webgl-bar-chart-threshold-no-coloration": LocalJSX.ScWebglBarChartThresholdNoColoration & JSXBase.HTMLAttributes<HTMLScWebglBarChartThresholdNoColorationElement>;
            "sc-webgl-base-chart": LocalJSX.ScWebglBaseChart & JSXBase.HTMLAttributes<HTMLScWebglBaseChartElement>;
            "sc-webgl-chart-annotation-editable": LocalJSX.ScWebglChartAnnotationEditable & JSXBase.HTMLAttributes<HTMLScWebglChartAnnotationEditableElement>;
            "sc-webgl-chart-annotations": LocalJSX.ScWebglChartAnnotations & JSXBase.HTMLAttributes<HTMLScWebglChartAnnotationsElement>;
            "sc-webgl-chart-annotations-always-in-viewport": LocalJSX.ScWebglChartAnnotationsAlwaysInViewport & JSXBase.HTMLAttributes<HTMLScWebglChartAnnotationsAlwaysInViewportElement>;
            "sc-webgl-chart-axis": LocalJSX.ScWebglChartAxis & JSXBase.HTMLAttributes<HTMLScWebglChartAxisElement>;
            "sc-webgl-chart-dynamic-charts": LocalJSX.ScWebglChartDynamicCharts & JSXBase.HTMLAttributes<HTMLScWebglChartDynamicChartsElement>;
            "sc-webgl-chart-large-viewport": LocalJSX.ScWebglChartLargeViewport & JSXBase.HTMLAttributes<HTMLScWebglChartLargeViewportElement>;
            "sc-webgl-chart-multi": LocalJSX.ScWebglChartMulti & JSXBase.HTMLAttributes<HTMLScWebglChartMultiElement>;
            "sc-webgl-chart-no-annotations": LocalJSX.ScWebglChartNoAnnotations & JSXBase.HTMLAttributes<HTMLScWebglChartNoAnnotationsElement>;
            "sc-webgl-chart-standard": LocalJSX.ScWebglChartStandard & JSXBase.HTMLAttributes<HTMLScWebglChartStandardElement>;
            "sc-webgl-chart-standard-with-legend": LocalJSX.ScWebglChartStandardWithLegend & JSXBase.HTMLAttributes<HTMLScWebglChartStandardWithLegendElement>;
            "sc-webgl-chart-standard-with-legend-on-right": LocalJSX.ScWebglChartStandardWithLegendOnRight & JSXBase.HTMLAttributes<HTMLScWebglChartStandardWithLegendOnRightElement>;
            "sc-webgl-chart-threshold-coloration-band": LocalJSX.ScWebglChartThresholdColorationBand & JSXBase.HTMLAttributes<HTMLScWebglChartThresholdColorationBandElement>;
            "sc-webgl-chart-threshold-coloration-exact-point": LocalJSX.ScWebglChartThresholdColorationExactPoint & JSXBase.HTMLAttributes<HTMLScWebglChartThresholdColorationExactPointElement>;
            "sc-webgl-chart-threshold-coloration-multiple-data-stream": LocalJSX.ScWebglChartThresholdColorationMultipleDataStream & JSXBase.HTMLAttributes<HTMLScWebglChartThresholdColorationMultipleDataStreamElement>;
            "sc-webgl-chart-threshold-coloration-multiple-thresholds": LocalJSX.ScWebglChartThresholdColorationMultipleThresholds & JSXBase.HTMLAttributes<HTMLScWebglChartThresholdColorationMultipleThresholdsElement>;
            "sc-webgl-chart-threshold-coloration-split-half": LocalJSX.ScWebglChartThresholdColorationSplitHalf & JSXBase.HTMLAttributes<HTMLScWebglChartThresholdColorationSplitHalfElement>;
            "sc-webgl-chart-tooltip-with-multiple-data-streams": LocalJSX.ScWebglChartTooltipWithMultipleDataStreams & JSXBase.HTMLAttributes<HTMLScWebglChartTooltipWithMultipleDataStreamsElement>;
            "sc-webgl-context": LocalJSX.ScWebglContext & JSXBase.HTMLAttributes<HTMLScWebglContextElement>;
            "sc-webgl-line-chart-dynamic-buffer": LocalJSX.ScWebglLineChartDynamicBuffer & JSXBase.HTMLAttributes<HTMLScWebglLineChartDynamicBufferElement>;
            "sc-webgl-line-chart-dynamic-data": LocalJSX.ScWebglLineChartDynamicData & JSXBase.HTMLAttributes<HTMLScWebglLineChartDynamicDataElement>;
            "sc-webgl-line-chart-dynamic-data-streams": LocalJSX.ScWebglLineChartDynamicDataStreams & JSXBase.HTMLAttributes<HTMLScWebglLineChartDynamicDataStreamsElement>;
            "sc-widget-grid": LocalJSX.ScWidgetGrid & JSXBase.HTMLAttributes<HTMLScWidgetGridElement>;
            "single-colored-status": LocalJSX.SingleColoredStatus & JSXBase.HTMLAttributes<HTMLSingleColoredStatusElement>;
            "single-status": LocalJSX.SingleStatus & JSXBase.HTMLAttributes<HTMLSingleStatusElement>;
            "status-timeline-dynamic-buffer": LocalJSX.StatusTimelineDynamicBuffer & JSXBase.HTMLAttributes<HTMLStatusTimelineDynamicBufferElement>;
            "status-timeline-dynamic-data": LocalJSX.StatusTimelineDynamicData & JSXBase.HTMLAttributes<HTMLStatusTimelineDynamicDataElement>;
            "status-timeline-dynamic-data-streams": LocalJSX.StatusTimelineDynamicDataStreams & JSXBase.HTMLAttributes<HTMLStatusTimelineDynamicDataStreamsElement>;
            "status-timeline-fast-viewport": LocalJSX.StatusTimelineFastViewport & JSXBase.HTMLAttributes<HTMLStatusTimelineFastViewportElement>;
            "status-timeline-margin": LocalJSX.StatusTimelineMargin & JSXBase.HTMLAttributes<HTMLStatusTimelineMarginElement>;
            "status-timeline-multiple-data-streams": LocalJSX.StatusTimelineMultipleDataStreams & JSXBase.HTMLAttributes<HTMLStatusTimelineMultipleDataStreamsElement>;
            "status-timeline-raw-data": LocalJSX.StatusTimelineRawData & JSXBase.HTMLAttributes<HTMLStatusTimelineRawDataElement>;
            "status-timeline-standard": LocalJSX.StatusTimelineStandard & JSXBase.HTMLAttributes<HTMLStatusTimelineStandardElement>;
            "status-timeline-threshold-coloration": LocalJSX.StatusTimelineThresholdColoration & JSXBase.HTMLAttributes<HTMLStatusTimelineThresholdColorationElement>;
            "status-timeline-threshold-coloration-band": LocalJSX.StatusTimelineThresholdColorationBand & JSXBase.HTMLAttributes<HTMLStatusTimelineThresholdColorationBandElement>;
            "status-timeline-threshold-coloration-exact-point": LocalJSX.StatusTimelineThresholdColorationExactPoint & JSXBase.HTMLAttributes<HTMLStatusTimelineThresholdColorationExactPointElement>;
            "status-timeline-threshold-coloration-multiple-data-stream": LocalJSX.StatusTimelineThresholdColorationMultipleDataStream & JSXBase.HTMLAttributes<HTMLStatusTimelineThresholdColorationMultipleDataStreamElement>;
            "status-timeline-threshold-coloration-multiple-thresholds": LocalJSX.StatusTimelineThresholdColorationMultipleThresholds & JSXBase.HTMLAttributes<HTMLStatusTimelineThresholdColorationMultipleThresholdsElement>;
            "status-timeline-threshold-no-coloration": LocalJSX.StatusTimelineThresholdNoColoration & JSXBase.HTMLAttributes<HTMLStatusTimelineThresholdNoColorationElement>;
            "widget-test-route": LocalJSX.WidgetTestRoute & JSXBase.HTMLAttributes<HTMLWidgetTestRouteElement>;
        }
    }
}
