/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { POINT_TYPE } from "./components/charts/sc-webgl-base-chart/activePoints";
import { AlarmsConfig, DataPoint, DataStream, DataStreamInfo, MessageOverrides, MinimalSizeConfig, MinimalViewPortConfig, Primitive, RequestDataFn, SizeConfig, SizePositionConfig, TableColumn, ViewPort, ViewPortConfig } from "./utils/dataTypes";
import { Annotations, Axis, LayoutConfig, LegendConfig, MovementConfig, ScaleConfig, Threshold, Tooltip, WidgetConfigurationUpdate } from "./components/charts/common/types";
import { Trend, TrendResult } from "./components/charts/common/trends/types";
import { DATA_ALIGNMENT, StatusIcon } from "./components/charts/common/constants";
import { RectScrollFixed } from "./utils/types";
import { LabelsConfig } from "./components/common/types";
import { Cell, Row } from "./components/monitor-table/constructTableData";
import { RenderCell } from "./components/sc-widget-grid/types";
import { ChartSceneCreator, ChartSceneUpdater } from "./components/charts/sc-webgl-base-chart/types";
export namespace Components {
    interface LineChartViewportChange {
    }
    interface MonitorAngledLineSegment {
    }
    interface MonitorChartYRange {
        "component": string;
    }
    interface MonitorCirclePointShaders {
    }
    interface MonitorDataStreamName {
        "date"?: Date;
        "detailedLabel"?: string;
        "displayTooltip"?: boolean;
        "isEditing": boolean;
        "label": string;
        "onNameChange": (name: string) => void;
        "pointType"?: POINT_TYPE;
    }
    interface MonitorExpandableInput {
        "isDisabled"?: boolean;
        "onValueChange": (value: string) => void;
        "value": string;
    }
    interface MonitorExpandableInputStandard {
    }
    interface MonitorGrid {
    }
    interface MonitorGridTooltip {
        "alarmPoint"?: DataPoint<Primitive>;
        "breachedThreshold"?: Threshold;
        "isEnabled": boolean;
        "propertyPoint"?: DataPoint<Primitive>;
        "title": string;
    }
    interface MonitorHelpTooltip {
        "message": string;
    }
    interface MonitorKpi {
        "annotations": Annotations;
        "dataStreams": DataStream[];
        "isEditing": boolean;
        "liveModeOnlyMessage": string;
        "messageOverrides": MessageOverrides;
        "viewPort": MinimalViewPortConfig;
        "widgetId": string;
    }
    interface MonitorKpiBase {
        "alarmPoint"?: DataPoint<Primitive>;
        "alarmStream"?: DataStream;
        "breachedThreshold"?: Threshold;
        "isEditing": boolean;
        "isEnabled": boolean;
        "isLoading"?: boolean;
        "isRefreshing"?: boolean;
        "messageOverrides": MessageOverrides;
        "miniVersion": boolean;
        "onChangeLabel": ({ streamId, name }: { streamId: string; name: string }) => void;
        "propertyPoint"?: DataPoint<Primitive>;
        "propertyStream"?: DataStream;
        "trendStream": DataStream | undefined;
        "valueColor"?: string;
        "viewPort": MinimalViewPortConfig;
    }
    interface MonitorKpiStandard {
    }
    interface MonitorLegend {
        "config": LegendConfig;
        "dataStreams": DataStream[];
        "isEditing": boolean;
        "isLoading": boolean;
        "showDataStreamColor": boolean;
        "supportString": boolean;
        "thresholds": Threshold[];
        "trendResults": TrendResult[];
        "updateDataStreamName": ({ streamId, name }: { streamId: string; name: string }) => void;
        "viewPort": ViewPort;
        "visualizesAlarms": boolean;
    }
    interface MonitorLegendRow {
        "color": string;
        "detailedLabel"?: string;
        "icon"?: StatusIcon;
        "isEditing": boolean;
        "isLoading": boolean;
        "label": string;
        "point"?: DataPoint<Primitive>;
        "pointType"?: POINT_TYPE;
        "showDataStreamColor": boolean;
        "streamId": string;
        "unit"?: string;
        "updateDataStreamName": ({ streamId, name }: { streamId: string; name: string }) => void;
        "valueColor"?: string;
    }
    interface MonitorLineChart {
        "alarms"?: AlarmsConfig;
        "annotations": Annotations;
        "axis"?: Axis.Options;
        /**
          * Memory Management
         */
        "bufferFactor": number;
        "dataStreams": DataStream[];
        "gestures": boolean;
        /**
          * Status
         */
        "isEditing": boolean;
        "layout"?: LayoutConfig;
        "legend"?: LegendConfig;
        "messageOverrides"?: MessageOverrides;
        "minBufferSize": number;
        "movement"?: MovementConfig;
        "requestData"?: RequestDataFn;
        "scale"?: ScaleConfig;
        "size"?: MinimalSizeConfig;
        "trends": Trend[];
        /**
          * Chart API
         */
        "viewPort": MinimalViewPortConfig;
        "widgetId": string;
    }
    interface MonitorLineChartColoredPoint {
    }
    interface MonitorLineChartStreamData {
    }
    interface MonitorMultipleBars {
    }
    interface MonitorMultipleLines {
    }
    interface MonitorMultipleLinesOverlapping {
    }
    interface MonitorScatterChart {
        "alarms"?: AlarmsConfig;
        "annotations": Annotations;
        "axis"?: Axis.Options;
        /**
          * Memory Management
         */
        "bufferFactor": number;
        "dataStreams": DataStream[];
        "gestures": boolean;
        /**
          * Status
         */
        "isEditing": boolean;
        "layout"?: LayoutConfig;
        "legend"?: LegendConfig;
        "messageOverrides"?: MessageOverrides;
        "minBufferSize": number;
        "movement"?: MovementConfig;
        "requestData"?: RequestDataFn;
        "scale"?: ScaleConfig;
        "size"?: MinimalSizeConfig;
        "trends": Trend[];
        /**
          * Chart API
         */
        "viewPort": MinimalViewPortConfig;
        "widgetId": string;
    }
    interface MonitorScatterChartDynamicData {
    }
    interface MonitorScatterChartThreshold {
    }
    interface MonitorScatterChartThresholdColorationBand {
    }
    interface MonitorScatterChartThresholdColorationExactPoint {
    }
    interface MonitorScatterChartThresholdColorationMultipleDataStream {
    }
    interface MonitorScatterChartThresholdColorationMultipleThresholds {
    }
    interface MonitorScatterChartThresholdNoColoration {
    }
    interface MonitorScatterChartTooltipWithMultipleDataStreamsAndTrends {
    }
    interface MonitorScatterChartTrendLineColorConfiguration {
    }
    interface MonitorScatterChartTrendLineWithLegend {
    }
    interface MonitorSingleBar {
    }
    interface MonitorSingleColoredBar {
    }
    interface MonitorSizeProvider {
        "renderFunc": (rect: RectScrollFixed) => void;
        /**
          * Size overrides. these will take precident over any auto-calculated sizing
         */
        "size"?: Size;
    }
    interface MonitorSizeProviderStandard {
    }
    interface MonitorStatusCell {
        "alarmPoint"?: DataPoint;
        "alarmStream"?: DataStream;
        "breachedThreshold"?: Threshold;
        "icon"?: StatusIcon;
        "isEditing": boolean;
        "isEnabled": boolean;
        "labelsConfig": Required<LabelsConfig>;
        "messageOverrides": MessageOverrides;
        "onChangeLabel": ({ streamId, name }: { streamId: string; name: string }) => void;
        "propertyPoint"?: DataPoint;
        "propertyStream"?: DataStream;
        "valueColor"?: string;
    }
    interface MonitorStatusChart {
        "alarms"?: AlarmsConfig;
        "annotations"?: Annotations;
        "axis"?: Axis.Options;
        /**
          * Memory Management
         */
        "bufferFactor": number;
        "dataStreams": DataStream[];
        "gestures": boolean;
        /**
          * Status
         */
        "isEditing": boolean;
        "layout"?: LayoutConfig;
        "messageOverrides"?: MessageOverrides;
        "minBufferSize": number;
        "movement"?: MovementConfig;
        "requestData"?: RequestDataFn;
        "scale"?: ScaleConfig;
        "size"?: MinimalSizeConfig;
        /**
          * Chart API
         */
        "viewPort": MinimalViewPortConfig;
        "widgetId": string;
    }
    interface MonitorStatusGrid {
        "annotations": Annotations;
        "dataStreams": DataStream[];
        "isEditing": boolean;
        /**
          * Status Grid Specific configuration
         */
        "labelsConfig": LabelsConfig;
        "liveModeOnlyMessage": string;
        "messageOverrides": MessageOverrides;
        "viewPort": MinimalViewPortConfig;
        "widgetId": string;
    }
    interface MonitorStatusGridStandard {
    }
    interface MonitorStatusTimelineOverlay {
        "dataStreams": DataStream[];
        "date": Date;
        "isEditing": boolean;
        "size": SizeConfig;
        "thresholds": Threshold[];
        "widgetId": string;
    }
    interface MonitorStatusTimelineOverlayRow {
        "detailedLabel"?: string;
        "icon"?: StatusIcon;
        "isEditing": boolean;
        "label": string;
        "onNameChange": (name: string) => void;
        "unit"?: string;
        "value"?: Primitive;
        "valueColor"?: string;
    }
    interface MonitorStraightLineSegment {
    }
    interface MonitorStraightLineSegmentColored {
    }
    interface MonitorTable {
        "annotations": Annotations;
        "dataStreams": DataStream[];
        "liveModeOnlyMessage": string;
        "messageOverrides": MessageOverrides;
        /**
          * Table column values
         */
        "tableColumns": TableColumn[];
        "trends": Trend[];
        "viewPort": MinimalViewPortConfig;
        "widgetId": string;
    }
    interface MonitorTableBase {
        "columns": TableColumn[];
        "isEnabled": boolean;
        "liveModeOnlyMessage": string;
        "messageOverrides": MessageOverrides;
        "rows": Row[];
    }
    interface MonitorTableCell {
        "cell": Cell | undefined;
    }
    interface MonitorThresholdLegend {
        "thresholds": Threshold[];
    }
    interface MonitorThresholdLegendRow {
        "color": string;
        "label": string;
    }
    interface MonitorWebglBarChartDynamicBuffer {
    }
    interface MonitorWebglBarChartDynamicData {
    }
    interface MonitorWebglBarChartDynamicDataStreams {
    }
    interface MonitorWebglBarChartFastViewport {
    }
    interface MonitorWebglBarChartMargin {
    }
    interface MonitorWebglBarChartNegative {
    }
    interface MonitorWebglBarChartPositiveNegative {
    }
    interface MonitorWebglBarChartStandard {
    }
    interface MonitorWebglBarChartStartFromZero {
    }
    interface MonitorWebglBarChartThresholdColoration {
    }
    interface MonitorWebglBarChartThresholdColorationBand {
    }
    interface MonitorWebglBarChartThresholdColorationExactPoint {
    }
    interface MonitorWebglBarChartThresholdColorationMultipleDataStream {
    }
    interface MonitorWebglBarChartThresholdColorationMultipleThresholds {
    }
    interface MonitorWebglBarChartThresholdNoColoration {
    }
    interface MonitorWebglChartAnnotations {
    }
    interface MonitorWebglChartAnnotationsAlwaysInViewport {
    }
    interface MonitorWebglChartAxis {
    }
    interface MonitorWebglChartDynamicCharts {
    }
    interface MonitorWebglChartLargeViewport {
    }
    interface MonitorWebglChartMulti {
    }
    interface MonitorWebglChartNoAnnotations {
    }
    interface MonitorWebglChartStandard {
    }
    interface MonitorWebglChartStandardWithLegend {
    }
    interface MonitorWebglChartStandardWithLegendOnRight {
    }
    interface MonitorWebglChartThresholdColorationBand {
    }
    interface MonitorWebglChartThresholdColorationExactPoint {
    }
    interface MonitorWebglChartThresholdColorationMultipleDataStream {
    }
    interface MonitorWebglChartThresholdColorationMultipleThresholds {
    }
    interface MonitorWebglChartThresholdColorationSplitHalf {
    }
    interface MonitorWebglChartTooltipWithMultipleDataStreams {
    }
    interface MonitorWebglContext {
    }
    interface MonitorWebglLineChartDynamicBuffer {
    }
    interface MonitorWebglLineChartDynamicData {
    }
    interface MonitorWebglLineChartDynamicDataStreams {
    }
    interface MonitorWidgetGrid {
        "annotations": Annotations;
        "collapseVertically": boolean;
        "dataStreams": DataStream[];
        "isEditing": boolean;
        /**
          * Chart API
         */
        "labelsConfig"?: LabelsConfig;
        "liveModeOnlyMessage": string;
        "messageOverrides": MessageOverrides;
        "renderCell": RenderCell;
        "viewPort": MinimalViewPortConfig;
        "widgetId": string;
    }
    interface MultipleStatuses {
    }
    interface ScApp {
    }
    interface ScBarChart {
        "alarms"?: AlarmsConfig;
        "annotations": Annotations;
        "axis"?: Axis.Options;
        /**
          * Memory Management
         */
        "bufferFactor": number;
        "dataStreams": DataStream[];
        "gestures": boolean;
        /**
          * Status
         */
        "isEditing": boolean;
        "layout"?: LayoutConfig;
        "legend"?: LegendConfig;
        "messageOverrides"?: MessageOverrides;
        "minBufferSize": number;
        "movement"?: MovementConfig;
        "requestData"?: RequestDataFn;
        "scale"?: ScaleConfig;
        "size"?: MinimalSizeConfig;
        "trends": Trend[];
        /**
          * Chart API
         */
        "viewPort": MinimalViewPortConfig;
        "widgetId": string;
    }
    interface ScBox {
        "size": MinimalSizeConfig;
        "someObject"?: Object;
    }
    interface ScChartIcon {
        "color"?: string;
        "name": StatusIcon;
        "size"?: number;
    }
    interface ScErrorBadge {
    }
    interface ScGestureHandler {
        "onDateRangeChange": ({ end, start }: { start: Date; end: Date }) => void;
        "size": SizeConfig;
        "viewPort": ViewPort;
    }
    interface ScLoadingSpinner {
        "dark"?: boolean;
        "size"?: number;
    }
    interface ScTooltip {
        /**
          * If we are drawing data from the data timestamp to timestamp + resolution we want the tooltip to align on the left side  Otherwise we are drawing the data from timestamp - resolution to timestamp then we want the tooltip to align on the right side
         */
        "dataAlignment": DATA_ALIGNMENT;
        "dataContainer": HTMLElement;
        "dataStreams": DataStream[];
        "maxDurationFromDate"?: number;
        "showBlankTooltipRows": boolean;
        "showDataStreamColor": boolean;
        "size": SizeConfig;
        "sortPoints": boolean;
        "supportString": boolean;
        "thresholds": Threshold[];
        /**
          * CSS Top property for the tooltip container
         */
        "top": number;
        "trendResults": TrendResult[];
        "viewPort": ViewPort;
        "visualizesAlarms": boolean;
    }
    interface ScTooltipRow {
        "color": string;
        "icon"?: StatusIcon;
        "label": string;
        "point": DataPoint | undefined;
        "pointType": POINT_TYPE;
        "resolution": number | undefined;
        "showDataStreamColor": boolean;
        "valueColor"?: string;
    }
    interface ScTooltipRows {
        /**
          * If we are drawing data from the data timestamp to timestamp + resolution we want the tooltip to align on the left side  Otherwise we are drawing the data from timestamp - resolution to timestamp then we want the tooltip to align on the right side
         */
        "dataAlignment": DATA_ALIGNMENT;
        "dataStreams": DataStream[];
        "maxDurationFromDate"?: number;
        "selectedDate": Date;
        "showBlankTooltipRows": boolean;
        "showDataStreamColor": boolean;
        "size": SizeConfig;
        "sortPoints"?: boolean;
        "supportString": boolean;
        "thresholds": Threshold[];
        /**
          * CSS Top property for the tooltip container
         */
        "top"?: number;
        "trendResults": TrendResult[];
        "viewPort": ViewPort;
        "visualizesAlarms": boolean;
    }
    interface ScWebglAxis {
        "size": SizeConfig;
    }
    interface ScWebglBaseChart {
        "alarms"?: AlarmsConfig;
        "annotations": Annotations;
        "axis"?: Axis.Options;
        "bufferFactor": number;
        "configId": string;
        "createChartScene": ChartSceneCreator;
        "dataStreams": DataStream[];
        "displaysError": boolean;
        /**
          * if false, base chart will not display an empty state message when there is no data present.
         */
        "displaysNoDataPresentMsg"?: boolean;
        "gestures": boolean;
        "isEditing": boolean;
        "legend": LegendConfig;
        "messageOverrides"?: MessageOverrides;
        "minBufferSize": number;
        /**
          * Optionally hooks to integrate custom logic into the base chart
         */
        "onUpdateLifeCycle"?: (viewPort: ViewPortConfig) => void;
        /**
          * Optionally provided callback to initiate a request for data. Used to ensure gestures emit events for request data.
         */
        "requestData"?: RequestDataFn;
        "size": SizePositionConfig;
        "supportString": boolean;
        "tooltip": (props: Tooltip.Props) => HTMLElement;
        "trends": Trend[];
        "updateChartScene": ChartSceneUpdater;
        "viewPort": MinimalViewPortConfig;
        "visualizesAlarms": boolean;
        "yRangeStartFromZero": boolean;
    }
    interface SingleColoredStatus {
    }
    interface SingleStatus {
    }
    interface StatusChartDynamicBuffer {
    }
    interface StatusChartDynamicData {
    }
    interface StatusChartDynamicDataStreams {
    }
    interface StatusChartFastViewport {
    }
    interface StatusChartMargin {
    }
    interface StatusChartMultipleDataStreams {
    }
    interface StatusChartRawData {
    }
    interface StatusChartStandard {
    }
    interface StatusChartThresholdColoration {
    }
    interface StatusChartThresholdColorationBand {
    }
    interface StatusChartThresholdColorationExactPoint {
    }
    interface StatusChartThresholdColorationMultipleDataStream {
    }
    interface StatusChartThresholdColorationMultipleThresholds {
    }
    interface StatusChartThresholdNoColoration {
    }
    interface WidgetTestRoute {
        "component": string;
        "dataStreamInfos": DataStreamInfo[];
    }
}
declare global {
    interface HTMLLineChartViewportChangeElement extends Components.LineChartViewportChange, HTMLStencilElement {
    }
    var HTMLLineChartViewportChangeElement: {
        prototype: HTMLLineChartViewportChangeElement;
        new (): HTMLLineChartViewportChangeElement;
    };
    interface HTMLMonitorAngledLineSegmentElement extends Components.MonitorAngledLineSegment, HTMLStencilElement {
    }
    var HTMLMonitorAngledLineSegmentElement: {
        prototype: HTMLMonitorAngledLineSegmentElement;
        new (): HTMLMonitorAngledLineSegmentElement;
    };
    interface HTMLMonitorChartYRangeElement extends Components.MonitorChartYRange, HTMLStencilElement {
    }
    var HTMLMonitorChartYRangeElement: {
        prototype: HTMLMonitorChartYRangeElement;
        new (): HTMLMonitorChartYRangeElement;
    };
    interface HTMLMonitorCirclePointShadersElement extends Components.MonitorCirclePointShaders, HTMLStencilElement {
    }
    var HTMLMonitorCirclePointShadersElement: {
        prototype: HTMLMonitorCirclePointShadersElement;
        new (): HTMLMonitorCirclePointShadersElement;
    };
    interface HTMLMonitorDataStreamNameElement extends Components.MonitorDataStreamName, HTMLStencilElement {
    }
    var HTMLMonitorDataStreamNameElement: {
        prototype: HTMLMonitorDataStreamNameElement;
        new (): HTMLMonitorDataStreamNameElement;
    };
    interface HTMLMonitorExpandableInputElement extends Components.MonitorExpandableInput, HTMLStencilElement {
    }
    var HTMLMonitorExpandableInputElement: {
        prototype: HTMLMonitorExpandableInputElement;
        new (): HTMLMonitorExpandableInputElement;
    };
    interface HTMLMonitorExpandableInputStandardElement extends Components.MonitorExpandableInputStandard, HTMLStencilElement {
    }
    var HTMLMonitorExpandableInputStandardElement: {
        prototype: HTMLMonitorExpandableInputStandardElement;
        new (): HTMLMonitorExpandableInputStandardElement;
    };
    interface HTMLMonitorGridElement extends Components.MonitorGrid, HTMLStencilElement {
    }
    var HTMLMonitorGridElement: {
        prototype: HTMLMonitorGridElement;
        new (): HTMLMonitorGridElement;
    };
    interface HTMLMonitorGridTooltipElement extends Components.MonitorGridTooltip, HTMLStencilElement {
    }
    var HTMLMonitorGridTooltipElement: {
        prototype: HTMLMonitorGridTooltipElement;
        new (): HTMLMonitorGridTooltipElement;
    };
    interface HTMLMonitorHelpTooltipElement extends Components.MonitorHelpTooltip, HTMLStencilElement {
    }
    var HTMLMonitorHelpTooltipElement: {
        prototype: HTMLMonitorHelpTooltipElement;
        new (): HTMLMonitorHelpTooltipElement;
    };
    interface HTMLMonitorKpiElement extends Components.MonitorKpi, HTMLStencilElement {
    }
    var HTMLMonitorKpiElement: {
        prototype: HTMLMonitorKpiElement;
        new (): HTMLMonitorKpiElement;
    };
    interface HTMLMonitorKpiBaseElement extends Components.MonitorKpiBase, HTMLStencilElement {
    }
    var HTMLMonitorKpiBaseElement: {
        prototype: HTMLMonitorKpiBaseElement;
        new (): HTMLMonitorKpiBaseElement;
    };
    interface HTMLMonitorKpiStandardElement extends Components.MonitorKpiStandard, HTMLStencilElement {
    }
    var HTMLMonitorKpiStandardElement: {
        prototype: HTMLMonitorKpiStandardElement;
        new (): HTMLMonitorKpiStandardElement;
    };
    interface HTMLMonitorLegendElement extends Components.MonitorLegend, HTMLStencilElement {
    }
    var HTMLMonitorLegendElement: {
        prototype: HTMLMonitorLegendElement;
        new (): HTMLMonitorLegendElement;
    };
    interface HTMLMonitorLegendRowElement extends Components.MonitorLegendRow, HTMLStencilElement {
    }
    var HTMLMonitorLegendRowElement: {
        prototype: HTMLMonitorLegendRowElement;
        new (): HTMLMonitorLegendRowElement;
    };
    interface HTMLMonitorLineChartElement extends Components.MonitorLineChart, HTMLStencilElement {
    }
    var HTMLMonitorLineChartElement: {
        prototype: HTMLMonitorLineChartElement;
        new (): HTMLMonitorLineChartElement;
    };
    interface HTMLMonitorLineChartColoredPointElement extends Components.MonitorLineChartColoredPoint, HTMLStencilElement {
    }
    var HTMLMonitorLineChartColoredPointElement: {
        prototype: HTMLMonitorLineChartColoredPointElement;
        new (): HTMLMonitorLineChartColoredPointElement;
    };
    interface HTMLMonitorLineChartStreamDataElement extends Components.MonitorLineChartStreamData, HTMLStencilElement {
    }
    var HTMLMonitorLineChartStreamDataElement: {
        prototype: HTMLMonitorLineChartStreamDataElement;
        new (): HTMLMonitorLineChartStreamDataElement;
    };
    interface HTMLMonitorMultipleBarsElement extends Components.MonitorMultipleBars, HTMLStencilElement {
    }
    var HTMLMonitorMultipleBarsElement: {
        prototype: HTMLMonitorMultipleBarsElement;
        new (): HTMLMonitorMultipleBarsElement;
    };
    interface HTMLMonitorMultipleLinesElement extends Components.MonitorMultipleLines, HTMLStencilElement {
    }
    var HTMLMonitorMultipleLinesElement: {
        prototype: HTMLMonitorMultipleLinesElement;
        new (): HTMLMonitorMultipleLinesElement;
    };
    interface HTMLMonitorMultipleLinesOverlappingElement extends Components.MonitorMultipleLinesOverlapping, HTMLStencilElement {
    }
    var HTMLMonitorMultipleLinesOverlappingElement: {
        prototype: HTMLMonitorMultipleLinesOverlappingElement;
        new (): HTMLMonitorMultipleLinesOverlappingElement;
    };
    interface HTMLMonitorScatterChartElement extends Components.MonitorScatterChart, HTMLStencilElement {
    }
    var HTMLMonitorScatterChartElement: {
        prototype: HTMLMonitorScatterChartElement;
        new (): HTMLMonitorScatterChartElement;
    };
    interface HTMLMonitorScatterChartDynamicDataElement extends Components.MonitorScatterChartDynamicData, HTMLStencilElement {
    }
    var HTMLMonitorScatterChartDynamicDataElement: {
        prototype: HTMLMonitorScatterChartDynamicDataElement;
        new (): HTMLMonitorScatterChartDynamicDataElement;
    };
    interface HTMLMonitorScatterChartThresholdElement extends Components.MonitorScatterChartThreshold, HTMLStencilElement {
    }
    var HTMLMonitorScatterChartThresholdElement: {
        prototype: HTMLMonitorScatterChartThresholdElement;
        new (): HTMLMonitorScatterChartThresholdElement;
    };
    interface HTMLMonitorScatterChartThresholdColorationBandElement extends Components.MonitorScatterChartThresholdColorationBand, HTMLStencilElement {
    }
    var HTMLMonitorScatterChartThresholdColorationBandElement: {
        prototype: HTMLMonitorScatterChartThresholdColorationBandElement;
        new (): HTMLMonitorScatterChartThresholdColorationBandElement;
    };
    interface HTMLMonitorScatterChartThresholdColorationExactPointElement extends Components.MonitorScatterChartThresholdColorationExactPoint, HTMLStencilElement {
    }
    var HTMLMonitorScatterChartThresholdColorationExactPointElement: {
        prototype: HTMLMonitorScatterChartThresholdColorationExactPointElement;
        new (): HTMLMonitorScatterChartThresholdColorationExactPointElement;
    };
    interface HTMLMonitorScatterChartThresholdColorationMultipleDataStreamElement extends Components.MonitorScatterChartThresholdColorationMultipleDataStream, HTMLStencilElement {
    }
    var HTMLMonitorScatterChartThresholdColorationMultipleDataStreamElement: {
        prototype: HTMLMonitorScatterChartThresholdColorationMultipleDataStreamElement;
        new (): HTMLMonitorScatterChartThresholdColorationMultipleDataStreamElement;
    };
    interface HTMLMonitorScatterChartThresholdColorationMultipleThresholdsElement extends Components.MonitorScatterChartThresholdColorationMultipleThresholds, HTMLStencilElement {
    }
    var HTMLMonitorScatterChartThresholdColorationMultipleThresholdsElement: {
        prototype: HTMLMonitorScatterChartThresholdColorationMultipleThresholdsElement;
        new (): HTMLMonitorScatterChartThresholdColorationMultipleThresholdsElement;
    };
    interface HTMLMonitorScatterChartThresholdNoColorationElement extends Components.MonitorScatterChartThresholdNoColoration, HTMLStencilElement {
    }
    var HTMLMonitorScatterChartThresholdNoColorationElement: {
        prototype: HTMLMonitorScatterChartThresholdNoColorationElement;
        new (): HTMLMonitorScatterChartThresholdNoColorationElement;
    };
    interface HTMLMonitorScatterChartTooltipWithMultipleDataStreamsAndTrendsElement extends Components.MonitorScatterChartTooltipWithMultipleDataStreamsAndTrends, HTMLStencilElement {
    }
    var HTMLMonitorScatterChartTooltipWithMultipleDataStreamsAndTrendsElement: {
        prototype: HTMLMonitorScatterChartTooltipWithMultipleDataStreamsAndTrendsElement;
        new (): HTMLMonitorScatterChartTooltipWithMultipleDataStreamsAndTrendsElement;
    };
    interface HTMLMonitorScatterChartTrendLineColorConfigurationElement extends Components.MonitorScatterChartTrendLineColorConfiguration, HTMLStencilElement {
    }
    var HTMLMonitorScatterChartTrendLineColorConfigurationElement: {
        prototype: HTMLMonitorScatterChartTrendLineColorConfigurationElement;
        new (): HTMLMonitorScatterChartTrendLineColorConfigurationElement;
    };
    interface HTMLMonitorScatterChartTrendLineWithLegendElement extends Components.MonitorScatterChartTrendLineWithLegend, HTMLStencilElement {
    }
    var HTMLMonitorScatterChartTrendLineWithLegendElement: {
        prototype: HTMLMonitorScatterChartTrendLineWithLegendElement;
        new (): HTMLMonitorScatterChartTrendLineWithLegendElement;
    };
    interface HTMLMonitorSingleBarElement extends Components.MonitorSingleBar, HTMLStencilElement {
    }
    var HTMLMonitorSingleBarElement: {
        prototype: HTMLMonitorSingleBarElement;
        new (): HTMLMonitorSingleBarElement;
    };
    interface HTMLMonitorSingleColoredBarElement extends Components.MonitorSingleColoredBar, HTMLStencilElement {
    }
    var HTMLMonitorSingleColoredBarElement: {
        prototype: HTMLMonitorSingleColoredBarElement;
        new (): HTMLMonitorSingleColoredBarElement;
    };
    interface HTMLMonitorSizeProviderElement extends Components.MonitorSizeProvider, HTMLStencilElement {
    }
    var HTMLMonitorSizeProviderElement: {
        prototype: HTMLMonitorSizeProviderElement;
        new (): HTMLMonitorSizeProviderElement;
    };
    interface HTMLMonitorSizeProviderStandardElement extends Components.MonitorSizeProviderStandard, HTMLStencilElement {
    }
    var HTMLMonitorSizeProviderStandardElement: {
        prototype: HTMLMonitorSizeProviderStandardElement;
        new (): HTMLMonitorSizeProviderStandardElement;
    };
    interface HTMLMonitorStatusCellElement extends Components.MonitorStatusCell, HTMLStencilElement {
    }
    var HTMLMonitorStatusCellElement: {
        prototype: HTMLMonitorStatusCellElement;
        new (): HTMLMonitorStatusCellElement;
    };
    interface HTMLMonitorStatusChartElement extends Components.MonitorStatusChart, HTMLStencilElement {
    }
    var HTMLMonitorStatusChartElement: {
        prototype: HTMLMonitorStatusChartElement;
        new (): HTMLMonitorStatusChartElement;
    };
    interface HTMLMonitorStatusGridElement extends Components.MonitorStatusGrid, HTMLStencilElement {
    }
    var HTMLMonitorStatusGridElement: {
        prototype: HTMLMonitorStatusGridElement;
        new (): HTMLMonitorStatusGridElement;
    };
    interface HTMLMonitorStatusGridStandardElement extends Components.MonitorStatusGridStandard, HTMLStencilElement {
    }
    var HTMLMonitorStatusGridStandardElement: {
        prototype: HTMLMonitorStatusGridStandardElement;
        new (): HTMLMonitorStatusGridStandardElement;
    };
    interface HTMLMonitorStatusTimelineOverlayElement extends Components.MonitorStatusTimelineOverlay, HTMLStencilElement {
    }
    var HTMLMonitorStatusTimelineOverlayElement: {
        prototype: HTMLMonitorStatusTimelineOverlayElement;
        new (): HTMLMonitorStatusTimelineOverlayElement;
    };
    interface HTMLMonitorStatusTimelineOverlayRowElement extends Components.MonitorStatusTimelineOverlayRow, HTMLStencilElement {
    }
    var HTMLMonitorStatusTimelineOverlayRowElement: {
        prototype: HTMLMonitorStatusTimelineOverlayRowElement;
        new (): HTMLMonitorStatusTimelineOverlayRowElement;
    };
    interface HTMLMonitorStraightLineSegmentElement extends Components.MonitorStraightLineSegment, HTMLStencilElement {
    }
    var HTMLMonitorStraightLineSegmentElement: {
        prototype: HTMLMonitorStraightLineSegmentElement;
        new (): HTMLMonitorStraightLineSegmentElement;
    };
    interface HTMLMonitorStraightLineSegmentColoredElement extends Components.MonitorStraightLineSegmentColored, HTMLStencilElement {
    }
    var HTMLMonitorStraightLineSegmentColoredElement: {
        prototype: HTMLMonitorStraightLineSegmentColoredElement;
        new (): HTMLMonitorStraightLineSegmentColoredElement;
    };
    interface HTMLMonitorTableElement extends Components.MonitorTable, HTMLStencilElement {
    }
    var HTMLMonitorTableElement: {
        prototype: HTMLMonitorTableElement;
        new (): HTMLMonitorTableElement;
    };
    interface HTMLMonitorTableBaseElement extends Components.MonitorTableBase, HTMLStencilElement {
    }
    var HTMLMonitorTableBaseElement: {
        prototype: HTMLMonitorTableBaseElement;
        new (): HTMLMonitorTableBaseElement;
    };
    interface HTMLMonitorTableCellElement extends Components.MonitorTableCell, HTMLStencilElement {
    }
    var HTMLMonitorTableCellElement: {
        prototype: HTMLMonitorTableCellElement;
        new (): HTMLMonitorTableCellElement;
    };
    interface HTMLMonitorThresholdLegendElement extends Components.MonitorThresholdLegend, HTMLStencilElement {
    }
    var HTMLMonitorThresholdLegendElement: {
        prototype: HTMLMonitorThresholdLegendElement;
        new (): HTMLMonitorThresholdLegendElement;
    };
    interface HTMLMonitorThresholdLegendRowElement extends Components.MonitorThresholdLegendRow, HTMLStencilElement {
    }
    var HTMLMonitorThresholdLegendRowElement: {
        prototype: HTMLMonitorThresholdLegendRowElement;
        new (): HTMLMonitorThresholdLegendRowElement;
    };
    interface HTMLMonitorWebglBarChartDynamicBufferElement extends Components.MonitorWebglBarChartDynamicBuffer, HTMLStencilElement {
    }
    var HTMLMonitorWebglBarChartDynamicBufferElement: {
        prototype: HTMLMonitorWebglBarChartDynamicBufferElement;
        new (): HTMLMonitorWebglBarChartDynamicBufferElement;
    };
    interface HTMLMonitorWebglBarChartDynamicDataElement extends Components.MonitorWebglBarChartDynamicData, HTMLStencilElement {
    }
    var HTMLMonitorWebglBarChartDynamicDataElement: {
        prototype: HTMLMonitorWebglBarChartDynamicDataElement;
        new (): HTMLMonitorWebglBarChartDynamicDataElement;
    };
    interface HTMLMonitorWebglBarChartDynamicDataStreamsElement extends Components.MonitorWebglBarChartDynamicDataStreams, HTMLStencilElement {
    }
    var HTMLMonitorWebglBarChartDynamicDataStreamsElement: {
        prototype: HTMLMonitorWebglBarChartDynamicDataStreamsElement;
        new (): HTMLMonitorWebglBarChartDynamicDataStreamsElement;
    };
    interface HTMLMonitorWebglBarChartFastViewportElement extends Components.MonitorWebglBarChartFastViewport, HTMLStencilElement {
    }
    var HTMLMonitorWebglBarChartFastViewportElement: {
        prototype: HTMLMonitorWebglBarChartFastViewportElement;
        new (): HTMLMonitorWebglBarChartFastViewportElement;
    };
    interface HTMLMonitorWebglBarChartMarginElement extends Components.MonitorWebglBarChartMargin, HTMLStencilElement {
    }
    var HTMLMonitorWebglBarChartMarginElement: {
        prototype: HTMLMonitorWebglBarChartMarginElement;
        new (): HTMLMonitorWebglBarChartMarginElement;
    };
    interface HTMLMonitorWebglBarChartNegativeElement extends Components.MonitorWebglBarChartNegative, HTMLStencilElement {
    }
    var HTMLMonitorWebglBarChartNegativeElement: {
        prototype: HTMLMonitorWebglBarChartNegativeElement;
        new (): HTMLMonitorWebglBarChartNegativeElement;
    };
    interface HTMLMonitorWebglBarChartPositiveNegativeElement extends Components.MonitorWebglBarChartPositiveNegative, HTMLStencilElement {
    }
    var HTMLMonitorWebglBarChartPositiveNegativeElement: {
        prototype: HTMLMonitorWebglBarChartPositiveNegativeElement;
        new (): HTMLMonitorWebglBarChartPositiveNegativeElement;
    };
    interface HTMLMonitorWebglBarChartStandardElement extends Components.MonitorWebglBarChartStandard, HTMLStencilElement {
    }
    var HTMLMonitorWebglBarChartStandardElement: {
        prototype: HTMLMonitorWebglBarChartStandardElement;
        new (): HTMLMonitorWebglBarChartStandardElement;
    };
    interface HTMLMonitorWebglBarChartStartFromZeroElement extends Components.MonitorWebglBarChartStartFromZero, HTMLStencilElement {
    }
    var HTMLMonitorWebglBarChartStartFromZeroElement: {
        prototype: HTMLMonitorWebglBarChartStartFromZeroElement;
        new (): HTMLMonitorWebglBarChartStartFromZeroElement;
    };
    interface HTMLMonitorWebglBarChartThresholdColorationElement extends Components.MonitorWebglBarChartThresholdColoration, HTMLStencilElement {
    }
    var HTMLMonitorWebglBarChartThresholdColorationElement: {
        prototype: HTMLMonitorWebglBarChartThresholdColorationElement;
        new (): HTMLMonitorWebglBarChartThresholdColorationElement;
    };
    interface HTMLMonitorWebglBarChartThresholdColorationBandElement extends Components.MonitorWebglBarChartThresholdColorationBand, HTMLStencilElement {
    }
    var HTMLMonitorWebglBarChartThresholdColorationBandElement: {
        prototype: HTMLMonitorWebglBarChartThresholdColorationBandElement;
        new (): HTMLMonitorWebglBarChartThresholdColorationBandElement;
    };
    interface HTMLMonitorWebglBarChartThresholdColorationExactPointElement extends Components.MonitorWebglBarChartThresholdColorationExactPoint, HTMLStencilElement {
    }
    var HTMLMonitorWebglBarChartThresholdColorationExactPointElement: {
        prototype: HTMLMonitorWebglBarChartThresholdColorationExactPointElement;
        new (): HTMLMonitorWebglBarChartThresholdColorationExactPointElement;
    };
    interface HTMLMonitorWebglBarChartThresholdColorationMultipleDataStreamElement extends Components.MonitorWebglBarChartThresholdColorationMultipleDataStream, HTMLStencilElement {
    }
    var HTMLMonitorWebglBarChartThresholdColorationMultipleDataStreamElement: {
        prototype: HTMLMonitorWebglBarChartThresholdColorationMultipleDataStreamElement;
        new (): HTMLMonitorWebglBarChartThresholdColorationMultipleDataStreamElement;
    };
    interface HTMLMonitorWebglBarChartThresholdColorationMultipleThresholdsElement extends Components.MonitorWebglBarChartThresholdColorationMultipleThresholds, HTMLStencilElement {
    }
    var HTMLMonitorWebglBarChartThresholdColorationMultipleThresholdsElement: {
        prototype: HTMLMonitorWebglBarChartThresholdColorationMultipleThresholdsElement;
        new (): HTMLMonitorWebglBarChartThresholdColorationMultipleThresholdsElement;
    };
    interface HTMLMonitorWebglBarChartThresholdNoColorationElement extends Components.MonitorWebglBarChartThresholdNoColoration, HTMLStencilElement {
    }
    var HTMLMonitorWebglBarChartThresholdNoColorationElement: {
        prototype: HTMLMonitorWebglBarChartThresholdNoColorationElement;
        new (): HTMLMonitorWebglBarChartThresholdNoColorationElement;
    };
    interface HTMLMonitorWebglChartAnnotationsElement extends Components.MonitorWebglChartAnnotations, HTMLStencilElement {
    }
    var HTMLMonitorWebglChartAnnotationsElement: {
        prototype: HTMLMonitorWebglChartAnnotationsElement;
        new (): HTMLMonitorWebglChartAnnotationsElement;
    };
    interface HTMLMonitorWebglChartAnnotationsAlwaysInViewportElement extends Components.MonitorWebglChartAnnotationsAlwaysInViewport, HTMLStencilElement {
    }
    var HTMLMonitorWebglChartAnnotationsAlwaysInViewportElement: {
        prototype: HTMLMonitorWebglChartAnnotationsAlwaysInViewportElement;
        new (): HTMLMonitorWebglChartAnnotationsAlwaysInViewportElement;
    };
    interface HTMLMonitorWebglChartAxisElement extends Components.MonitorWebglChartAxis, HTMLStencilElement {
    }
    var HTMLMonitorWebglChartAxisElement: {
        prototype: HTMLMonitorWebglChartAxisElement;
        new (): HTMLMonitorWebglChartAxisElement;
    };
    interface HTMLMonitorWebglChartDynamicChartsElement extends Components.MonitorWebglChartDynamicCharts, HTMLStencilElement {
    }
    var HTMLMonitorWebglChartDynamicChartsElement: {
        prototype: HTMLMonitorWebglChartDynamicChartsElement;
        new (): HTMLMonitorWebglChartDynamicChartsElement;
    };
    interface HTMLMonitorWebglChartLargeViewportElement extends Components.MonitorWebglChartLargeViewport, HTMLStencilElement {
    }
    var HTMLMonitorWebglChartLargeViewportElement: {
        prototype: HTMLMonitorWebglChartLargeViewportElement;
        new (): HTMLMonitorWebglChartLargeViewportElement;
    };
    interface HTMLMonitorWebglChartMultiElement extends Components.MonitorWebglChartMulti, HTMLStencilElement {
    }
    var HTMLMonitorWebglChartMultiElement: {
        prototype: HTMLMonitorWebglChartMultiElement;
        new (): HTMLMonitorWebglChartMultiElement;
    };
    interface HTMLMonitorWebglChartNoAnnotationsElement extends Components.MonitorWebglChartNoAnnotations, HTMLStencilElement {
    }
    var HTMLMonitorWebglChartNoAnnotationsElement: {
        prototype: HTMLMonitorWebglChartNoAnnotationsElement;
        new (): HTMLMonitorWebglChartNoAnnotationsElement;
    };
    interface HTMLMonitorWebglChartStandardElement extends Components.MonitorWebglChartStandard, HTMLStencilElement {
    }
    var HTMLMonitorWebglChartStandardElement: {
        prototype: HTMLMonitorWebglChartStandardElement;
        new (): HTMLMonitorWebglChartStandardElement;
    };
    interface HTMLMonitorWebglChartStandardWithLegendElement extends Components.MonitorWebglChartStandardWithLegend, HTMLStencilElement {
    }
    var HTMLMonitorWebglChartStandardWithLegendElement: {
        prototype: HTMLMonitorWebglChartStandardWithLegendElement;
        new (): HTMLMonitorWebglChartStandardWithLegendElement;
    };
    interface HTMLMonitorWebglChartStandardWithLegendOnRightElement extends Components.MonitorWebglChartStandardWithLegendOnRight, HTMLStencilElement {
    }
    var HTMLMonitorWebglChartStandardWithLegendOnRightElement: {
        prototype: HTMLMonitorWebglChartStandardWithLegendOnRightElement;
        new (): HTMLMonitorWebglChartStandardWithLegendOnRightElement;
    };
    interface HTMLMonitorWebglChartThresholdColorationBandElement extends Components.MonitorWebglChartThresholdColorationBand, HTMLStencilElement {
    }
    var HTMLMonitorWebglChartThresholdColorationBandElement: {
        prototype: HTMLMonitorWebglChartThresholdColorationBandElement;
        new (): HTMLMonitorWebglChartThresholdColorationBandElement;
    };
    interface HTMLMonitorWebglChartThresholdColorationExactPointElement extends Components.MonitorWebglChartThresholdColorationExactPoint, HTMLStencilElement {
    }
    var HTMLMonitorWebglChartThresholdColorationExactPointElement: {
        prototype: HTMLMonitorWebglChartThresholdColorationExactPointElement;
        new (): HTMLMonitorWebglChartThresholdColorationExactPointElement;
    };
    interface HTMLMonitorWebglChartThresholdColorationMultipleDataStreamElement extends Components.MonitorWebglChartThresholdColorationMultipleDataStream, HTMLStencilElement {
    }
    var HTMLMonitorWebglChartThresholdColorationMultipleDataStreamElement: {
        prototype: HTMLMonitorWebglChartThresholdColorationMultipleDataStreamElement;
        new (): HTMLMonitorWebglChartThresholdColorationMultipleDataStreamElement;
    };
    interface HTMLMonitorWebglChartThresholdColorationMultipleThresholdsElement extends Components.MonitorWebglChartThresholdColorationMultipleThresholds, HTMLStencilElement {
    }
    var HTMLMonitorWebglChartThresholdColorationMultipleThresholdsElement: {
        prototype: HTMLMonitorWebglChartThresholdColorationMultipleThresholdsElement;
        new (): HTMLMonitorWebglChartThresholdColorationMultipleThresholdsElement;
    };
    interface HTMLMonitorWebglChartThresholdColorationSplitHalfElement extends Components.MonitorWebglChartThresholdColorationSplitHalf, HTMLStencilElement {
    }
    var HTMLMonitorWebglChartThresholdColorationSplitHalfElement: {
        prototype: HTMLMonitorWebglChartThresholdColorationSplitHalfElement;
        new (): HTMLMonitorWebglChartThresholdColorationSplitHalfElement;
    };
    interface HTMLMonitorWebglChartTooltipWithMultipleDataStreamsElement extends Components.MonitorWebglChartTooltipWithMultipleDataStreams, HTMLStencilElement {
    }
    var HTMLMonitorWebglChartTooltipWithMultipleDataStreamsElement: {
        prototype: HTMLMonitorWebglChartTooltipWithMultipleDataStreamsElement;
        new (): HTMLMonitorWebglChartTooltipWithMultipleDataStreamsElement;
    };
    interface HTMLMonitorWebglContextElement extends Components.MonitorWebglContext, HTMLStencilElement {
    }
    var HTMLMonitorWebglContextElement: {
        prototype: HTMLMonitorWebglContextElement;
        new (): HTMLMonitorWebglContextElement;
    };
    interface HTMLMonitorWebglLineChartDynamicBufferElement extends Components.MonitorWebglLineChartDynamicBuffer, HTMLStencilElement {
    }
    var HTMLMonitorWebglLineChartDynamicBufferElement: {
        prototype: HTMLMonitorWebglLineChartDynamicBufferElement;
        new (): HTMLMonitorWebglLineChartDynamicBufferElement;
    };
    interface HTMLMonitorWebglLineChartDynamicDataElement extends Components.MonitorWebglLineChartDynamicData, HTMLStencilElement {
    }
    var HTMLMonitorWebglLineChartDynamicDataElement: {
        prototype: HTMLMonitorWebglLineChartDynamicDataElement;
        new (): HTMLMonitorWebglLineChartDynamicDataElement;
    };
    interface HTMLMonitorWebglLineChartDynamicDataStreamsElement extends Components.MonitorWebglLineChartDynamicDataStreams, HTMLStencilElement {
    }
    var HTMLMonitorWebglLineChartDynamicDataStreamsElement: {
        prototype: HTMLMonitorWebglLineChartDynamicDataStreamsElement;
        new (): HTMLMonitorWebglLineChartDynamicDataStreamsElement;
    };
    interface HTMLMonitorWidgetGridElement extends Components.MonitorWidgetGrid, HTMLStencilElement {
    }
    var HTMLMonitorWidgetGridElement: {
        prototype: HTMLMonitorWidgetGridElement;
        new (): HTMLMonitorWidgetGridElement;
    };
    interface HTMLMultipleStatusesElement extends Components.MultipleStatuses, HTMLStencilElement {
    }
    var HTMLMultipleStatusesElement: {
        prototype: HTMLMultipleStatusesElement;
        new (): HTMLMultipleStatusesElement;
    };
    interface HTMLScAppElement extends Components.ScApp, HTMLStencilElement {
    }
    var HTMLScAppElement: {
        prototype: HTMLScAppElement;
        new (): HTMLScAppElement;
    };
    interface HTMLScBarChartElement extends Components.ScBarChart, HTMLStencilElement {
    }
    var HTMLScBarChartElement: {
        prototype: HTMLScBarChartElement;
        new (): HTMLScBarChartElement;
    };
    interface HTMLScBoxElement extends Components.ScBox, HTMLStencilElement {
    }
    var HTMLScBoxElement: {
        prototype: HTMLScBoxElement;
        new (): HTMLScBoxElement;
    };
    interface HTMLScChartIconElement extends Components.ScChartIcon, HTMLStencilElement {
    }
    var HTMLScChartIconElement: {
        prototype: HTMLScChartIconElement;
        new (): HTMLScChartIconElement;
    };
    interface HTMLScErrorBadgeElement extends Components.ScErrorBadge, HTMLStencilElement {
    }
    var HTMLScErrorBadgeElement: {
        prototype: HTMLScErrorBadgeElement;
        new (): HTMLScErrorBadgeElement;
    };
    interface HTMLScGestureHandlerElement extends Components.ScGestureHandler, HTMLStencilElement {
    }
    var HTMLScGestureHandlerElement: {
        prototype: HTMLScGestureHandlerElement;
        new (): HTMLScGestureHandlerElement;
    };
    interface HTMLScLoadingSpinnerElement extends Components.ScLoadingSpinner, HTMLStencilElement {
    }
    var HTMLScLoadingSpinnerElement: {
        prototype: HTMLScLoadingSpinnerElement;
        new (): HTMLScLoadingSpinnerElement;
    };
    interface HTMLScTooltipElement extends Components.ScTooltip, HTMLStencilElement {
    }
    var HTMLScTooltipElement: {
        prototype: HTMLScTooltipElement;
        new (): HTMLScTooltipElement;
    };
    interface HTMLScTooltipRowElement extends Components.ScTooltipRow, HTMLStencilElement {
    }
    var HTMLScTooltipRowElement: {
        prototype: HTMLScTooltipRowElement;
        new (): HTMLScTooltipRowElement;
    };
    interface HTMLScTooltipRowsElement extends Components.ScTooltipRows, HTMLStencilElement {
    }
    var HTMLScTooltipRowsElement: {
        prototype: HTMLScTooltipRowsElement;
        new (): HTMLScTooltipRowsElement;
    };
    interface HTMLScWebglAxisElement extends Components.ScWebglAxis, HTMLStencilElement {
    }
    var HTMLScWebglAxisElement: {
        prototype: HTMLScWebglAxisElement;
        new (): HTMLScWebglAxisElement;
    };
    interface HTMLScWebglBaseChartElement extends Components.ScWebglBaseChart, HTMLStencilElement {
    }
    var HTMLScWebglBaseChartElement: {
        prototype: HTMLScWebglBaseChartElement;
        new (): HTMLScWebglBaseChartElement;
    };
    interface HTMLSingleColoredStatusElement extends Components.SingleColoredStatus, HTMLStencilElement {
    }
    var HTMLSingleColoredStatusElement: {
        prototype: HTMLSingleColoredStatusElement;
        new (): HTMLSingleColoredStatusElement;
    };
    interface HTMLSingleStatusElement extends Components.SingleStatus, HTMLStencilElement {
    }
    var HTMLSingleStatusElement: {
        prototype: HTMLSingleStatusElement;
        new (): HTMLSingleStatusElement;
    };
    interface HTMLStatusChartDynamicBufferElement extends Components.StatusChartDynamicBuffer, HTMLStencilElement {
    }
    var HTMLStatusChartDynamicBufferElement: {
        prototype: HTMLStatusChartDynamicBufferElement;
        new (): HTMLStatusChartDynamicBufferElement;
    };
    interface HTMLStatusChartDynamicDataElement extends Components.StatusChartDynamicData, HTMLStencilElement {
    }
    var HTMLStatusChartDynamicDataElement: {
        prototype: HTMLStatusChartDynamicDataElement;
        new (): HTMLStatusChartDynamicDataElement;
    };
    interface HTMLStatusChartDynamicDataStreamsElement extends Components.StatusChartDynamicDataStreams, HTMLStencilElement {
    }
    var HTMLStatusChartDynamicDataStreamsElement: {
        prototype: HTMLStatusChartDynamicDataStreamsElement;
        new (): HTMLStatusChartDynamicDataStreamsElement;
    };
    interface HTMLStatusChartFastViewportElement extends Components.StatusChartFastViewport, HTMLStencilElement {
    }
    var HTMLStatusChartFastViewportElement: {
        prototype: HTMLStatusChartFastViewportElement;
        new (): HTMLStatusChartFastViewportElement;
    };
    interface HTMLStatusChartMarginElement extends Components.StatusChartMargin, HTMLStencilElement {
    }
    var HTMLStatusChartMarginElement: {
        prototype: HTMLStatusChartMarginElement;
        new (): HTMLStatusChartMarginElement;
    };
    interface HTMLStatusChartMultipleDataStreamsElement extends Components.StatusChartMultipleDataStreams, HTMLStencilElement {
    }
    var HTMLStatusChartMultipleDataStreamsElement: {
        prototype: HTMLStatusChartMultipleDataStreamsElement;
        new (): HTMLStatusChartMultipleDataStreamsElement;
    };
    interface HTMLStatusChartRawDataElement extends Components.StatusChartRawData, HTMLStencilElement {
    }
    var HTMLStatusChartRawDataElement: {
        prototype: HTMLStatusChartRawDataElement;
        new (): HTMLStatusChartRawDataElement;
    };
    interface HTMLStatusChartStandardElement extends Components.StatusChartStandard, HTMLStencilElement {
    }
    var HTMLStatusChartStandardElement: {
        prototype: HTMLStatusChartStandardElement;
        new (): HTMLStatusChartStandardElement;
    };
    interface HTMLStatusChartThresholdColorationElement extends Components.StatusChartThresholdColoration, HTMLStencilElement {
    }
    var HTMLStatusChartThresholdColorationElement: {
        prototype: HTMLStatusChartThresholdColorationElement;
        new (): HTMLStatusChartThresholdColorationElement;
    };
    interface HTMLStatusChartThresholdColorationBandElement extends Components.StatusChartThresholdColorationBand, HTMLStencilElement {
    }
    var HTMLStatusChartThresholdColorationBandElement: {
        prototype: HTMLStatusChartThresholdColorationBandElement;
        new (): HTMLStatusChartThresholdColorationBandElement;
    };
    interface HTMLStatusChartThresholdColorationExactPointElement extends Components.StatusChartThresholdColorationExactPoint, HTMLStencilElement {
    }
    var HTMLStatusChartThresholdColorationExactPointElement: {
        prototype: HTMLStatusChartThresholdColorationExactPointElement;
        new (): HTMLStatusChartThresholdColorationExactPointElement;
    };
    interface HTMLStatusChartThresholdColorationMultipleDataStreamElement extends Components.StatusChartThresholdColorationMultipleDataStream, HTMLStencilElement {
    }
    var HTMLStatusChartThresholdColorationMultipleDataStreamElement: {
        prototype: HTMLStatusChartThresholdColorationMultipleDataStreamElement;
        new (): HTMLStatusChartThresholdColorationMultipleDataStreamElement;
    };
    interface HTMLStatusChartThresholdColorationMultipleThresholdsElement extends Components.StatusChartThresholdColorationMultipleThresholds, HTMLStencilElement {
    }
    var HTMLStatusChartThresholdColorationMultipleThresholdsElement: {
        prototype: HTMLStatusChartThresholdColorationMultipleThresholdsElement;
        new (): HTMLStatusChartThresholdColorationMultipleThresholdsElement;
    };
    interface HTMLStatusChartThresholdNoColorationElement extends Components.StatusChartThresholdNoColoration, HTMLStencilElement {
    }
    var HTMLStatusChartThresholdNoColorationElement: {
        prototype: HTMLStatusChartThresholdNoColorationElement;
        new (): HTMLStatusChartThresholdNoColorationElement;
    };
    interface HTMLWidgetTestRouteElement extends Components.WidgetTestRoute, HTMLStencilElement {
    }
    var HTMLWidgetTestRouteElement: {
        prototype: HTMLWidgetTestRouteElement;
        new (): HTMLWidgetTestRouteElement;
    };
    interface HTMLElementTagNameMap {
        "line-chart-viewport-change": HTMLLineChartViewportChangeElement;
        "monitor-angled-line-segment": HTMLMonitorAngledLineSegmentElement;
        "monitor-chart-y-range": HTMLMonitorChartYRangeElement;
        "monitor-circle-point-shaders": HTMLMonitorCirclePointShadersElement;
        "monitor-data-stream-name": HTMLMonitorDataStreamNameElement;
        "monitor-expandable-input": HTMLMonitorExpandableInputElement;
        "monitor-expandable-input-standard": HTMLMonitorExpandableInputStandardElement;
        "monitor-grid": HTMLMonitorGridElement;
        "monitor-grid-tooltip": HTMLMonitorGridTooltipElement;
        "monitor-help-tooltip": HTMLMonitorHelpTooltipElement;
        "monitor-kpi": HTMLMonitorKpiElement;
        "monitor-kpi-base": HTMLMonitorKpiBaseElement;
        "monitor-kpi-standard": HTMLMonitorKpiStandardElement;
        "monitor-legend": HTMLMonitorLegendElement;
        "monitor-legend-row": HTMLMonitorLegendRowElement;
        "monitor-line-chart": HTMLMonitorLineChartElement;
        "monitor-line-chart-colored-point": HTMLMonitorLineChartColoredPointElement;
        "monitor-line-chart-stream-data": HTMLMonitorLineChartStreamDataElement;
        "monitor-multiple-bars": HTMLMonitorMultipleBarsElement;
        "monitor-multiple-lines": HTMLMonitorMultipleLinesElement;
        "monitor-multiple-lines-overlapping": HTMLMonitorMultipleLinesOverlappingElement;
        "monitor-scatter-chart": HTMLMonitorScatterChartElement;
        "monitor-scatter-chart-dynamic-data": HTMLMonitorScatterChartDynamicDataElement;
        "monitor-scatter-chart-threshold": HTMLMonitorScatterChartThresholdElement;
        "monitor-scatter-chart-threshold-coloration-band": HTMLMonitorScatterChartThresholdColorationBandElement;
        "monitor-scatter-chart-threshold-coloration-exact-point": HTMLMonitorScatterChartThresholdColorationExactPointElement;
        "monitor-scatter-chart-threshold-coloration-multiple-data-stream": HTMLMonitorScatterChartThresholdColorationMultipleDataStreamElement;
        "monitor-scatter-chart-threshold-coloration-multiple-thresholds": HTMLMonitorScatterChartThresholdColorationMultipleThresholdsElement;
        "monitor-scatter-chart-threshold-no-coloration": HTMLMonitorScatterChartThresholdNoColorationElement;
        "monitor-scatter-chart-tooltip-with-multiple-data-streams-and-trends": HTMLMonitorScatterChartTooltipWithMultipleDataStreamsAndTrendsElement;
        "monitor-scatter-chart-trend-line-color-configuration": HTMLMonitorScatterChartTrendLineColorConfigurationElement;
        "monitor-scatter-chart-trend-line-with-legend": HTMLMonitorScatterChartTrendLineWithLegendElement;
        "monitor-single-bar": HTMLMonitorSingleBarElement;
        "monitor-single-colored-bar": HTMLMonitorSingleColoredBarElement;
        "monitor-size-provider": HTMLMonitorSizeProviderElement;
        "monitor-size-provider-standard": HTMLMonitorSizeProviderStandardElement;
        "monitor-status-cell": HTMLMonitorStatusCellElement;
        "monitor-status-chart": HTMLMonitorStatusChartElement;
        "monitor-status-grid": HTMLMonitorStatusGridElement;
        "monitor-status-grid-standard": HTMLMonitorStatusGridStandardElement;
        "monitor-status-timeline-overlay": HTMLMonitorStatusTimelineOverlayElement;
        "monitor-status-timeline-overlay-row": HTMLMonitorStatusTimelineOverlayRowElement;
        "monitor-straight-line-segment": HTMLMonitorStraightLineSegmentElement;
        "monitor-straight-line-segment-colored": HTMLMonitorStraightLineSegmentColoredElement;
        "monitor-table": HTMLMonitorTableElement;
        "monitor-table-base": HTMLMonitorTableBaseElement;
        "monitor-table-cell": HTMLMonitorTableCellElement;
        "monitor-threshold-legend": HTMLMonitorThresholdLegendElement;
        "monitor-threshold-legend-row": HTMLMonitorThresholdLegendRowElement;
        "monitor-webgl-bar-chart-dynamic-buffer": HTMLMonitorWebglBarChartDynamicBufferElement;
        "monitor-webgl-bar-chart-dynamic-data": HTMLMonitorWebglBarChartDynamicDataElement;
        "monitor-webgl-bar-chart-dynamic-data-streams": HTMLMonitorWebglBarChartDynamicDataStreamsElement;
        "monitor-webgl-bar-chart-fast-viewport": HTMLMonitorWebglBarChartFastViewportElement;
        "monitor-webgl-bar-chart-margin": HTMLMonitorWebglBarChartMarginElement;
        "monitor-webgl-bar-chart-negative": HTMLMonitorWebglBarChartNegativeElement;
        "monitor-webgl-bar-chart-positive-negative": HTMLMonitorWebglBarChartPositiveNegativeElement;
        "monitor-webgl-bar-chart-standard": HTMLMonitorWebglBarChartStandardElement;
        "monitor-webgl-bar-chart-start-from-zero": HTMLMonitorWebglBarChartStartFromZeroElement;
        "monitor-webgl-bar-chart-threshold-coloration": HTMLMonitorWebglBarChartThresholdColorationElement;
        "monitor-webgl-bar-chart-threshold-coloration-band": HTMLMonitorWebglBarChartThresholdColorationBandElement;
        "monitor-webgl-bar-chart-threshold-coloration-exact-point": HTMLMonitorWebglBarChartThresholdColorationExactPointElement;
        "monitor-webgl-bar-chart-threshold-coloration-multiple-data-stream": HTMLMonitorWebglBarChartThresholdColorationMultipleDataStreamElement;
        "monitor-webgl-bar-chart-threshold-coloration-multiple-thresholds": HTMLMonitorWebglBarChartThresholdColorationMultipleThresholdsElement;
        "monitor-webgl-bar-chart-threshold-no-coloration": HTMLMonitorWebglBarChartThresholdNoColorationElement;
        "monitor-webgl-chart-annotations": HTMLMonitorWebglChartAnnotationsElement;
        "monitor-webgl-chart-annotations-always-in-viewport": HTMLMonitorWebglChartAnnotationsAlwaysInViewportElement;
        "monitor-webgl-chart-axis": HTMLMonitorWebglChartAxisElement;
        "monitor-webgl-chart-dynamic-charts": HTMLMonitorWebglChartDynamicChartsElement;
        "monitor-webgl-chart-large-viewport": HTMLMonitorWebglChartLargeViewportElement;
        "monitor-webgl-chart-multi": HTMLMonitorWebglChartMultiElement;
        "monitor-webgl-chart-no-annotations": HTMLMonitorWebglChartNoAnnotationsElement;
        "monitor-webgl-chart-standard": HTMLMonitorWebglChartStandardElement;
        "monitor-webgl-chart-standard-with-legend": HTMLMonitorWebglChartStandardWithLegendElement;
        "monitor-webgl-chart-standard-with-legend-on-right": HTMLMonitorWebglChartStandardWithLegendOnRightElement;
        "monitor-webgl-chart-threshold-coloration-band": HTMLMonitorWebglChartThresholdColorationBandElement;
        "monitor-webgl-chart-threshold-coloration-exact-point": HTMLMonitorWebglChartThresholdColorationExactPointElement;
        "monitor-webgl-chart-threshold-coloration-multiple-data-stream": HTMLMonitorWebglChartThresholdColorationMultipleDataStreamElement;
        "monitor-webgl-chart-threshold-coloration-multiple-thresholds": HTMLMonitorWebglChartThresholdColorationMultipleThresholdsElement;
        "monitor-webgl-chart-threshold-coloration-split-half": HTMLMonitorWebglChartThresholdColorationSplitHalfElement;
        "monitor-webgl-chart-tooltip-with-multiple-data-streams": HTMLMonitorWebglChartTooltipWithMultipleDataStreamsElement;
        "monitor-webgl-context": HTMLMonitorWebglContextElement;
        "monitor-webgl-line-chart-dynamic-buffer": HTMLMonitorWebglLineChartDynamicBufferElement;
        "monitor-webgl-line-chart-dynamic-data": HTMLMonitorWebglLineChartDynamicDataElement;
        "monitor-webgl-line-chart-dynamic-data-streams": HTMLMonitorWebglLineChartDynamicDataStreamsElement;
        "monitor-widget-grid": HTMLMonitorWidgetGridElement;
        "multiple-statuses": HTMLMultipleStatusesElement;
        "sc-app": HTMLScAppElement;
        "sc-bar-chart": HTMLScBarChartElement;
        "sc-box": HTMLScBoxElement;
        "sc-chart-icon": HTMLScChartIconElement;
        "sc-error-badge": HTMLScErrorBadgeElement;
        "sc-gesture-handler": HTMLScGestureHandlerElement;
        "sc-loading-spinner": HTMLScLoadingSpinnerElement;
        "sc-tooltip": HTMLScTooltipElement;
        "sc-tooltip-row": HTMLScTooltipRowElement;
        "sc-tooltip-rows": HTMLScTooltipRowsElement;
        "sc-webgl-axis": HTMLScWebglAxisElement;
        "sc-webgl-base-chart": HTMLScWebglBaseChartElement;
        "single-colored-status": HTMLSingleColoredStatusElement;
        "single-status": HTMLSingleStatusElement;
        "status-chart-dynamic-buffer": HTMLStatusChartDynamicBufferElement;
        "status-chart-dynamic-data": HTMLStatusChartDynamicDataElement;
        "status-chart-dynamic-data-streams": HTMLStatusChartDynamicDataStreamsElement;
        "status-chart-fast-viewport": HTMLStatusChartFastViewportElement;
        "status-chart-margin": HTMLStatusChartMarginElement;
        "status-chart-multiple-data-streams": HTMLStatusChartMultipleDataStreamsElement;
        "status-chart-raw-data": HTMLStatusChartRawDataElement;
        "status-chart-standard": HTMLStatusChartStandardElement;
        "status-chart-threshold-coloration": HTMLStatusChartThresholdColorationElement;
        "status-chart-threshold-coloration-band": HTMLStatusChartThresholdColorationBandElement;
        "status-chart-threshold-coloration-exact-point": HTMLStatusChartThresholdColorationExactPointElement;
        "status-chart-threshold-coloration-multiple-data-stream": HTMLStatusChartThresholdColorationMultipleDataStreamElement;
        "status-chart-threshold-coloration-multiple-thresholds": HTMLStatusChartThresholdColorationMultipleThresholdsElement;
        "status-chart-threshold-no-coloration": HTMLStatusChartThresholdNoColorationElement;
        "widget-test-route": HTMLWidgetTestRouteElement;
    }
}
declare namespace LocalJSX {
    interface LineChartViewportChange {
    }
    interface MonitorAngledLineSegment {
    }
    interface MonitorChartYRange {
        "component"?: string;
    }
    interface MonitorCirclePointShaders {
    }
    interface MonitorDataStreamName {
        "date"?: Date;
        "detailedLabel"?: string;
        "displayTooltip"?: boolean;
        "isEditing": boolean;
        "label": string;
        "onNameChange": (name: string) => void;
        "pointType"?: POINT_TYPE;
    }
    interface MonitorExpandableInput {
        "isDisabled"?: boolean;
        "onValueChange": (value: string) => void;
        "value": string;
    }
    interface MonitorExpandableInputStandard {
    }
    interface MonitorGrid {
    }
    interface MonitorGridTooltip {
        "alarmPoint"?: DataPoint<Primitive>;
        "breachedThreshold"?: Threshold;
        "isEnabled"?: boolean;
        "propertyPoint"?: DataPoint<Primitive>;
        "title"?: string;
    }
    interface MonitorHelpTooltip {
        "message": string;
    }
    interface MonitorKpi {
        "annotations"?: Annotations;
        "dataStreams": DataStream[];
        "isEditing"?: boolean;
        "liveModeOnlyMessage"?: string;
        "messageOverrides"?: MessageOverrides;
        "viewPort"?: MinimalViewPortConfig;
        "widgetId": string;
    }
    interface MonitorKpiBase {
        "alarmPoint"?: DataPoint<Primitive>;
        "alarmStream"?: DataStream;
        "breachedThreshold"?: Threshold;
        "isEditing"?: boolean;
        "isEnabled"?: boolean;
        "isLoading"?: boolean;
        "isRefreshing"?: boolean;
        "messageOverrides": MessageOverrides;
        "miniVersion": boolean;
        "onChangeLabel": ({ streamId, name }: { streamId: string; name: string }) => void;
        "propertyPoint"?: DataPoint<Primitive>;
        "propertyStream"?: DataStream;
        "trendStream": DataStream | undefined;
        "valueColor"?: string;
        "viewPort": MinimalViewPortConfig;
    }
    interface MonitorKpiStandard {
    }
    interface MonitorLegend {
        "config": LegendConfig;
        "dataStreams": DataStream[];
        "isEditing"?: boolean;
        "isLoading": boolean;
        "showDataStreamColor": boolean;
        "supportString"?: boolean;
        "thresholds": Threshold[];
        "trendResults"?: TrendResult[];
        "updateDataStreamName": ({ streamId, name }: { streamId: string; name: string }) => void;
        "viewPort": ViewPort;
        "visualizesAlarms": boolean;
    }
    interface MonitorLegendRow {
        "color": string;
        "detailedLabel"?: string;
        "icon"?: StatusIcon;
        "isEditing": boolean;
        "isLoading": boolean;
        "label": string;
        "point"?: DataPoint<Primitive>;
        "pointType"?: POINT_TYPE;
        "showDataStreamColor": boolean;
        "streamId": string;
        "unit"?: string;
        "updateDataStreamName": ({ streamId, name }: { streamId: string; name: string }) => void;
        "valueColor"?: string;
    }
    interface MonitorLineChart {
        "alarms"?: AlarmsConfig;
        "annotations"?: Annotations;
        "axis"?: Axis.Options;
        /**
          * Memory Management
         */
        "bufferFactor"?: number;
        "dataStreams": DataStream[];
        "gestures"?: boolean;
        /**
          * Status
         */
        "isEditing"?: boolean;
        "layout"?: LayoutConfig;
        "legend"?: LegendConfig;
        "messageOverrides"?: MessageOverrides;
        "minBufferSize"?: number;
        "movement"?: MovementConfig;
        "requestData"?: RequestDataFn;
        "scale"?: ScaleConfig;
        "size"?: MinimalSizeConfig;
        "trends"?: Trend[];
        /**
          * Chart API
         */
        "viewPort": MinimalViewPortConfig;
        "widgetId": string;
    }
    interface MonitorLineChartColoredPoint {
    }
    interface MonitorLineChartStreamData {
    }
    interface MonitorMultipleBars {
    }
    interface MonitorMultipleLines {
    }
    interface MonitorMultipleLinesOverlapping {
    }
    interface MonitorScatterChart {
        "alarms"?: AlarmsConfig;
        "annotations"?: Annotations;
        "axis"?: Axis.Options;
        /**
          * Memory Management
         */
        "bufferFactor"?: number;
        "dataStreams": DataStream[];
        "gestures"?: boolean;
        /**
          * Status
         */
        "isEditing"?: boolean;
        "layout"?: LayoutConfig;
        "legend"?: LegendConfig;
        "messageOverrides"?: MessageOverrides;
        "minBufferSize"?: number;
        "movement"?: MovementConfig;
        "requestData"?: RequestDataFn;
        "scale"?: ScaleConfig;
        "size"?: MinimalSizeConfig;
        "trends"?: Trend[];
        /**
          * Chart API
         */
        "viewPort"?: MinimalViewPortConfig;
        "widgetId": string;
    }
    interface MonitorScatterChartDynamicData {
    }
    interface MonitorScatterChartThreshold {
    }
    interface MonitorScatterChartThresholdColorationBand {
    }
    interface MonitorScatterChartThresholdColorationExactPoint {
    }
    interface MonitorScatterChartThresholdColorationMultipleDataStream {
    }
    interface MonitorScatterChartThresholdColorationMultipleThresholds {
    }
    interface MonitorScatterChartThresholdNoColoration {
    }
    interface MonitorScatterChartTooltipWithMultipleDataStreamsAndTrends {
    }
    interface MonitorScatterChartTrendLineColorConfiguration {
    }
    interface MonitorScatterChartTrendLineWithLegend {
    }
    interface MonitorSingleBar {
    }
    interface MonitorSingleColoredBar {
    }
    interface MonitorSizeProvider {
        "renderFunc": (rect: RectScrollFixed) => void;
        /**
          * Size overrides. these will take precident over any auto-calculated sizing
         */
        "size"?: Size;
    }
    interface MonitorSizeProviderStandard {
    }
    interface MonitorStatusCell {
        "alarmPoint"?: DataPoint;
        "alarmStream"?: DataStream;
        "breachedThreshold"?: Threshold;
        "icon"?: StatusIcon;
        "isEditing"?: boolean;
        "isEnabled"?: boolean;
        "labelsConfig"?: Required<LabelsConfig>;
        "messageOverrides"?: MessageOverrides;
        "onChangeLabel": ({ streamId, name }: { streamId: string; name: string }) => void;
        "propertyPoint"?: DataPoint;
        "propertyStream"?: DataStream;
        "valueColor"?: string;
    }
    interface MonitorStatusChart {
        "alarms"?: AlarmsConfig;
        "annotations"?: Annotations;
        "axis"?: Axis.Options;
        /**
          * Memory Management
         */
        "bufferFactor"?: number;
        "dataStreams": DataStream[];
        "gestures"?: boolean;
        /**
          * Status
         */
        "isEditing"?: boolean;
        "layout"?: LayoutConfig;
        "messageOverrides"?: MessageOverrides;
        "minBufferSize"?: number;
        "movement"?: MovementConfig;
        "requestData"?: RequestDataFn;
        "scale"?: ScaleConfig;
        "size"?: MinimalSizeConfig;
        /**
          * Chart API
         */
        "viewPort"?: MinimalViewPortConfig;
        "widgetId": string;
    }
    interface MonitorStatusGrid {
        "annotations"?: Annotations;
        "dataStreams": DataStream[];
        "isEditing"?: boolean;
        /**
          * Status Grid Specific configuration
         */
        "labelsConfig"?: LabelsConfig;
        "liveModeOnlyMessage"?: string;
        "messageOverrides"?: MessageOverrides;
        "viewPort"?: MinimalViewPortConfig;
        "widgetId": string;
    }
    interface MonitorStatusGridStandard {
    }
    interface MonitorStatusTimelineOverlay {
        "dataStreams": DataStream[];
        "date": Date;
        "isEditing": boolean;
        "onWidgetUpdated"?: (event: CustomEvent<WidgetConfigurationUpdate>) => void;
        "size": SizeConfig;
        "thresholds": Threshold[];
        "widgetId": string;
    }
    interface MonitorStatusTimelineOverlayRow {
        "detailedLabel"?: string;
        "icon"?: StatusIcon;
        "isEditing": boolean;
        "label": string;
        "onNameChange": (name: string) => void;
        "unit"?: string;
        "value"?: Primitive;
        "valueColor"?: string;
    }
    interface MonitorStraightLineSegment {
    }
    interface MonitorStraightLineSegmentColored {
    }
    interface MonitorTable {
        "annotations"?: Annotations;
        "dataStreams": DataStream[];
        "liveModeOnlyMessage"?: string;
        "messageOverrides"?: MessageOverrides;
        /**
          * Table column values
         */
        "tableColumns"?: TableColumn[];
        "trends"?: Trend[];
        "viewPort"?: MinimalViewPortConfig;
        "widgetId": string;
    }
    interface MonitorTableBase {
        "columns": TableColumn[];
        "isEnabled": boolean;
        "liveModeOnlyMessage"?: string;
        "messageOverrides": MessageOverrides;
        "rows": Row[];
    }
    interface MonitorTableCell {
        "cell": Cell | undefined;
    }
    interface MonitorThresholdLegend {
        "thresholds": Threshold[];
    }
    interface MonitorThresholdLegendRow {
        "color": string;
        "label": string;
    }
    interface MonitorWebglBarChartDynamicBuffer {
    }
    interface MonitorWebglBarChartDynamicData {
    }
    interface MonitorWebglBarChartDynamicDataStreams {
    }
    interface MonitorWebglBarChartFastViewport {
    }
    interface MonitorWebglBarChartMargin {
    }
    interface MonitorWebglBarChartNegative {
    }
    interface MonitorWebglBarChartPositiveNegative {
    }
    interface MonitorWebglBarChartStandard {
    }
    interface MonitorWebglBarChartStartFromZero {
    }
    interface MonitorWebglBarChartThresholdColoration {
    }
    interface MonitorWebglBarChartThresholdColorationBand {
    }
    interface MonitorWebglBarChartThresholdColorationExactPoint {
    }
    interface MonitorWebglBarChartThresholdColorationMultipleDataStream {
    }
    interface MonitorWebglBarChartThresholdColorationMultipleThresholds {
    }
    interface MonitorWebglBarChartThresholdNoColoration {
    }
    interface MonitorWebglChartAnnotations {
    }
    interface MonitorWebglChartAnnotationsAlwaysInViewport {
    }
    interface MonitorWebglChartAxis {
    }
    interface MonitorWebglChartDynamicCharts {
    }
    interface MonitorWebglChartLargeViewport {
    }
    interface MonitorWebglChartMulti {
    }
    interface MonitorWebglChartNoAnnotations {
    }
    interface MonitorWebglChartStandard {
    }
    interface MonitorWebglChartStandardWithLegend {
    }
    interface MonitorWebglChartStandardWithLegendOnRight {
    }
    interface MonitorWebglChartThresholdColorationBand {
    }
    interface MonitorWebglChartThresholdColorationExactPoint {
    }
    interface MonitorWebglChartThresholdColorationMultipleDataStream {
    }
    interface MonitorWebglChartThresholdColorationMultipleThresholds {
    }
    interface MonitorWebglChartThresholdColorationSplitHalf {
    }
    interface MonitorWebglChartTooltipWithMultipleDataStreams {
    }
    interface MonitorWebglContext {
    }
    interface MonitorWebglLineChartDynamicBuffer {
    }
    interface MonitorWebglLineChartDynamicData {
    }
    interface MonitorWebglLineChartDynamicDataStreams {
    }
    interface MonitorWidgetGrid {
        "annotations"?: Annotations;
        "collapseVertically"?: boolean;
        "dataStreams": DataStream[];
        "isEditing"?: boolean;
        /**
          * Chart API
         */
        "labelsConfig"?: LabelsConfig;
        "liveModeOnlyMessage"?: string;
        "messageOverrides"?: MessageOverrides;
        "onWidgetUpdated"?: (event: CustomEvent<WidgetConfigurationUpdate>) => void;
        "renderCell"?: RenderCell;
        "viewPort"?: MinimalViewPortConfig;
        "widgetId": string;
    }
    interface MultipleStatuses {
    }
    interface ScApp {
    }
    interface ScBarChart {
        "alarms"?: AlarmsConfig;
        "annotations"?: Annotations;
        "axis"?: Axis.Options;
        /**
          * Memory Management
         */
        "bufferFactor"?: number;
        "dataStreams": DataStream[];
        "gestures"?: boolean;
        /**
          * Status
         */
        "isEditing"?: boolean;
        "layout"?: LayoutConfig;
        "legend"?: LegendConfig;
        "messageOverrides"?: MessageOverrides;
        "minBufferSize"?: number;
        "movement"?: MovementConfig;
        "requestData"?: RequestDataFn;
        "scale"?: ScaleConfig;
        "size"?: MinimalSizeConfig;
        "trends"?: Trend[];
        /**
          * Chart API
         */
        "viewPort"?: MinimalViewPortConfig;
        "widgetId": string;
    }
    interface ScBox {
        "size"?: MinimalSizeConfig;
        "someObject"?: Object;
    }
    interface ScChartIcon {
        "color"?: string;
        "name"?: StatusIcon;
        "size"?: number;
    }
    interface ScErrorBadge {
    }
    interface ScGestureHandler {
        "onDateRangeChange": ({ end, start }: { start: Date; end: Date }) => void;
        "size": SizeConfig;
        "viewPort": ViewPort;
    }
    interface ScLoadingSpinner {
        "dark"?: boolean;
        "size"?: number;
    }
    interface ScTooltip {
        /**
          * If we are drawing data from the data timestamp to timestamp + resolution we want the tooltip to align on the left side  Otherwise we are drawing the data from timestamp - resolution to timestamp then we want the tooltip to align on the right side
         */
        "dataAlignment": DATA_ALIGNMENT;
        "dataContainer": HTMLElement;
        "dataStreams": DataStream[];
        "maxDurationFromDate"?: number;
        "showBlankTooltipRows"?: boolean;
        "showDataStreamColor"?: boolean;
        "size": SizeConfig;
        "sortPoints"?: boolean;
        "supportString": boolean;
        "thresholds": Threshold[];
        /**
          * CSS Top property for the tooltip container
         */
        "top"?: number;
        "trendResults"?: TrendResult[];
        "viewPort": ViewPort;
        "visualizesAlarms": boolean;
    }
    interface ScTooltipRow {
        "color": string;
        "icon"?: StatusIcon;
        "label": string;
        "point": DataPoint | undefined;
        "pointType": POINT_TYPE;
        "resolution": number | undefined;
        "showDataStreamColor": boolean;
        "valueColor"?: string;
    }
    interface ScTooltipRows {
        /**
          * If we are drawing data from the data timestamp to timestamp + resolution we want the tooltip to align on the left side  Otherwise we are drawing the data from timestamp - resolution to timestamp then we want the tooltip to align on the right side
         */
        "dataAlignment": DATA_ALIGNMENT;
        "dataStreams": DataStream[];
        "maxDurationFromDate"?: number;
        "selectedDate": Date;
        "showBlankTooltipRows": boolean;
        "showDataStreamColor"?: boolean;
        "size": SizeConfig;
        "sortPoints"?: boolean;
        "supportString": boolean;
        "thresholds": Threshold[];
        /**
          * CSS Top property for the tooltip container
         */
        "top"?: number;
        "trendResults"?: TrendResult[];
        "viewPort": ViewPort;
        "visualizesAlarms": boolean;
    }
    interface ScWebglAxis {
        "size": SizeConfig;
    }
    interface ScWebglBaseChart {
        "alarms"?: AlarmsConfig;
        "annotations"?: Annotations;
        "axis"?: Axis.Options;
        "bufferFactor": number;
        "configId": string;
        "createChartScene": ChartSceneCreator;
        "dataStreams": DataStream[];
        "displaysError"?: boolean;
        /**
          * if false, base chart will not display an empty state message when there is no data present.
         */
        "displaysNoDataPresentMsg"?: boolean;
        "gestures": boolean;
        "isEditing"?: boolean;
        "legend"?: LegendConfig;
        "messageOverrides"?: MessageOverrides;
        "minBufferSize": number;
        /**
          * On view port date range change, this component emits a `dateRangeChange` event. This allows other data visualization components to sync to the same date range.
         */
        "onDateRangeChange"?: (event: CustomEvent<[Date, Date, string | undefined]>) => void;
        /**
          * Optionally hooks to integrate custom logic into the base chart
         */
        "onUpdateLifeCycle"?: (viewPort: ViewPortConfig) => void;
        "onWidgetUpdated"?: (event: CustomEvent<WidgetConfigurationUpdate>) => void;
        /**
          * Optionally provided callback to initiate a request for data. Used to ensure gestures emit events for request data.
         */
        "requestData"?: RequestDataFn;
        "size": SizePositionConfig;
        "supportString"?: boolean;
        "tooltip"?: (props: Tooltip.Props) => HTMLElement;
        "trends"?: Trend[];
        "updateChartScene": ChartSceneUpdater;
        "viewPort": MinimalViewPortConfig;
        "visualizesAlarms"?: boolean;
        "yRangeStartFromZero"?: boolean;
    }
    interface SingleColoredStatus {
    }
    interface SingleStatus {
    }
    interface StatusChartDynamicBuffer {
    }
    interface StatusChartDynamicData {
    }
    interface StatusChartDynamicDataStreams {
    }
    interface StatusChartFastViewport {
    }
    interface StatusChartMargin {
    }
    interface StatusChartMultipleDataStreams {
    }
    interface StatusChartRawData {
    }
    interface StatusChartStandard {
    }
    interface StatusChartThresholdColoration {
    }
    interface StatusChartThresholdColorationBand {
    }
    interface StatusChartThresholdColorationExactPoint {
    }
    interface StatusChartThresholdColorationMultipleDataStream {
    }
    interface StatusChartThresholdColorationMultipleThresholds {
    }
    interface StatusChartThresholdNoColoration {
    }
    interface WidgetTestRoute {
        "component"?: string;
        "dataStreamInfos"?: DataStreamInfo[];
    }
    interface IntrinsicElements {
        "line-chart-viewport-change": LineChartViewportChange;
        "monitor-angled-line-segment": MonitorAngledLineSegment;
        "monitor-chart-y-range": MonitorChartYRange;
        "monitor-circle-point-shaders": MonitorCirclePointShaders;
        "monitor-data-stream-name": MonitorDataStreamName;
        "monitor-expandable-input": MonitorExpandableInput;
        "monitor-expandable-input-standard": MonitorExpandableInputStandard;
        "monitor-grid": MonitorGrid;
        "monitor-grid-tooltip": MonitorGridTooltip;
        "monitor-help-tooltip": MonitorHelpTooltip;
        "monitor-kpi": MonitorKpi;
        "monitor-kpi-base": MonitorKpiBase;
        "monitor-kpi-standard": MonitorKpiStandard;
        "monitor-legend": MonitorLegend;
        "monitor-legend-row": MonitorLegendRow;
        "monitor-line-chart": MonitorLineChart;
        "monitor-line-chart-colored-point": MonitorLineChartColoredPoint;
        "monitor-line-chart-stream-data": MonitorLineChartStreamData;
        "monitor-multiple-bars": MonitorMultipleBars;
        "monitor-multiple-lines": MonitorMultipleLines;
        "monitor-multiple-lines-overlapping": MonitorMultipleLinesOverlapping;
        "monitor-scatter-chart": MonitorScatterChart;
        "monitor-scatter-chart-dynamic-data": MonitorScatterChartDynamicData;
        "monitor-scatter-chart-threshold": MonitorScatterChartThreshold;
        "monitor-scatter-chart-threshold-coloration-band": MonitorScatterChartThresholdColorationBand;
        "monitor-scatter-chart-threshold-coloration-exact-point": MonitorScatterChartThresholdColorationExactPoint;
        "monitor-scatter-chart-threshold-coloration-multiple-data-stream": MonitorScatterChartThresholdColorationMultipleDataStream;
        "monitor-scatter-chart-threshold-coloration-multiple-thresholds": MonitorScatterChartThresholdColorationMultipleThresholds;
        "monitor-scatter-chart-threshold-no-coloration": MonitorScatterChartThresholdNoColoration;
        "monitor-scatter-chart-tooltip-with-multiple-data-streams-and-trends": MonitorScatterChartTooltipWithMultipleDataStreamsAndTrends;
        "monitor-scatter-chart-trend-line-color-configuration": MonitorScatterChartTrendLineColorConfiguration;
        "monitor-scatter-chart-trend-line-with-legend": MonitorScatterChartTrendLineWithLegend;
        "monitor-single-bar": MonitorSingleBar;
        "monitor-single-colored-bar": MonitorSingleColoredBar;
        "monitor-size-provider": MonitorSizeProvider;
        "monitor-size-provider-standard": MonitorSizeProviderStandard;
        "monitor-status-cell": MonitorStatusCell;
        "monitor-status-chart": MonitorStatusChart;
        "monitor-status-grid": MonitorStatusGrid;
        "monitor-status-grid-standard": MonitorStatusGridStandard;
        "monitor-status-timeline-overlay": MonitorStatusTimelineOverlay;
        "monitor-status-timeline-overlay-row": MonitorStatusTimelineOverlayRow;
        "monitor-straight-line-segment": MonitorStraightLineSegment;
        "monitor-straight-line-segment-colored": MonitorStraightLineSegmentColored;
        "monitor-table": MonitorTable;
        "monitor-table-base": MonitorTableBase;
        "monitor-table-cell": MonitorTableCell;
        "monitor-threshold-legend": MonitorThresholdLegend;
        "monitor-threshold-legend-row": MonitorThresholdLegendRow;
        "monitor-webgl-bar-chart-dynamic-buffer": MonitorWebglBarChartDynamicBuffer;
        "monitor-webgl-bar-chart-dynamic-data": MonitorWebglBarChartDynamicData;
        "monitor-webgl-bar-chart-dynamic-data-streams": MonitorWebglBarChartDynamicDataStreams;
        "monitor-webgl-bar-chart-fast-viewport": MonitorWebglBarChartFastViewport;
        "monitor-webgl-bar-chart-margin": MonitorWebglBarChartMargin;
        "monitor-webgl-bar-chart-negative": MonitorWebglBarChartNegative;
        "monitor-webgl-bar-chart-positive-negative": MonitorWebglBarChartPositiveNegative;
        "monitor-webgl-bar-chart-standard": MonitorWebglBarChartStandard;
        "monitor-webgl-bar-chart-start-from-zero": MonitorWebglBarChartStartFromZero;
        "monitor-webgl-bar-chart-threshold-coloration": MonitorWebglBarChartThresholdColoration;
        "monitor-webgl-bar-chart-threshold-coloration-band": MonitorWebglBarChartThresholdColorationBand;
        "monitor-webgl-bar-chart-threshold-coloration-exact-point": MonitorWebglBarChartThresholdColorationExactPoint;
        "monitor-webgl-bar-chart-threshold-coloration-multiple-data-stream": MonitorWebglBarChartThresholdColorationMultipleDataStream;
        "monitor-webgl-bar-chart-threshold-coloration-multiple-thresholds": MonitorWebglBarChartThresholdColorationMultipleThresholds;
        "monitor-webgl-bar-chart-threshold-no-coloration": MonitorWebglBarChartThresholdNoColoration;
        "monitor-webgl-chart-annotations": MonitorWebglChartAnnotations;
        "monitor-webgl-chart-annotations-always-in-viewport": MonitorWebglChartAnnotationsAlwaysInViewport;
        "monitor-webgl-chart-axis": MonitorWebglChartAxis;
        "monitor-webgl-chart-dynamic-charts": MonitorWebglChartDynamicCharts;
        "monitor-webgl-chart-large-viewport": MonitorWebglChartLargeViewport;
        "monitor-webgl-chart-multi": MonitorWebglChartMulti;
        "monitor-webgl-chart-no-annotations": MonitorWebglChartNoAnnotations;
        "monitor-webgl-chart-standard": MonitorWebglChartStandard;
        "monitor-webgl-chart-standard-with-legend": MonitorWebglChartStandardWithLegend;
        "monitor-webgl-chart-standard-with-legend-on-right": MonitorWebglChartStandardWithLegendOnRight;
        "monitor-webgl-chart-threshold-coloration-band": MonitorWebglChartThresholdColorationBand;
        "monitor-webgl-chart-threshold-coloration-exact-point": MonitorWebglChartThresholdColorationExactPoint;
        "monitor-webgl-chart-threshold-coloration-multiple-data-stream": MonitorWebglChartThresholdColorationMultipleDataStream;
        "monitor-webgl-chart-threshold-coloration-multiple-thresholds": MonitorWebglChartThresholdColorationMultipleThresholds;
        "monitor-webgl-chart-threshold-coloration-split-half": MonitorWebglChartThresholdColorationSplitHalf;
        "monitor-webgl-chart-tooltip-with-multiple-data-streams": MonitorWebglChartTooltipWithMultipleDataStreams;
        "monitor-webgl-context": MonitorWebglContext;
        "monitor-webgl-line-chart-dynamic-buffer": MonitorWebglLineChartDynamicBuffer;
        "monitor-webgl-line-chart-dynamic-data": MonitorWebglLineChartDynamicData;
        "monitor-webgl-line-chart-dynamic-data-streams": MonitorWebglLineChartDynamicDataStreams;
        "monitor-widget-grid": MonitorWidgetGrid;
        "multiple-statuses": MultipleStatuses;
        "sc-app": ScApp;
        "sc-bar-chart": ScBarChart;
        "sc-box": ScBox;
        "sc-chart-icon": ScChartIcon;
        "sc-error-badge": ScErrorBadge;
        "sc-gesture-handler": ScGestureHandler;
        "sc-loading-spinner": ScLoadingSpinner;
        "sc-tooltip": ScTooltip;
        "sc-tooltip-row": ScTooltipRow;
        "sc-tooltip-rows": ScTooltipRows;
        "sc-webgl-axis": ScWebglAxis;
        "sc-webgl-base-chart": ScWebglBaseChart;
        "single-colored-status": SingleColoredStatus;
        "single-status": SingleStatus;
        "status-chart-dynamic-buffer": StatusChartDynamicBuffer;
        "status-chart-dynamic-data": StatusChartDynamicData;
        "status-chart-dynamic-data-streams": StatusChartDynamicDataStreams;
        "status-chart-fast-viewport": StatusChartFastViewport;
        "status-chart-margin": StatusChartMargin;
        "status-chart-multiple-data-streams": StatusChartMultipleDataStreams;
        "status-chart-raw-data": StatusChartRawData;
        "status-chart-standard": StatusChartStandard;
        "status-chart-threshold-coloration": StatusChartThresholdColoration;
        "status-chart-threshold-coloration-band": StatusChartThresholdColorationBand;
        "status-chart-threshold-coloration-exact-point": StatusChartThresholdColorationExactPoint;
        "status-chart-threshold-coloration-multiple-data-stream": StatusChartThresholdColorationMultipleDataStream;
        "status-chart-threshold-coloration-multiple-thresholds": StatusChartThresholdColorationMultipleThresholds;
        "status-chart-threshold-no-coloration": StatusChartThresholdNoColoration;
        "widget-test-route": WidgetTestRoute;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "line-chart-viewport-change": LocalJSX.LineChartViewportChange & JSXBase.HTMLAttributes<HTMLLineChartViewportChangeElement>;
            "monitor-angled-line-segment": LocalJSX.MonitorAngledLineSegment & JSXBase.HTMLAttributes<HTMLMonitorAngledLineSegmentElement>;
            "monitor-chart-y-range": LocalJSX.MonitorChartYRange & JSXBase.HTMLAttributes<HTMLMonitorChartYRangeElement>;
            "monitor-circle-point-shaders": LocalJSX.MonitorCirclePointShaders & JSXBase.HTMLAttributes<HTMLMonitorCirclePointShadersElement>;
            "monitor-data-stream-name": LocalJSX.MonitorDataStreamName & JSXBase.HTMLAttributes<HTMLMonitorDataStreamNameElement>;
            "monitor-expandable-input": LocalJSX.MonitorExpandableInput & JSXBase.HTMLAttributes<HTMLMonitorExpandableInputElement>;
            "monitor-expandable-input-standard": LocalJSX.MonitorExpandableInputStandard & JSXBase.HTMLAttributes<HTMLMonitorExpandableInputStandardElement>;
            "monitor-grid": LocalJSX.MonitorGrid & JSXBase.HTMLAttributes<HTMLMonitorGridElement>;
            "monitor-grid-tooltip": LocalJSX.MonitorGridTooltip & JSXBase.HTMLAttributes<HTMLMonitorGridTooltipElement>;
            "monitor-help-tooltip": LocalJSX.MonitorHelpTooltip & JSXBase.HTMLAttributes<HTMLMonitorHelpTooltipElement>;
            "monitor-kpi": LocalJSX.MonitorKpi & JSXBase.HTMLAttributes<HTMLMonitorKpiElement>;
            "monitor-kpi-base": LocalJSX.MonitorKpiBase & JSXBase.HTMLAttributes<HTMLMonitorKpiBaseElement>;
            "monitor-kpi-standard": LocalJSX.MonitorKpiStandard & JSXBase.HTMLAttributes<HTMLMonitorKpiStandardElement>;
            "monitor-legend": LocalJSX.MonitorLegend & JSXBase.HTMLAttributes<HTMLMonitorLegendElement>;
            "monitor-legend-row": LocalJSX.MonitorLegendRow & JSXBase.HTMLAttributes<HTMLMonitorLegendRowElement>;
            "monitor-line-chart": LocalJSX.MonitorLineChart & JSXBase.HTMLAttributes<HTMLMonitorLineChartElement>;
            "monitor-line-chart-colored-point": LocalJSX.MonitorLineChartColoredPoint & JSXBase.HTMLAttributes<HTMLMonitorLineChartColoredPointElement>;
            "monitor-line-chart-stream-data": LocalJSX.MonitorLineChartStreamData & JSXBase.HTMLAttributes<HTMLMonitorLineChartStreamDataElement>;
            "monitor-multiple-bars": LocalJSX.MonitorMultipleBars & JSXBase.HTMLAttributes<HTMLMonitorMultipleBarsElement>;
            "monitor-multiple-lines": LocalJSX.MonitorMultipleLines & JSXBase.HTMLAttributes<HTMLMonitorMultipleLinesElement>;
            "monitor-multiple-lines-overlapping": LocalJSX.MonitorMultipleLinesOverlapping & JSXBase.HTMLAttributes<HTMLMonitorMultipleLinesOverlappingElement>;
            "monitor-scatter-chart": LocalJSX.MonitorScatterChart & JSXBase.HTMLAttributes<HTMLMonitorScatterChartElement>;
            "monitor-scatter-chart-dynamic-data": LocalJSX.MonitorScatterChartDynamicData & JSXBase.HTMLAttributes<HTMLMonitorScatterChartDynamicDataElement>;
            "monitor-scatter-chart-threshold": LocalJSX.MonitorScatterChartThreshold & JSXBase.HTMLAttributes<HTMLMonitorScatterChartThresholdElement>;
            "monitor-scatter-chart-threshold-coloration-band": LocalJSX.MonitorScatterChartThresholdColorationBand & JSXBase.HTMLAttributes<HTMLMonitorScatterChartThresholdColorationBandElement>;
            "monitor-scatter-chart-threshold-coloration-exact-point": LocalJSX.MonitorScatterChartThresholdColorationExactPoint & JSXBase.HTMLAttributes<HTMLMonitorScatterChartThresholdColorationExactPointElement>;
            "monitor-scatter-chart-threshold-coloration-multiple-data-stream": LocalJSX.MonitorScatterChartThresholdColorationMultipleDataStream & JSXBase.HTMLAttributes<HTMLMonitorScatterChartThresholdColorationMultipleDataStreamElement>;
            "monitor-scatter-chart-threshold-coloration-multiple-thresholds": LocalJSX.MonitorScatterChartThresholdColorationMultipleThresholds & JSXBase.HTMLAttributes<HTMLMonitorScatterChartThresholdColorationMultipleThresholdsElement>;
            "monitor-scatter-chart-threshold-no-coloration": LocalJSX.MonitorScatterChartThresholdNoColoration & JSXBase.HTMLAttributes<HTMLMonitorScatterChartThresholdNoColorationElement>;
            "monitor-scatter-chart-tooltip-with-multiple-data-streams-and-trends": LocalJSX.MonitorScatterChartTooltipWithMultipleDataStreamsAndTrends & JSXBase.HTMLAttributes<HTMLMonitorScatterChartTooltipWithMultipleDataStreamsAndTrendsElement>;
            "monitor-scatter-chart-trend-line-color-configuration": LocalJSX.MonitorScatterChartTrendLineColorConfiguration & JSXBase.HTMLAttributes<HTMLMonitorScatterChartTrendLineColorConfigurationElement>;
            "monitor-scatter-chart-trend-line-with-legend": LocalJSX.MonitorScatterChartTrendLineWithLegend & JSXBase.HTMLAttributes<HTMLMonitorScatterChartTrendLineWithLegendElement>;
            "monitor-single-bar": LocalJSX.MonitorSingleBar & JSXBase.HTMLAttributes<HTMLMonitorSingleBarElement>;
            "monitor-single-colored-bar": LocalJSX.MonitorSingleColoredBar & JSXBase.HTMLAttributes<HTMLMonitorSingleColoredBarElement>;
            "monitor-size-provider": LocalJSX.MonitorSizeProvider & JSXBase.HTMLAttributes<HTMLMonitorSizeProviderElement>;
            "monitor-size-provider-standard": LocalJSX.MonitorSizeProviderStandard & JSXBase.HTMLAttributes<HTMLMonitorSizeProviderStandardElement>;
            "monitor-status-cell": LocalJSX.MonitorStatusCell & JSXBase.HTMLAttributes<HTMLMonitorStatusCellElement>;
            "monitor-status-chart": LocalJSX.MonitorStatusChart & JSXBase.HTMLAttributes<HTMLMonitorStatusChartElement>;
            "monitor-status-grid": LocalJSX.MonitorStatusGrid & JSXBase.HTMLAttributes<HTMLMonitorStatusGridElement>;
            "monitor-status-grid-standard": LocalJSX.MonitorStatusGridStandard & JSXBase.HTMLAttributes<HTMLMonitorStatusGridStandardElement>;
            "monitor-status-timeline-overlay": LocalJSX.MonitorStatusTimelineOverlay & JSXBase.HTMLAttributes<HTMLMonitorStatusTimelineOverlayElement>;
            "monitor-status-timeline-overlay-row": LocalJSX.MonitorStatusTimelineOverlayRow & JSXBase.HTMLAttributes<HTMLMonitorStatusTimelineOverlayRowElement>;
            "monitor-straight-line-segment": LocalJSX.MonitorStraightLineSegment & JSXBase.HTMLAttributes<HTMLMonitorStraightLineSegmentElement>;
            "monitor-straight-line-segment-colored": LocalJSX.MonitorStraightLineSegmentColored & JSXBase.HTMLAttributes<HTMLMonitorStraightLineSegmentColoredElement>;
            "monitor-table": LocalJSX.MonitorTable & JSXBase.HTMLAttributes<HTMLMonitorTableElement>;
            "monitor-table-base": LocalJSX.MonitorTableBase & JSXBase.HTMLAttributes<HTMLMonitorTableBaseElement>;
            "monitor-table-cell": LocalJSX.MonitorTableCell & JSXBase.HTMLAttributes<HTMLMonitorTableCellElement>;
            "monitor-threshold-legend": LocalJSX.MonitorThresholdLegend & JSXBase.HTMLAttributes<HTMLMonitorThresholdLegendElement>;
            "monitor-threshold-legend-row": LocalJSX.MonitorThresholdLegendRow & JSXBase.HTMLAttributes<HTMLMonitorThresholdLegendRowElement>;
            "monitor-webgl-bar-chart-dynamic-buffer": LocalJSX.MonitorWebglBarChartDynamicBuffer & JSXBase.HTMLAttributes<HTMLMonitorWebglBarChartDynamicBufferElement>;
            "monitor-webgl-bar-chart-dynamic-data": LocalJSX.MonitorWebglBarChartDynamicData & JSXBase.HTMLAttributes<HTMLMonitorWebglBarChartDynamicDataElement>;
            "monitor-webgl-bar-chart-dynamic-data-streams": LocalJSX.MonitorWebglBarChartDynamicDataStreams & JSXBase.HTMLAttributes<HTMLMonitorWebglBarChartDynamicDataStreamsElement>;
            "monitor-webgl-bar-chart-fast-viewport": LocalJSX.MonitorWebglBarChartFastViewport & JSXBase.HTMLAttributes<HTMLMonitorWebglBarChartFastViewportElement>;
            "monitor-webgl-bar-chart-margin": LocalJSX.MonitorWebglBarChartMargin & JSXBase.HTMLAttributes<HTMLMonitorWebglBarChartMarginElement>;
            "monitor-webgl-bar-chart-negative": LocalJSX.MonitorWebglBarChartNegative & JSXBase.HTMLAttributes<HTMLMonitorWebglBarChartNegativeElement>;
            "monitor-webgl-bar-chart-positive-negative": LocalJSX.MonitorWebglBarChartPositiveNegative & JSXBase.HTMLAttributes<HTMLMonitorWebglBarChartPositiveNegativeElement>;
            "monitor-webgl-bar-chart-standard": LocalJSX.MonitorWebglBarChartStandard & JSXBase.HTMLAttributes<HTMLMonitorWebglBarChartStandardElement>;
            "monitor-webgl-bar-chart-start-from-zero": LocalJSX.MonitorWebglBarChartStartFromZero & JSXBase.HTMLAttributes<HTMLMonitorWebglBarChartStartFromZeroElement>;
            "monitor-webgl-bar-chart-threshold-coloration": LocalJSX.MonitorWebglBarChartThresholdColoration & JSXBase.HTMLAttributes<HTMLMonitorWebglBarChartThresholdColorationElement>;
            "monitor-webgl-bar-chart-threshold-coloration-band": LocalJSX.MonitorWebglBarChartThresholdColorationBand & JSXBase.HTMLAttributes<HTMLMonitorWebglBarChartThresholdColorationBandElement>;
            "monitor-webgl-bar-chart-threshold-coloration-exact-point": LocalJSX.MonitorWebglBarChartThresholdColorationExactPoint & JSXBase.HTMLAttributes<HTMLMonitorWebglBarChartThresholdColorationExactPointElement>;
            "monitor-webgl-bar-chart-threshold-coloration-multiple-data-stream": LocalJSX.MonitorWebglBarChartThresholdColorationMultipleDataStream & JSXBase.HTMLAttributes<HTMLMonitorWebglBarChartThresholdColorationMultipleDataStreamElement>;
            "monitor-webgl-bar-chart-threshold-coloration-multiple-thresholds": LocalJSX.MonitorWebglBarChartThresholdColorationMultipleThresholds & JSXBase.HTMLAttributes<HTMLMonitorWebglBarChartThresholdColorationMultipleThresholdsElement>;
            "monitor-webgl-bar-chart-threshold-no-coloration": LocalJSX.MonitorWebglBarChartThresholdNoColoration & JSXBase.HTMLAttributes<HTMLMonitorWebglBarChartThresholdNoColorationElement>;
            "monitor-webgl-chart-annotations": LocalJSX.MonitorWebglChartAnnotations & JSXBase.HTMLAttributes<HTMLMonitorWebglChartAnnotationsElement>;
            "monitor-webgl-chart-annotations-always-in-viewport": LocalJSX.MonitorWebglChartAnnotationsAlwaysInViewport & JSXBase.HTMLAttributes<HTMLMonitorWebglChartAnnotationsAlwaysInViewportElement>;
            "monitor-webgl-chart-axis": LocalJSX.MonitorWebglChartAxis & JSXBase.HTMLAttributes<HTMLMonitorWebglChartAxisElement>;
            "monitor-webgl-chart-dynamic-charts": LocalJSX.MonitorWebglChartDynamicCharts & JSXBase.HTMLAttributes<HTMLMonitorWebglChartDynamicChartsElement>;
            "monitor-webgl-chart-large-viewport": LocalJSX.MonitorWebglChartLargeViewport & JSXBase.HTMLAttributes<HTMLMonitorWebglChartLargeViewportElement>;
            "monitor-webgl-chart-multi": LocalJSX.MonitorWebglChartMulti & JSXBase.HTMLAttributes<HTMLMonitorWebglChartMultiElement>;
            "monitor-webgl-chart-no-annotations": LocalJSX.MonitorWebglChartNoAnnotations & JSXBase.HTMLAttributes<HTMLMonitorWebglChartNoAnnotationsElement>;
            "monitor-webgl-chart-standard": LocalJSX.MonitorWebglChartStandard & JSXBase.HTMLAttributes<HTMLMonitorWebglChartStandardElement>;
            "monitor-webgl-chart-standard-with-legend": LocalJSX.MonitorWebglChartStandardWithLegend & JSXBase.HTMLAttributes<HTMLMonitorWebglChartStandardWithLegendElement>;
            "monitor-webgl-chart-standard-with-legend-on-right": LocalJSX.MonitorWebglChartStandardWithLegendOnRight & JSXBase.HTMLAttributes<HTMLMonitorWebglChartStandardWithLegendOnRightElement>;
            "monitor-webgl-chart-threshold-coloration-band": LocalJSX.MonitorWebglChartThresholdColorationBand & JSXBase.HTMLAttributes<HTMLMonitorWebglChartThresholdColorationBandElement>;
            "monitor-webgl-chart-threshold-coloration-exact-point": LocalJSX.MonitorWebglChartThresholdColorationExactPoint & JSXBase.HTMLAttributes<HTMLMonitorWebglChartThresholdColorationExactPointElement>;
            "monitor-webgl-chart-threshold-coloration-multiple-data-stream": LocalJSX.MonitorWebglChartThresholdColorationMultipleDataStream & JSXBase.HTMLAttributes<HTMLMonitorWebglChartThresholdColorationMultipleDataStreamElement>;
            "monitor-webgl-chart-threshold-coloration-multiple-thresholds": LocalJSX.MonitorWebglChartThresholdColorationMultipleThresholds & JSXBase.HTMLAttributes<HTMLMonitorWebglChartThresholdColorationMultipleThresholdsElement>;
            "monitor-webgl-chart-threshold-coloration-split-half": LocalJSX.MonitorWebglChartThresholdColorationSplitHalf & JSXBase.HTMLAttributes<HTMLMonitorWebglChartThresholdColorationSplitHalfElement>;
            "monitor-webgl-chart-tooltip-with-multiple-data-streams": LocalJSX.MonitorWebglChartTooltipWithMultipleDataStreams & JSXBase.HTMLAttributes<HTMLMonitorWebglChartTooltipWithMultipleDataStreamsElement>;
            "monitor-webgl-context": LocalJSX.MonitorWebglContext & JSXBase.HTMLAttributes<HTMLMonitorWebglContextElement>;
            "monitor-webgl-line-chart-dynamic-buffer": LocalJSX.MonitorWebglLineChartDynamicBuffer & JSXBase.HTMLAttributes<HTMLMonitorWebglLineChartDynamicBufferElement>;
            "monitor-webgl-line-chart-dynamic-data": LocalJSX.MonitorWebglLineChartDynamicData & JSXBase.HTMLAttributes<HTMLMonitorWebglLineChartDynamicDataElement>;
            "monitor-webgl-line-chart-dynamic-data-streams": LocalJSX.MonitorWebglLineChartDynamicDataStreams & JSXBase.HTMLAttributes<HTMLMonitorWebglLineChartDynamicDataStreamsElement>;
            "monitor-widget-grid": LocalJSX.MonitorWidgetGrid & JSXBase.HTMLAttributes<HTMLMonitorWidgetGridElement>;
            "multiple-statuses": LocalJSX.MultipleStatuses & JSXBase.HTMLAttributes<HTMLMultipleStatusesElement>;
            "sc-app": LocalJSX.ScApp & JSXBase.HTMLAttributes<HTMLScAppElement>;
            "sc-bar-chart": LocalJSX.ScBarChart & JSXBase.HTMLAttributes<HTMLScBarChartElement>;
            "sc-box": LocalJSX.ScBox & JSXBase.HTMLAttributes<HTMLScBoxElement>;
            "sc-chart-icon": LocalJSX.ScChartIcon & JSXBase.HTMLAttributes<HTMLScChartIconElement>;
            "sc-error-badge": LocalJSX.ScErrorBadge & JSXBase.HTMLAttributes<HTMLScErrorBadgeElement>;
            "sc-gesture-handler": LocalJSX.ScGestureHandler & JSXBase.HTMLAttributes<HTMLScGestureHandlerElement>;
            "sc-loading-spinner": LocalJSX.ScLoadingSpinner & JSXBase.HTMLAttributes<HTMLScLoadingSpinnerElement>;
            "sc-tooltip": LocalJSX.ScTooltip & JSXBase.HTMLAttributes<HTMLScTooltipElement>;
            "sc-tooltip-row": LocalJSX.ScTooltipRow & JSXBase.HTMLAttributes<HTMLScTooltipRowElement>;
            "sc-tooltip-rows": LocalJSX.ScTooltipRows & JSXBase.HTMLAttributes<HTMLScTooltipRowsElement>;
            "sc-webgl-axis": LocalJSX.ScWebglAxis & JSXBase.HTMLAttributes<HTMLScWebglAxisElement>;
            "sc-webgl-base-chart": LocalJSX.ScWebglBaseChart & JSXBase.HTMLAttributes<HTMLScWebglBaseChartElement>;
            "single-colored-status": LocalJSX.SingleColoredStatus & JSXBase.HTMLAttributes<HTMLSingleColoredStatusElement>;
            "single-status": LocalJSX.SingleStatus & JSXBase.HTMLAttributes<HTMLSingleStatusElement>;
            "status-chart-dynamic-buffer": LocalJSX.StatusChartDynamicBuffer & JSXBase.HTMLAttributes<HTMLStatusChartDynamicBufferElement>;
            "status-chart-dynamic-data": LocalJSX.StatusChartDynamicData & JSXBase.HTMLAttributes<HTMLStatusChartDynamicDataElement>;
            "status-chart-dynamic-data-streams": LocalJSX.StatusChartDynamicDataStreams & JSXBase.HTMLAttributes<HTMLStatusChartDynamicDataStreamsElement>;
            "status-chart-fast-viewport": LocalJSX.StatusChartFastViewport & JSXBase.HTMLAttributes<HTMLStatusChartFastViewportElement>;
            "status-chart-margin": LocalJSX.StatusChartMargin & JSXBase.HTMLAttributes<HTMLStatusChartMarginElement>;
            "status-chart-multiple-data-streams": LocalJSX.StatusChartMultipleDataStreams & JSXBase.HTMLAttributes<HTMLStatusChartMultipleDataStreamsElement>;
            "status-chart-raw-data": LocalJSX.StatusChartRawData & JSXBase.HTMLAttributes<HTMLStatusChartRawDataElement>;
            "status-chart-standard": LocalJSX.StatusChartStandard & JSXBase.HTMLAttributes<HTMLStatusChartStandardElement>;
            "status-chart-threshold-coloration": LocalJSX.StatusChartThresholdColoration & JSXBase.HTMLAttributes<HTMLStatusChartThresholdColorationElement>;
            "status-chart-threshold-coloration-band": LocalJSX.StatusChartThresholdColorationBand & JSXBase.HTMLAttributes<HTMLStatusChartThresholdColorationBandElement>;
            "status-chart-threshold-coloration-exact-point": LocalJSX.StatusChartThresholdColorationExactPoint & JSXBase.HTMLAttributes<HTMLStatusChartThresholdColorationExactPointElement>;
            "status-chart-threshold-coloration-multiple-data-stream": LocalJSX.StatusChartThresholdColorationMultipleDataStream & JSXBase.HTMLAttributes<HTMLStatusChartThresholdColorationMultipleDataStreamElement>;
            "status-chart-threshold-coloration-multiple-thresholds": LocalJSX.StatusChartThresholdColorationMultipleThresholds & JSXBase.HTMLAttributes<HTMLStatusChartThresholdColorationMultipleThresholdsElement>;
            "status-chart-threshold-no-coloration": LocalJSX.StatusChartThresholdNoColoration & JSXBase.HTMLAttributes<HTMLStatusChartThresholdNoColorationElement>;
            "widget-test-route": LocalJSX.WidgetTestRoute & JSXBase.HTMLAttributes<HTMLWidgetTestRouteElement>;
        }
    }
}
