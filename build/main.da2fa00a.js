/*! For license information please see main.da2fa00a.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{214:function(n,t,e){"use strict";e.r(t);var a=e(8);t.default=a.BarChart},215:function(n,t,e){"use strict";e.r(t);var a=e(8);t.default=a.KPI},216:function(n,t,e){"use strict";e.r(t);var a=e(8);t.default=a.LineChart},217:function(n,t,e){"use strict";e.r(t);var a=e(8);t.default=a.ScatterChart},218:function(n,t,e){"use strict";e.r(t);var a=e(8);t.default=a.StatusGrid},219:function(n,t,e){"use strict";e.r(t);var a=e(8);t.default=a.StatusTimeline},220:function(n,t,e){"use strict";e.r(t);var a=e(8);t.default=a.Table},234:function(n,t,e){"use strict";e(841);var a=e(0),s=e.n(a),o=e(235),i=e(8);e(848),t.a=function(n){var t=n.children,e=t.length>0;return s.a.createElement("div",{className:"section"},s.a.createElement(o.a,null,t),e&&s.a.createElement(i.WebglContext,null))}},243:function(n,t,e){n.exports=e(899)},42:function(n,t,e){"use strict";e.d(t,"c",(function(){return a})),e.d(t,"b",(function(){return s})),e.d(t,"a",(function(){return o}));var a=1e3,s=60*a,o=60*s*24},426:function(n,t,e){var a={"./Binary_Property/ASCII.js":427,"./Binary_Property/ASCII_Hex_Digit.js":428,"./Binary_Property/Alphabetic.js":429,"./Binary_Property/Any.js":430,"./Binary_Property/Assigned.js":431,"./Binary_Property/Bidi_Control.js":432,"./Binary_Property/Bidi_Mirrored.js":433,"./Binary_Property/Case_Ignorable.js":434,"./Binary_Property/Cased.js":435,"./Binary_Property/Changes_When_Casefolded.js":436,"./Binary_Property/Changes_When_Casemapped.js":437,"./Binary_Property/Changes_When_Lowercased.js":438,"./Binary_Property/Changes_When_NFKC_Casefolded.js":439,"./Binary_Property/Changes_When_Titlecased.js":440,"./Binary_Property/Changes_When_Uppercased.js":441,"./Binary_Property/Dash.js":442,"./Binary_Property/Default_Ignorable_Code_Point.js":443,"./Binary_Property/Deprecated.js":444,"./Binary_Property/Diacritic.js":445,"./Binary_Property/Emoji.js":446,"./Binary_Property/Emoji_Component.js":447,"./Binary_Property/Emoji_Modifier.js":448,"./Binary_Property/Emoji_Modifier_Base.js":449,"./Binary_Property/Emoji_Presentation.js":450,"./Binary_Property/Extended_Pictographic.js":451,"./Binary_Property/Extender.js":452,"./Binary_Property/Grapheme_Base.js":453,"./Binary_Property/Grapheme_Extend.js":454,"./Binary_Property/Hex_Digit.js":455,"./Binary_Property/IDS_Binary_Operator.js":456,"./Binary_Property/IDS_Trinary_Operator.js":457,"./Binary_Property/ID_Continue.js":458,"./Binary_Property/ID_Start.js":459,"./Binary_Property/Ideographic.js":460,"./Binary_Property/Join_Control.js":461,"./Binary_Property/Logical_Order_Exception.js":462,"./Binary_Property/Lowercase.js":463,"./Binary_Property/Math.js":464,"./Binary_Property/Noncharacter_Code_Point.js":465,"./Binary_Property/Pattern_Syntax.js":466,"./Binary_Property/Pattern_White_Space.js":467,"./Binary_Property/Quotation_Mark.js":468,"./Binary_Property/Radical.js":469,"./Binary_Property/Regional_Indicator.js":470,"./Binary_Property/Sentence_Terminal.js":471,"./Binary_Property/Soft_Dotted.js":472,"./Binary_Property/Terminal_Punctuation.js":473,"./Binary_Property/Unified_Ideograph.js":474,"./Binary_Property/Uppercase.js":475,"./Binary_Property/Variation_Selector.js":476,"./Binary_Property/White_Space.js":477,"./Binary_Property/XID_Continue.js":478,"./Binary_Property/XID_Start.js":479,"./General_Category/Cased_Letter.js":480,"./General_Category/Close_Punctuation.js":481,"./General_Category/Connector_Punctuation.js":482,"./General_Category/Control.js":483,"./General_Category/Currency_Symbol.js":484,"./General_Category/Dash_Punctuation.js":485,"./General_Category/Decimal_Number.js":486,"./General_Category/Enclosing_Mark.js":487,"./General_Category/Final_Punctuation.js":488,"./General_Category/Format.js":489,"./General_Category/Initial_Punctuation.js":490,"./General_Category/Letter.js":491,"./General_Category/Letter_Number.js":492,"./General_Category/Line_Separator.js":493,"./General_Category/Lowercase_Letter.js":494,"./General_Category/Mark.js":495,"./General_Category/Math_Symbol.js":496,"./General_Category/Modifier_Letter.js":497,"./General_Category/Modifier_Symbol.js":498,"./General_Category/Nonspacing_Mark.js":499,"./General_Category/Number.js":500,"./General_Category/Open_Punctuation.js":501,"./General_Category/Other.js":502,"./General_Category/Other_Letter.js":503,"./General_Category/Other_Number.js":504,"./General_Category/Other_Punctuation.js":505,"./General_Category/Other_Symbol.js":506,"./General_Category/Paragraph_Separator.js":507,"./General_Category/Private_Use.js":508,"./General_Category/Punctuation.js":509,"./General_Category/Separator.js":510,"./General_Category/Space_Separator.js":511,"./General_Category/Spacing_Mark.js":512,"./General_Category/Surrogate.js":513,"./General_Category/Symbol.js":514,"./General_Category/Titlecase_Letter.js":515,"./General_Category/Unassigned.js":516,"./General_Category/Uppercase_Letter.js":517,"./Script/Adlam.js":518,"./Script/Ahom.js":519,"./Script/Anatolian_Hieroglyphs.js":520,"./Script/Arabic.js":521,"./Script/Armenian.js":522,"./Script/Avestan.js":523,"./Script/Balinese.js":524,"./Script/Bamum.js":525,"./Script/Bassa_Vah.js":526,"./Script/Batak.js":527,"./Script/Bengali.js":528,"./Script/Bhaiksuki.js":529,"./Script/Bopomofo.js":530,"./Script/Brahmi.js":531,"./Script/Braille.js":532,"./Script/Buginese.js":533,"./Script/Buhid.js":534,"./Script/Canadian_Aboriginal.js":535,"./Script/Carian.js":536,"./Script/Caucasian_Albanian.js":537,"./Script/Chakma.js":538,"./Script/Cham.js":539,"./Script/Cherokee.js":540,"./Script/Chorasmian.js":541,"./Script/Common.js":542,"./Script/Coptic.js":543,"./Script/Cuneiform.js":544,"./Script/Cypriot.js":545,"./Script/Cyrillic.js":546,"./Script/Deseret.js":547,"./Script/Devanagari.js":548,"./Script/Dives_Akuru.js":549,"./Script/Dogra.js":550,"./Script/Duployan.js":551,"./Script/Egyptian_Hieroglyphs.js":552,"./Script/Elbasan.js":553,"./Script/Elymaic.js":554,"./Script/Ethiopic.js":555,"./Script/Georgian.js":556,"./Script/Glagolitic.js":557,"./Script/Gothic.js":558,"./Script/Grantha.js":559,"./Script/Greek.js":560,"./Script/Gujarati.js":561,"./Script/Gunjala_Gondi.js":562,"./Script/Gurmukhi.js":563,"./Script/Han.js":564,"./Script/Hangul.js":565,"./Script/Hanifi_Rohingya.js":566,"./Script/Hanunoo.js":567,"./Script/Hatran.js":568,"./Script/Hebrew.js":569,"./Script/Hiragana.js":570,"./Script/Imperial_Aramaic.js":571,"./Script/Inherited.js":572,"./Script/Inscriptional_Pahlavi.js":573,"./Script/Inscriptional_Parthian.js":574,"./Script/Javanese.js":575,"./Script/Kaithi.js":576,"./Script/Kannada.js":577,"./Script/Katakana.js":578,"./Script/Kayah_Li.js":579,"./Script/Kharoshthi.js":580,"./Script/Khitan_Small_Script.js":581,"./Script/Khmer.js":582,"./Script/Khojki.js":583,"./Script/Khudawadi.js":584,"./Script/Lao.js":585,"./Script/Latin.js":586,"./Script/Lepcha.js":587,"./Script/Limbu.js":588,"./Script/Linear_A.js":589,"./Script/Linear_B.js":590,"./Script/Lisu.js":591,"./Script/Lycian.js":592,"./Script/Lydian.js":593,"./Script/Mahajani.js":594,"./Script/Makasar.js":595,"./Script/Malayalam.js":596,"./Script/Mandaic.js":597,"./Script/Manichaean.js":598,"./Script/Marchen.js":599,"./Script/Masaram_Gondi.js":600,"./Script/Medefaidrin.js":601,"./Script/Meetei_Mayek.js":602,"./Script/Mende_Kikakui.js":603,"./Script/Meroitic_Cursive.js":604,"./Script/Meroitic_Hieroglyphs.js":605,"./Script/Miao.js":606,"./Script/Modi.js":607,"./Script/Mongolian.js":608,"./Script/Mro.js":609,"./Script/Multani.js":610,"./Script/Myanmar.js":611,"./Script/Nabataean.js":612,"./Script/Nandinagari.js":613,"./Script/New_Tai_Lue.js":614,"./Script/Newa.js":615,"./Script/Nko.js":616,"./Script/Nushu.js":617,"./Script/Nyiakeng_Puachue_Hmong.js":618,"./Script/Ogham.js":619,"./Script/Ol_Chiki.js":620,"./Script/Old_Hungarian.js":621,"./Script/Old_Italic.js":622,"./Script/Old_North_Arabian.js":623,"./Script/Old_Permic.js":624,"./Script/Old_Persian.js":625,"./Script/Old_Sogdian.js":626,"./Script/Old_South_Arabian.js":627,"./Script/Old_Turkic.js":628,"./Script/Oriya.js":629,"./Script/Osage.js":630,"./Script/Osmanya.js":631,"./Script/Pahawh_Hmong.js":632,"./Script/Palmyrene.js":633,"./Script/Pau_Cin_Hau.js":634,"./Script/Phags_Pa.js":635,"./Script/Phoenician.js":636,"./Script/Psalter_Pahlavi.js":637,"./Script/Rejang.js":638,"./Script/Runic.js":639,"./Script/Samaritan.js":640,"./Script/Saurashtra.js":641,"./Script/Sharada.js":642,"./Script/Shavian.js":643,"./Script/Siddham.js":644,"./Script/SignWriting.js":645,"./Script/Sinhala.js":646,"./Script/Sogdian.js":647,"./Script/Sora_Sompeng.js":648,"./Script/Soyombo.js":649,"./Script/Sundanese.js":650,"./Script/Syloti_Nagri.js":651,"./Script/Syriac.js":652,"./Script/Tagalog.js":653,"./Script/Tagbanwa.js":654,"./Script/Tai_Le.js":655,"./Script/Tai_Tham.js":656,"./Script/Tai_Viet.js":657,"./Script/Takri.js":658,"./Script/Tamil.js":659,"./Script/Tangut.js":660,"./Script/Telugu.js":661,"./Script/Thaana.js":662,"./Script/Thai.js":663,"./Script/Tibetan.js":664,"./Script/Tifinagh.js":665,"./Script/Tirhuta.js":666,"./Script/Ugaritic.js":667,"./Script/Vai.js":668,"./Script/Wancho.js":669,"./Script/Warang_Citi.js":670,"./Script/Yezidi.js":671,"./Script/Yi.js":672,"./Script/Zanabazar_Square.js":673,"./Script_Extensions/Adlam.js":674,"./Script_Extensions/Ahom.js":675,"./Script_Extensions/Anatolian_Hieroglyphs.js":676,"./Script_Extensions/Arabic.js":677,"./Script_Extensions/Armenian.js":678,"./Script_Extensions/Avestan.js":679,"./Script_Extensions/Balinese.js":680,"./Script_Extensions/Bamum.js":681,"./Script_Extensions/Bassa_Vah.js":682,"./Script_Extensions/Batak.js":683,"./Script_Extensions/Bengali.js":684,"./Script_Extensions/Bhaiksuki.js":685,"./Script_Extensions/Bopomofo.js":686,"./Script_Extensions/Brahmi.js":687,"./Script_Extensions/Braille.js":688,"./Script_Extensions/Buginese.js":689,"./Script_Extensions/Buhid.js":690,"./Script_Extensions/Canadian_Aboriginal.js":691,"./Script_Extensions/Carian.js":692,"./Script_Extensions/Caucasian_Albanian.js":693,"./Script_Extensions/Chakma.js":694,"./Script_Extensions/Cham.js":695,"./Script_Extensions/Cherokee.js":696,"./Script_Extensions/Chorasmian.js":697,"./Script_Extensions/Common.js":698,"./Script_Extensions/Coptic.js":699,"./Script_Extensions/Cuneiform.js":700,"./Script_Extensions/Cypriot.js":701,"./Script_Extensions/Cyrillic.js":702,"./Script_Extensions/Deseret.js":703,"./Script_Extensions/Devanagari.js":704,"./Script_Extensions/Dives_Akuru.js":705,"./Script_Extensions/Dogra.js":706,"./Script_Extensions/Duployan.js":707,"./Script_Extensions/Egyptian_Hieroglyphs.js":708,"./Script_Extensions/Elbasan.js":709,"./Script_Extensions/Elymaic.js":710,"./Script_Extensions/Ethiopic.js":711,"./Script_Extensions/Georgian.js":712,"./Script_Extensions/Glagolitic.js":713,"./Script_Extensions/Gothic.js":714,"./Script_Extensions/Grantha.js":715,"./Script_Extensions/Greek.js":716,"./Script_Extensions/Gujarati.js":717,"./Script_Extensions/Gunjala_Gondi.js":718,"./Script_Extensions/Gurmukhi.js":719,"./Script_Extensions/Han.js":720,"./Script_Extensions/Hangul.js":721,"./Script_Extensions/Hanifi_Rohingya.js":722,"./Script_Extensions/Hanunoo.js":723,"./Script_Extensions/Hatran.js":724,"./Script_Extensions/Hebrew.js":725,"./Script_Extensions/Hiragana.js":726,"./Script_Extensions/Imperial_Aramaic.js":727,"./Script_Extensions/Inherited.js":728,"./Script_Extensions/Inscriptional_Pahlavi.js":729,"./Script_Extensions/Inscriptional_Parthian.js":730,"./Script_Extensions/Javanese.js":731,"./Script_Extensions/Kaithi.js":732,"./Script_Extensions/Kannada.js":733,"./Script_Extensions/Katakana.js":734,"./Script_Extensions/Kayah_Li.js":735,"./Script_Extensions/Kharoshthi.js":736,"./Script_Extensions/Khitan_Small_Script.js":737,"./Script_Extensions/Khmer.js":738,"./Script_Extensions/Khojki.js":739,"./Script_Extensions/Khudawadi.js":740,"./Script_Extensions/Lao.js":741,"./Script_Extensions/Latin.js":742,"./Script_Extensions/Lepcha.js":743,"./Script_Extensions/Limbu.js":744,"./Script_Extensions/Linear_A.js":745,"./Script_Extensions/Linear_B.js":746,"./Script_Extensions/Lisu.js":747,"./Script_Extensions/Lycian.js":748,"./Script_Extensions/Lydian.js":749,"./Script_Extensions/Mahajani.js":750,"./Script_Extensions/Makasar.js":751,"./Script_Extensions/Malayalam.js":752,"./Script_Extensions/Mandaic.js":753,"./Script_Extensions/Manichaean.js":754,"./Script_Extensions/Marchen.js":755,"./Script_Extensions/Masaram_Gondi.js":756,"./Script_Extensions/Medefaidrin.js":757,"./Script_Extensions/Meetei_Mayek.js":758,"./Script_Extensions/Mende_Kikakui.js":759,"./Script_Extensions/Meroitic_Cursive.js":760,"./Script_Extensions/Meroitic_Hieroglyphs.js":761,"./Script_Extensions/Miao.js":762,"./Script_Extensions/Modi.js":763,"./Script_Extensions/Mongolian.js":764,"./Script_Extensions/Mro.js":765,"./Script_Extensions/Multani.js":766,"./Script_Extensions/Myanmar.js":767,"./Script_Extensions/Nabataean.js":768,"./Script_Extensions/Nandinagari.js":769,"./Script_Extensions/New_Tai_Lue.js":770,"./Script_Extensions/Newa.js":771,"./Script_Extensions/Nko.js":772,"./Script_Extensions/Nushu.js":773,"./Script_Extensions/Nyiakeng_Puachue_Hmong.js":774,"./Script_Extensions/Ogham.js":775,"./Script_Extensions/Ol_Chiki.js":776,"./Script_Extensions/Old_Hungarian.js":777,"./Script_Extensions/Old_Italic.js":778,"./Script_Extensions/Old_North_Arabian.js":779,"./Script_Extensions/Old_Permic.js":780,"./Script_Extensions/Old_Persian.js":781,"./Script_Extensions/Old_Sogdian.js":782,"./Script_Extensions/Old_South_Arabian.js":783,"./Script_Extensions/Old_Turkic.js":784,"./Script_Extensions/Oriya.js":785,"./Script_Extensions/Osage.js":786,"./Script_Extensions/Osmanya.js":787,"./Script_Extensions/Pahawh_Hmong.js":788,"./Script_Extensions/Palmyrene.js":789,"./Script_Extensions/Pau_Cin_Hau.js":790,"./Script_Extensions/Phags_Pa.js":791,"./Script_Extensions/Phoenician.js":792,"./Script_Extensions/Psalter_Pahlavi.js":793,"./Script_Extensions/Rejang.js":794,"./Script_Extensions/Runic.js":795,"./Script_Extensions/Samaritan.js":796,"./Script_Extensions/Saurashtra.js":797,"./Script_Extensions/Sharada.js":798,"./Script_Extensions/Shavian.js":799,"./Script_Extensions/Siddham.js":800,"./Script_Extensions/SignWriting.js":801,"./Script_Extensions/Sinhala.js":802,"./Script_Extensions/Sogdian.js":803,"./Script_Extensions/Sora_Sompeng.js":804,"./Script_Extensions/Soyombo.js":805,"./Script_Extensions/Sundanese.js":806,"./Script_Extensions/Syloti_Nagri.js":807,"./Script_Extensions/Syriac.js":808,"./Script_Extensions/Tagalog.js":809,"./Script_Extensions/Tagbanwa.js":810,"./Script_Extensions/Tai_Le.js":811,"./Script_Extensions/Tai_Tham.js":812,"./Script_Extensions/Tai_Viet.js":813,"./Script_Extensions/Takri.js":814,"./Script_Extensions/Tamil.js":815,"./Script_Extensions/Tangut.js":816,"./Script_Extensions/Telugu.js":817,"./Script_Extensions/Thaana.js":818,"./Script_Extensions/Thai.js":819,"./Script_Extensions/Tibetan.js":820,"./Script_Extensions/Tifinagh.js":821,"./Script_Extensions/Tirhuta.js":822,"./Script_Extensions/Ugaritic.js":823,"./Script_Extensions/Vai.js":824,"./Script_Extensions/Wancho.js":825,"./Script_Extensions/Warang_Citi.js":826,"./Script_Extensions/Yezidi.js":827,"./Script_Extensions/Yi.js":828,"./Script_Extensions/Zanabazar_Square.js":829,"./index.js":830,"./unicode-version.js":831};function s(n){var t=o(n);return e(t)}function o(n){if(!e.o(a,n)){var t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}return a[n]}s.keys=function(){return Object.keys(a)},s.resolve=o,n.exports=s,s.id=426},8:function(n,t,e){"use strict";e.r(t),e.d(t,"LineChart",(function(){return g})),e.d(t,"ScatterChart",(function(){return y})),e.d(t,"BarChart",(function(){return w})),e.d(t,"KPI",(function(){return T})),e.d(t,"StatusGrid",(function(){return f})),e.d(t,"StatusTimeline",(function(){return S})),e.d(t,"Table",(function(){return k})),e.d(t,"WebglContext",(function(){return v}));var a=e(47),s=e(48),o=e(50),i=e(49),r=e(33),c=e.n(r);function p(n,t,e){var a=u(n),s=u(t.className?t.className.split(" "):[]),o=u(e.className?e.className.split(" "):[]),i=[];return a.forEach((function(n){s.has(n)?(i.push(n),s.delete(n)):o.has(n)||i.push(n)})),s.forEach((function(n){return i.push(n)})),i.join(" ")}function l(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:document,e="on"+n,a=e in t;if(!a){var s=t.createElement("div");s.setAttribute(e,"return;"),a="function"==typeof s[e]}return a}function d(n,t,e){var a=n.__events||(n.__events={}),s=a[t];s&&n.removeEventListener(t,s),null!=e&&n.addEventListener(t,a[t]=function(n){e.call(this,n)})}function u(n){var t=new Map;return n.forEach((function(n){return t.set(n,n)})),t}var h=function(n){var t=function(n){return n.toLowerCase().split("-").map((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})).join("")}(n);return function(n,t){var e=function(t,e){return c.a.createElement(n,Object.assign({},t,{forwardedRef:e}))};return e.displayName=t,c.a.forwardRef(e)}(function(e){Object(o.a)(u,e);var r=Object(i.a)(u);function u(n){var t;return Object(a.a)(this,u),(t=r.call(this,n)).ref=c.a.createRef(),t}return Object(s.a)(u,[{key:"componentDidMount",value:function(){this.componentDidUpdate(this.props)}},{key:"componentDidUpdate",value:function(n){!function(n,t){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=p(n.classList,t,e);a&&(n.className=a),Object.keys(t).forEach((function(e){if("children"!==e&&"style"!==e&&"ref"!==e&&"className"!==e)if(0===e.indexOf("on")&&e[2]===e[2].toUpperCase()){var a=e.substring(2),s=a[0].toLowerCase()+a.substring(1);l(s)||d(n,s,t[e])}else n[e]=t[e]}))}(this.ref.current,this.props,n)}},{key:"render",value:function(){var t=this.props,e=t.children,a=(t.forwardedRef,t.style),s=t.className,o=(t.ref,function(n,t){var e={};for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&t.indexOf(a)<0&&(e[a]=n[a]);if(null!=n&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(a=Object.getOwnPropertySymbols(n);s<a.length;s++)t.indexOf(a[s])<0&&Object.prototype.propertyIsEnumerable.call(n,a[s])&&(e[a[s]]=n[a[s]])}return e}(t,["children","forwardedRef","style","className","ref"])),i=Object.keys(o).reduce((function(n,t){var e=0===t.indexOf("on")&&t[2]===t[2].toUpperCase(),a=0===t.indexOf("data-"),s=0===t.indexOf("aria-");if(e){var i=t.substring(2).toLowerCase();"undefined"!=typeof document&&l(i)&&(n[t]=o[t])}else(a||s)&&(n[t]=o[t]);return n}),{}),r=Object.assign(Object.assign({},i),{ref:this.ref,style:a,className:s});return c.a.createElement(n,r,e)}}],[{key:"displayName",get:function(){return t}}]),u}(c.a.Component),t)};e(63),e(34),e(69),e(236);var m=e(164);Object(m.a)().then((function(){return Object(m.b)()}));var g=h("sc-line-chart"),y=h("sc-scatter-chart"),w=h("sc-bar-chart"),T=h("sc-kpi"),f=h("sc-status-grid"),S=h("sc-status-timeline"),k=h("sc-table"),v=h("sc-webgl-context")},847:function(n,t,e){var a={"./context-consumer.entry.js":[902,102],"./line-chart-viewport-change.entry.js":[903,103],"./multiple-statuses.entry.js":[904,0,1,77],"./sc-angled-line-segment.entry.js":[905,0,1,50],"./sc-annotations-draggable-multi.entry.js":[906,104],"./sc-app_4.entry.js":[907,72],"./sc-bar-chart.entry.js":[908,0,21],"./sc-box.entry.js":[909,105],"./sc-chart-icon_15.entry.js":[910,0,2,48],"./sc-chart-y-range.entry.js":[911,58],"./sc-circle-point-shaders.entry.js":[912,0,1,51],"./sc-expandable-input-standard.entry.js":[913,106],"./sc-grid_4.entry.js":[914,0,2,89],"./sc-kpi-base.entry.js":[915,34],"./sc-kpi-standard.entry.js":[916,47],"./sc-kpi.entry.js":[917,25],"./sc-line-chart-colored-point.entry.js":[918,0,1,52],"./sc-line-chart-stream-data.entry.js":[919,59],"./sc-line-chart.entry.js":[920,0,9],"./sc-multiple-bars.entry.js":[921,0,1,74],"./sc-multiple-lines-overlapping.entry.js":[922,0,1,53],"./sc-multiple-lines.entry.js":[923,0,1,54],"./sc-scatter-chart-dynamic-data.entry.js":[924,27],"./sc-scatter-chart-threshold-coloration-band.entry.js":[925,35],"./sc-scatter-chart-threshold-coloration-exact-point.entry.js":[926,36],"./sc-scatter-chart-threshold-coloration-multiple-data-stream.entry.js":[927,37],"./sc-scatter-chart-threshold-coloration-multiple-thresholds.entry.js":[928,38],"./sc-scatter-chart-threshold-no-coloration.entry.js":[929,39],"./sc-scatter-chart-threshold.entry.js":[930,40],"./sc-scatter-chart-tooltip-with-multiple-data-streams-and-trends.entry.js":[931,93],"./sc-scatter-chart-trend-line-color-configuration.entry.js":[932,41],"./sc-scatter-chart-trend-line-with-legend.entry.js":[933,42],"./sc-scatter-chart.entry.js":[934,0,22],"./sc-single-bar.entry.js":[935,0,1,75],"./sc-single-colored-bar.entry.js":[936,0,1,76],"./sc-size-provider-standard.entry.js":[937,107],"./sc-status-cell.entry.js":[938,23],"./sc-status-grid-standard.entry.js":[939,32],"./sc-status-grid.entry.js":[940,108],"./sc-status-timeline_5.entry.js":[941,0,7],"./sc-straight-line-segment-colored.entry.js":[942,0,1,55],"./sc-straight-line-segment.entry.js":[943,0,1,56],"./sc-table-base.entry.js":[944,8],"./sc-table-cell.entry.js":[945,33],"./sc-table.entry.js":[946,0,26],"./sc-webgl-bar-chart-dynamic-buffer.entry.js":[947,60],"./sc-webgl-bar-chart-dynamic-data-streams.entry.js":[948,28],"./sc-webgl-bar-chart-dynamic-data.entry.js":[949,61],"./sc-webgl-bar-chart-fast-viewport.entry.js":[950,62],"./sc-webgl-bar-chart-margin.entry.js":[951,63],"./sc-webgl-bar-chart-negative.entry.js":[952,64],"./sc-webgl-bar-chart-positive-negative.entry.js":[953,65],"./sc-webgl-bar-chart-standard.entry.js":[954,10],"./sc-webgl-bar-chart-start-from-zero.entry.js":[955,66],"./sc-webgl-bar-chart-threshold-coloration-band.entry.js":[956,11],"./sc-webgl-bar-chart-threshold-coloration-exact-point.entry.js":[957,12],"./sc-webgl-bar-chart-threshold-coloration-multiple-data-stream.entry.js":[958,43],"./sc-webgl-bar-chart-threshold-coloration-multiple-thresholds.entry.js":[959,13],"./sc-webgl-bar-chart-threshold-coloration.entry.js":[960,14],"./sc-webgl-bar-chart-threshold-no-coloration.entry.js":[961,15],"./sc-webgl-chart-annotation-editable.entry.js":[962,82],"./sc-webgl-chart-annotations-always-in-viewport.entry.js":[963,94],"./sc-webgl-chart-annotations.entry.js":[964,95],"./sc-webgl-chart-axis.entry.js":[965,80],"./sc-webgl-chart-dynamic-charts.entry.js":[966,49],"./sc-webgl-chart-large-viewport.entry.js":[967,96],"./sc-webgl-chart-multi.entry.js":[968,97],"./sc-webgl-chart-no-annotations.entry.js":[969,81],"./sc-webgl-chart-standard-with-legend-on-right.entry.js":[970,83],"./sc-webgl-chart-standard-with-legend.entry.js":[971,84],"./sc-webgl-chart-standard.entry.js":[972,98],"./sc-webgl-chart-threshold-coloration-band.entry.js":[973,85],"./sc-webgl-chart-threshold-coloration-exact-point.entry.js":[974,44],"./sc-webgl-chart-threshold-coloration-multiple-data-stream.entry.js":[975,86],"./sc-webgl-chart-threshold-coloration-multiple-thresholds.entry.js":[976,87],"./sc-webgl-chart-threshold-coloration-split-half.entry.js":[977,88],"./sc-webgl-chart-tooltip-with-multiple-data-streams.entry.js":[978,99],"./sc-webgl-line-chart-dynamic-buffer.entry.js":[979,100],"./sc-webgl-line-chart-dynamic-data-streams.entry.js":[980,29],"./sc-webgl-line-chart-dynamic-data.entry.js":[981,57],"./single-colored-status.entry.js":[982,0,1,78],"./single-status.entry.js":[983,0,1,79],"./status-timeline-dynamic-buffer.entry.js":[984,67],"./status-timeline-dynamic-data-streams.entry.js":[985,68],"./status-timeline-dynamic-data.entry.js":[986,69],"./status-timeline-fast-viewport.entry.js":[987,70],"./status-timeline-margin.entry.js":[988,71],"./status-timeline-multiple-data-streams.entry.js":[989,16],"./status-timeline-raw-data.entry.js":[990,45],"./status-timeline-standard.entry.js":[991,30],"./status-timeline-threshold-coloration-band.entry.js":[992,31],"./status-timeline-threshold-coloration-exact-point.entry.js":[993,17],"./status-timeline-threshold-coloration-multiple-data-stream.entry.js":[994,46],"./status-timeline-threshold-coloration-multiple-thresholds.entry.js":[995,18],"./status-timeline-threshold-coloration.entry.js":[996,19],"./status-timeline-threshold-no-coloration.entry.js":[997,20],"./stencil-async-content.entry.js":[998,110],"./stencil-route-link.entry.js":[999,73],"./stencil-route-title.entry.js":[1e3,90],"./stencil-router-prompt.entry.js":[1001,91],"./stencil-router-redirect.entry.js":[1002,92],"./widget-test-route.entry.js":[1003,24]};function s(n){if(!e.o(a,n))return Promise.resolve().then((function(){var t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}));var t=a[n],s=t[0];return Promise.all(t.slice(1).map(e.e)).then((function(){return e(s)}))}s.keys=function(){return Object.keys(a)},s.id=847,n.exports=s},848:function(n,t,e){},850:function(n,t,e){var a={"../src/components/chart-demo/LiveDemo":e(851),react:e(0)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s);n.exports=[{type:"markdown",content:"### What is Synchro Charts?\n\nSynchro Charts is a collection of time-series visualization components with a focus on operational use cases such as monitoring, root cause analysis, and basic analytics.\n\nSynchro Charts makes it easy to navigate a large amount of time-series data fluidly via intuitive gestures, synchronized across corresponding widgets.\n\nSynchro Charts has first class concepts of aggregation types, associated alarm status, allowing for an integrated experience when dealing with data which has corresponding status information.\n\nSynchro Charts is open sourced, you can contribute at [Synchro Charts Github](https://github.com/awslabs/aws-synchro-charts)."},{type:"code",content:"import {LiveDemo} from '../src/components/chart-demo/LiveDemo';\n\n<LiveDemo/>",settings:{},evalInContext:o},{type:"markdown",content:"Synchro Charts widget controls:\n\n*   **Pan**: hold **shift**, click and drag on any chart\n*   **Zoom In**: **double-click** on a position within a chart to zoom into that area.\n*   **Zoom Out**: hold **shift** and **double-click** on a position within a chart to zoom away from that area.\n*   **Restrict Time Span**: Click and drag through the interval of time you wish to restrict the viewport to."}]},851:function(n,t,e){"use strict";e.r(t),e.d(t,"y",(function(){return w})),e.d(t,"LiveDemo",(function(){return C}));var a=e(14),s=e(51),o=e(127),i=e(47),r=e(48),c=e(50),p=e(49),l=e(0),d=e.n(l),u=e(8),h=e(6),m=e(42),g=["#0073bb","#6b8ea5"],y=function(n){return Math.abs(n)>80?"ALERT":Math.abs(n)>60?"WARNING":"OK"},w=function(n,t,e){return n*Math.sin(2*Math.PI/t*e)},T=m.b,f=.5*m.b,S=m.c,k=Date.now()-50*m.b,v=Date.now()-k,x=Math.floor(v/S),b=new Array(x).fill(0).map((function(n,t){var e=k+t*S;return{x:e,y:w(100,f,e)}})),O=new Array(x).fill(0).map((function(n,t){var e=k+t*S;return{x:e,y:w(65,2*f,e)}})),E=[{id:"1",dataType:h.DataType.NUMBER,name:"Wind Mill",data:b,resolution:0,color:g[0]},{id:"2",name:"Engine",dataType:h.DataType.NUMBER,data:O,resolution:0,color:g[1]}],j=[{id:"1",streamType:h.StreamType.ALARM,dataType:h.DataType.STRING,name:"Wind Mill",data:b.map((function(n){var t=n.x,e=n.y;return{x:t,y:y(e)}})),resolution:0,color:g[0]},{id:"2",name:"Engine",streamType:h.StreamType.ALARM,dataType:h.DataType.STRING,data:O.map((function(n){var t=n.x,e=n.y;return{x:t,y:y(e)}})),resolution:0,color:g[1]}],_={y:[{color:"#d13212",value:-80,showValue:!0,label:"Alert",comparisonOperator:h.COMPARISON_OPERATOR.LESS_THAN_EQUAL},{color:"#ff9900",showValue:!0,value:-60,label:"Warning",comparisonOperator:h.COMPARISON_OPERATOR.LESS_THAN_EQUAL},{color:"#d13212",value:80,showValue:!0,label:"Alert",comparisonOperator:h.COMPARISON_OPERATOR.GREATER_THAN_EQUAL},{color:"#ff9900",value:60,showValue:!0,label:"Warning",comparisonOperator:h.COMPARISON_OPERATOR.GREATER_THAN_EQUAL}],thresholdOptions:{showColor:!0}},R={y:[{color:"#d13212",value:"ALERT",comparisonOperator:h.COMPARISON_OPERATOR.EQUAL},{color:"#ff9900",value:"WARNING",comparisonOperator:h.COMPARISON_OPERATOR.EQUAL},{color:"#1d8102",value:"OK",comparisonOperator:h.COMPARISON_OPERATOR.EQUAL}],thresholdOptions:{showColor:!0}},C=function(n){Object(c.a)(e,n);var t=Object(p.a)(e);function e(n){var r;return Object(i.a)(this,e),(r=t.call(this,n)).addDataPoints=function(n){var t=r.state,e=t.dataStreams,a=t.alarmStatusStreams,i=Object(o.a)(e,2),c=i[0],p=i[1],l=Object(o.a)(a,2),d=l[0],u=l[1],h=w(100,f,n),m=w(65,2*f,n);c.data=[].concat(Object(s.a)(c.data),[{x:n,y:h}]),p.data=[].concat(Object(s.a)(p.data),[{x:n,y:m}]),d.data=[].concat(Object(s.a)(d.data),[{x:n,y:y(h)}]),u.data=[].concat(Object(s.a)(u.data),[{x:n,y:y(m)}]),r.setState({dataStreams:[c,p],alarmStatusStreams:[d,u]})},r.onDateRangeChange=function(n){var t=Object(o.a)(n.detail,2),e=t[0],s=t[1];r.setState({isLiveMode:!1,viewport:Object(a.a)(Object(a.a)({},r.state.viewport),{},{start:e,end:s})})},r.liveDemoContainer=d.a.createRef(),r.state={dataStreams:E,alarmStatusStreams:j,isLiveMode:!0,viewport:{duration:T,group:"Live_demo"}},r}return Object(r.a)(e,[{key:"appendDataPointsPeriodically",value:function(){var n=this;setInterval((function(){n.addDataPoints(Date.now())}),S)}},{key:"componentDidMount",value:function(){this.appendDataPointsPeriodically(),this.liveDemoContainer.current.addEventListener("dateRangeChange",this.onDateRangeChange)}},{key:"componentWillUnmount",value:function(){this.liveDemoContainer.current.removeEventListener("dateRangeChange",this.onDateRangeChange)}},{key:"render",value:function(){var n=this.state,t=n.viewport,e=n.dataStreams,a=n.alarmStatusStreams;return d.a.createElement("div",{ref:this.liveDemoContainer},d.a.createElement("div",{style:{height:"250px",width:"100%"}},d.a.createElement(u.LineChart,{widgetId:"line-chart-1",viewport:t,dataStreams:e,annotations:_})),d.a.createElement("div",{style:{height:"250px",marginLeft:"40px",width:"calc(100% - 75px)"}},d.a.createElement(u.StatusTimeline,{widgetId:"status-timeline-1",viewport:t,dataStreams:a,annotations:R})))}}]),e}(d.a.Component)},852:function(n,t,e){var a={"../src/components/chart-demo/Demo":e(900),react:e(0)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s);n.exports=[{type:"code",content:"import { Demo } from '../src/components/chart-demo/Demo';\n\n<Demo />",settings:{},evalInContext:o},{type:"markdown",content:"Synchro Charts widget controls:\n\n*   **Pan**: hold **shift**, click and drag on any chart\n*   **Zoom In**: **double-click** on a position within a chart to zoom into that area.\n*   **Zoom Out**: hold **shift** and **double-click** on a position within a chart to zoom away from that area.\n*   **Restrict Time Span**: Click and drag through the interval of time you wish to restrict the viewport to."}]},866:function(n,t,e){},867:function(n,t,e){var a={react:e(0)},s=e(9).default.bind(null,a);e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s),n.exports=[{type:"markdown",content:'1.  Install to your project\n\n    To utilize as webcomponents\n\n    ```bash\n    <span class="token function">yarn</span> <span class="token function">add</span> @synchro-charts/core\n\n    <span class="token comment"># or with npm..</span>\n    <span class="token function">npm</span> <span class="token function">install</span> --save @synchro-charts/core\n    ```\n\n    For use within react,\n\n    ```bash\n    <span class="token function">yarn</span> <span class="token function">add</span> @synchro-charts/react\n\n    <span class="token comment"># or with npm..</span>\n    <span class="token function">npm</span> <span class="token function">install</span> --save @synchro-charts/react\n    ```\n\n2.  Initialize components if you are not using the react wrapper\n\n    ```js\n    <span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponents<span class="token punctuation">,</span> applyPolyfill <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@synchro-charts/core/dist/loader\'</span><span class="token punctuation">;</span>\n\n    <span class="token function">applyPolyfill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">defineComponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ```\n\n    If you are using the react wrapper, this step is not necessary.\n\n3.  Include a `<sc-webgl-context>`\n    Include the webgl context such that it\'s present where ever you utilize webgl based components (not required for all components)\n\n    ```jsx\n     <span class="token operator">...</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sc-webgl-context</span> <span class="token punctuation">/></span></span>\n     <span class="token operator">...</span>\n        \n    ```\n\n    Visit the [WebGL context documentation](https://synchrocharts.com//#/WebGL%20context) to learn more about how to set up the WebGL context.'}]},868:function(n,t,e){var a={react:e(0)},s=e(9).default.bind(null,a);e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s),n.exports=[{type:"markdown",content:'In order to utilize Synchro Chart components which use WebGL to render the data, we will need to correctly initialize the WebGL context.\n\n### Why?\n\nIn order to utilize WebGL, there must be a WebGL context initialized, which will allow you to render graphics onto a `canvas` element.\n\nHowever, there is a limit to the number of WebGL contexts which can be present within a browser. This limit can vary based on the browser utilized, but for Chrome that limit is 16.\nWhen more WebGL contexts are created than the browser supports, previously initialized WebGL contexts will disappear, causing the associated visualizations using that context to also disappear.\n\nIn order to prevent having a limit of the number of visualizations utilizing WebGL, we share a single WebGL instance across all visualizations.\n\nUnfortunately, this presents a couple of complications, since the WebGL context must exist outside the individual components, and the canvas associated with the\nWebGL context must be large enough to contain all the visualizations.\n\n### How to set up the WebGL context\n\nTo set up the WebGL context, you will create a single instance of the following web component:\n\n```jsx\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sc-webgl-context</span> <span class="token punctuation">/></span></span>\n```\n\nThis component will create a single canvas element which spans across the entire screen, and create an associated WebGL context to this canvas. Additionally, this component\ncontains some Synchro Charts specific logic so that components can register and be part of the various update loops.\n\n#### Correct place of initialization\n\nEnsure that the position of the `<sc-webgl-context />` is correct\nSince this component constructs the canvas which the visualizations are painted on, it\'s important that the `<sc-webgl-context />` is rendered on top of respective components.\n\nHere\'s an example of a correct utilization of the component:\n\n```jsx\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n     </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sc-line-chart</span> <span class="token attr-name">...</span> <span class="token punctuation">/></span></span><span class="token plain-text">\n     </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sc-bar-chart</span> <span class="token attr-name">...</span> <span class="token punctuation">/></span></span><span class="token plain-text">\n     ...\n     </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sc-webgl-context</span> <span class="token punctuation">/></span></span><span class="token plain-text">\n   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n```\n\nNotice that the `<sc-webgl-context />` is initialized after the other visualizations - this ensures that the axis lines are rendered underneath the visualized data.\n\nMore information about rendering HTML elements in the correct order within [Mozilla\'s documentation on stacking context](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context)\n\n### Accessing the WebGL Context\n\nIt can be useful to have direct access to the underlying WebGL context for purposes such as debugging.\n\nThe `<sc-webgl-context />` web component has a functional prop `onContextInitialization` that is called with a `WebGLRenderingContext` after initialization.\n\n```jsx\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sc-webgl-context</span> <span class="token attr-name">onContextInitialization</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token comment">// your code</span>\n<span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n```\n\nThis callback can be used to, for example, instrument your development environment with tools such as [WebGL Lint](https://github.com/greggman/webgl-lint).\n\n### Current pitfalls and issues\n\n1.  Visualization clips on bottom 16px of screen\n\n    This [issue](https://github.com/awslabs/synchro-charts/issues/30) is caused due to the canvas constructed by the `<sc-webgl-context />` not covering the last `16px` of the screen. This issue\n    will only be visible if you have no horizontal scroll bar on the bottom of the browser.\n\n2.  Visualized data briefly lag behind the associated component on browser resize\n\n    The visualized data is rendered to an absolutely positioned location on the canvas, however when resizing the canvas size changes and breifly causes the visualizations rendered onto it to not align correctly.\n\n3.  Does not work well with components contained within nested scrolled areas.\n\n    Currently, the WebGL context doesn\'t have a way to know that a component has moved when a scroll action takes place within a nested element on the browser.\n\n    Synchro Charts however does work well when scrolling occurs to the entire page.\n\n### Components which require a WebGL context\n\n*   Line chart\n*   Scatter chart\n*   Bar chart\n*   Status timeline'}]},869:function(n,t,e){var a={react:e(0)},s=e(9).default.bind(null,a);e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s),n.exports=[{type:"markdown",content:"> *   [Bar chart](#/Components/BarChart)\n> *   [KPI](#/Components/KPI)\n> *   [Line chart](#/Components/LineChart)\n> *   [Scatter chart](#/Components/ScatterChart)\n> *   [Status chart](#/Components/StatusChart)\n> *   [Status grid](#/Components/StatusGrid)\n> *   [Status Timeline](#/Components/StatusTimeline)\n> *   [Table](#/Components/Table)"}]},870:function(n,t,e){n.exports={doclets:{},displayName:"BarChart",methods:[],props:[],examples:e(871)}},871:function(n,t,e){var a={"@synchro-charts/core":e(6),react:e(0),"./BarChart.js":e(214)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);\nconst BarChart$0 = require('./BarChart.js');\nconst BarChart = BarChart$0.default || (BarChart$0['BarChart'] || BarChart$0);",s);n.exports=[{type:"code",content:"<div style={{ width: '100%', height: '500px' }}>\n  <BarChart\n    widgetId=\"widget-id\"\n    viewport={{\n        start: new Date(2000, 0, 0),\n        end: new Date(2001, 0, 0),\n    }}\n    legend= {{\n      width: 100,\n      position: 'BOTTOM',\n    }}\n    dataStreams={[\n      {\n        id: 'car-count',\n        dataType: 'NUMBER',\n        color: '#0073bb',\n        name: 'Car Count',\n        resolution: 1000 * 60 * 60 * 24 * 30, // one month\n        aggregates: {\n          [1000 * 60 * 60 * 24 * 30]: [{\n            x: new Date(2000, 0, 0).getTime(),\n            y: 10,\n          }, {\n            x: new Date(2000, 3, 0).getTime(),\n            y: 20,\n          }, {\n            x: new Date(2000, 6, 0).getTime(),\n            y: 50,\n          }, {\n            x: new Date(2000, 9, 0).getTime(),\n            y: 35,\n          }, {\n            x: new Date(2001, 0, 0).getTime(),\n            y: 15,\n          }]\n        },\n      }, {\n        id: 'boat-count',\n        dataType: 'NUMBER',\n        color: '#dd6b10',\n        name: 'Boat Count',\n        resolution: 1000 * 60 * 60 * 24 * 30, // one month\n        aggregates: {\n          [1000 * 60 * 60 * 24 * 30]: [{\n            x: new Date(2000, 0, 0).getTime(),\n            y: 8,\n          }, {\n            x: new Date(2000, 3, 0).getTime(),\n            y: 15,\n          }, {\n            x: new Date(2000, 6, 0).getTime(),\n            y: 45,\n          }, {\n            x: new Date(2000, 9, 0).getTime(),\n            y: 10,\n          }, {\n            x: new Date(2001, 0, 0).getTime(),\n            y: 100,\n          }]\n        },\n      }]}\n    />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"### Bar chart with alarms\n\nYou can show the current latest alarm status on the legend through setting the `icon` property for the threshold.\n\nLearn how to display the alarms value as a threshold [here](/#section-threshold)"},{type:"code",content:"import { DataType, COMPARISON_OPERATOR, StatusIcon } from '@synchro-charts/core';\n<div style={{ width: '100%', height: '500px' }}>\n  <BarChart\n    widgetId=\"widget-id\"\n    viewport={{\n        start: new Date(2000, 0, 0),\n        end: new Date(2001, 0, 0),\n    }}\n    legend= {{\n      width: 100,\n      position: 'BOTTOM',\n    }}\n    dataStreams={[\n      {\n        id: 'car-count',\n        dataType: 'NUMBER',\n        color: '#0073bb',\n        name: 'Car Count',\n        resolution: 1000 * 60 * 60 * 24 * 30, // one month\n        aggregates: {\n          [1000 * 60 * 60 * 24 * 30]: [{\n            x: new Date(2000, 0, 0).getTime(),\n            y: 10,\n          }, {\n            x: new Date(2000, 3, 0).getTime(),\n            y: 20,\n          }, {\n            x: new Date(2000, 6, 0).getTime(),\n            y: 50,\n          }, {\n            x: new Date(2000, 9, 0).getTime(),\n            y: 35,\n          }, {\n            x: new Date(2001, 0, 0).getTime(),\n            y: 15,\n          }]\n        },\n      }, {\n        id: 'boat-count',\n        dataType: 'NUMBER',\n        color: '#dd6b10',\n        name: 'Boat Count',\n        resolution: 1000 * 60 * 60 * 24 * 30, // one month\n        aggregates: {\n          [1000 * 60 * 60 * 24 * 30]: [{\n            x: new Date(2000, 0, 0).getTime(),\n            y: 8,\n          }, {\n            x: new Date(2000, 3, 0).getTime(),\n            y: 15,\n          }, {\n            x: new Date(2000, 6, 0).getTime(),\n            y: 45,\n          }, {\n            x: new Date(2000, 9, 0).getTime(),\n            y: 10,\n          }, {\n            x: new Date(2001, 0, 0).getTime(),\n            y: 100,\n          }]\n        },\n      }]}\n    annotations={{\n      y: [\n        {\n          color: '#d13212',\n          value: 90,\n          comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n          icon: StatusIcon.ACTIVE,\n          showValue: true,\n        }],\n    }}\n    />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"**Note**: This component requires a WebGL context to be initialized. Read more about how to set that up in the [WebGL context documentation](https://synchrocharts.com//#/WebGL%20context)"}]},872:function(n,t,e){n.exports={doclets:{},displayName:"KPI",methods:[],props:[],examples:e(873)}},873:function(n,t,e){var a={"@synchro-charts/core":e(6),react:e(0),"./KPI.js":e(215)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);\nconst KPI$0 = require('./KPI.js');\nconst KPI = KPI$0.default || (KPI$0['KPI'] || KPI$0);",s);n.exports=[{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR, StreamType, StatusIcon } from '@synchro-charts/core';\n<div style={{ width: '100%', height: '100%' }}>\n  <KPI\n    dataStreams={[\n      {\n        id: 'wind-temperature',\n        name: 'Wind temperature',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 10,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperature-with-trends',\n        name: 'Wind temperature trends',\n        data: [{\n          x: new Date(2000, 11, 0).getTime(),\n          y: 10,\n        }, {\n          x: new Date(2001, 0, 0).getTime(),\n          y: 15,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed',\n        name: 'Car speed alarm',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 50,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        associatedStreams: [{\n          id:'car-speed-alarm',\n          type: StreamType.ALARM,\n        }],\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed-alarm',\n        name: 'Car speed alarm',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 'Warning',\n        }],\n        resolution: 0,\n        streamType: StreamType.ALARM,\n        dataType: DataType.STRING,\n      }\n    ]}\n    widgetId=\"widget-id\"\n    annotations={{\n      y: [{\n        color: '#1d8102',\n        value: 15,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      }, {\n        color: '#ff9900',\n        value: 'Warning',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n        dataStreamIds: ['car-speed-alarm'],\n        icon: StatusIcon.LATCHED,\n      }],\n    }}\n    viewport={{ duration: 1000 }}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"Key Performance Indicator (KPI) visualizes the latest value from a data stream by emphasizing the property value.\nFor data stream of type `NUMBER` it will also display the trending percentage by using the two most recent data points.\n\nBelow is an example of a single data stream. When it is displaying only one data stream, it will put more emphasis on\ntitle and the value."},{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR } from '@synchro-charts/core';\n\n<div style={{ width: '100%', height: '100%' }}>\n  <KPI\n    dataStreams={[\n      {\n        id: 'wind-temperature',\n        name: 'Wind temperature',\n        data: [{\n          x: new Date(2001, 0, 0),\n          y: 10,\n        }],\n        unit: 'C',\n        color: 'black',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      }\n    ]}\n    widgetId=\"widget-id\"\n    annotations={{\n      y: [{\n        color: '#1d8102',\n        value: 15,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      }, {\n        color: '#ff9900',\n        value: 'Warning',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n        dataStreamIds: ['car-speed-alarm']\n      }],\n    }}\n    viewport={{ duration: 1000 }}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"### KPI with trends"},{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR } from '@synchro-charts/core';\n<div style={{ width: '100%', height: '100%' }}>\n  <KPI\n    dataStreams={[\n      {\n        id: 'wind-temperature-with-trends',\n        name: 'Wind temperature trends',\n        data: [{\n          x: new Date(2000, 11, 0).getTime(),\n          y: 10,\n        }, {\n          x: new Date(2001, 0, 0).getTime(),\n          y: 15,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n    ]}\n    widgetId=\"widget-id\"\n    annotations={{\n      y: [{\n        color: '#1d8102',\n        value: 15,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      }, {\n        color: '#ff9900',\n        value: 'Warning',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n      }],\n    }}\n    viewport={{ duration: 1000 }}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"### Visualizing alarm on KPI\n\nWhen paired with an alarm data stream, the KPI component will combine it with the regular data stream and visualize\nthe latest alarm status within the component.\n\nYou can provide an `icon` property within the threshold to show an icon that is associated with the breaching color/status\n\nSupported Icon:\n\n1.  error\n2.  active\n3.  normal\n4.  acknowledged\n5.  snoozed\n6.  disabled\n7.  latched"},{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR, StatusIcon, StreamType } from '@synchro-charts/core';\n<div style={{ width: '100%', height: '100%' }}>\n  <KPI\n    dataStreams={[\n      {\n        id: 'car-speed',\n        name: 'Car speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 50,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n        associatedStreams: [{\n          id:'car-speed-alarm',\n          type: StreamType.ALARM,\n        }]\n      },\n      {\n        id: 'car-speed-alarm',\n        name: 'Car speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 'Warning',\n        }],\n        resolution: 0,\n        dataType: DataType.STRING,\n        streamType: StreamType.ALARM,\n      }\n    ]}\n    widgetId=\"widget-id\"\n    annotations={{\n      y: [{\n        color: '#ff9900',\n        value: 'Warning',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n        dataStreamIds: ['car-speed-alarm'],\n        icon: StatusIcon.LATCHED\n      }],\n    }}\n    viewport={{ duration: 1000 }}\n  />\n</div>",settings:{},evalInContext:o}]},874:function(n,t,e){n.exports={doclets:{},displayName:"LineChart",methods:[],props:[],examples:e(875)}},875:function(n,t,e){var a={"@synchro-charts/core":e(6),react:e(0),"./LineChart.js":e(216)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);\nconst LineChart$0 = require('./LineChart.js');\nconst LineChart = LineChart$0.default || (LineChart$0['LineChart'] || LineChart$0);",s);n.exports=[{type:"code",content:"const MONTH_RESOLUTION = 1000 * 60 * 60 * 24 * 30; // one month\n<div style={{ width: '100%', height: '500px' }}>\n  <LineChart\n    widgetId=\"widget-id\"\n    viewport={{\n        start: new Date(2000, 0, 0),\n        end: new Date(2001, 2, 0),\n    }}\n    legend= {{\n      width: 100,\n      position: 'BOTTOM',\n    }}\n    dataStreams={[\n      {\n        id: 'car-count',\n        dataType: 'NUMBER',\n        resolution: MONTH_RESOLUTION,\n        name: 'Car Count',\n        color: '#0073bb',\n        aggregates: {\n          [MONTH_RESOLUTION]: [\n            {\n              x: new Date(2000, 0, 0).getTime(),\n              y: 10,\n            }, {\n              x: new Date(2000, 3, 0).getTime(),\n              y: 20,\n            }, {\n              x: new Date(2000, 6, 0).getTime(),\n              y: 50,\n            }, {\n              x: new Date(2000, 9, 0).getTime(),\n              y: 35,\n            }, {\n              x: new Date(2001, 0, 0).getTime(),\n              y: 15,\n            } \n          ]\n        },\n      },\n      {\n        id: 'boat-count',\n        dataType: 'NUMBER',\n        name: 'Boat Count',\n        color: '#dd6b10',\n        resolution: MONTH_RESOLUTION,\n        aggregates: {\n          [MONTH_RESOLUTION]: [{\n            x: new Date(2000, 0, 0).getTime(),\n            y: 8,\n          }, {\n            x: new Date(2000, 3, 0).getTime(),\n            y: 15,\n          }, {\n            x: new Date(2000, 6, 0).getTime(),\n            y: 45,\n          }, {\n            x: new Date(2000, 9, 0).getTime(),\n            y: 10,\n          }, {\n            x: new Date(2001, 0, 0).getTime(),\n            y: 100,\n          }]\n        },\n      }]}\n    />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"### Line chart with alarms\n\nYou can show the current latest alarm status on the legend through setting the `icon` property for the threshold.\n\nLearn how to display the alarms value as a threshold [here](/#section-threshold)"},{type:"code",content:"import { DataType, COMPARISON_OPERATOR, StatusIcon } from '@synchro-charts/core';\nconst MONTH_RESOLUTION = 1000 * 60 * 60 * 24 * 30; // one month\n<div style={{ width: '100%', height: '500px' }}>\n  <LineChart\n    widgetId=\"widget-id\"\n    viewport={{\n        start: new Date(2000, 0, 0),\n        end: new Date(2001, 2, 0),\n    }}\n    legend= {{\n      width: 100,\n      position: 'BOTTOM',\n    }}\n    dataStreams={[\n      {\n        id: 'car-count',\n        dataType: 'NUMBER',\n        resolution: MONTH_RESOLUTION,\n        name: 'Car Count',\n        color: '#0073bb',\n        aggregates: {\n          [MONTH_RESOLUTION]: [\n            {\n              x: new Date(2000, 0, 0).getTime(),\n              y: 10,\n            }, {\n              x: new Date(2000, 3, 0).getTime(),\n              y: 20,\n            }, {\n              x: new Date(2000, 6, 0).getTime(),\n              y: 50,\n            }, {\n              x: new Date(2000, 9, 0).getTime(),\n              y: 35,\n            }, {\n              x: new Date(2001, 0, 0).getTime(),\n              y: 15,\n            }\n          ]\n        },\n      },\n      {\n        id: 'boat-count',\n        dataType: 'NUMBER',\n        color: '#dd6b10',\n        name: 'Boat Count',\n        resolution: MONTH_RESOLUTION,\n        aggregates: {\n          [MONTH_RESOLUTION]: [{\n            x: new Date(2000, 0, 0).getTime(),\n            y: 8,\n          }, {\n            x: new Date(2000, 3, 0).getTime(),\n            y: 15,\n          }, {\n            x: new Date(2000, 6, 0).getTime(),\n            y: 45,\n          }, {\n            x: new Date(2000, 9, 0).getTime(),\n            y: 10,\n          }, {\n            x: new Date(2001, 0, 0).getTime(),\n            y: 100,\n          }]\n        },\n      }]}\n    annotations={{\n      y: [\n        {\n          color: '#d13212',\n          value: 90,\n          comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n          icon: StatusIcon.ACTIVE,\n          showValue: true,\n        }],\n    }}\n    />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"**Note**: This component requires a WebGL context to be initialized. Read more about how to set that up in the [WebGL context documentation](https://synchrocharts.com//#/WebGL%20context)"}]},876:function(n,t,e){n.exports={doclets:{},displayName:"ScatterChart",methods:[],props:[],examples:e(877)}},877:function(n,t,e){var a={"@synchro-charts/core":e(6),react:e(0),"./ScatterChart.js":e(217)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);\nconst ScatterChart$0 = require('./ScatterChart.js');\nconst ScatterChart = ScatterChart$0.default || (ScatterChart$0['ScatterChart'] || ScatterChart$0);",s);n.exports=[{type:"code",content:"const MONTH_RESOLUTION = 1000 * 60 * 60 * 24 * 30; // one month\n<div style={{ width: '100%', height: '500px' }}>\n  <ScatterChart\n    widgetId=\"widget-id\"\n    viewport={{\n      start: new Date(1999, 11, 0),\n      end: new Date(2001, 2, 0),\n    }}\n    legend= {{\n      width: 100,\n      position: 'BOTTOM',\n    }}\n    dataStreams={[\n      {\n        id: 'car-count',\n        dataType: 'NUMBER',\n        resolution: MONTH_RESOLUTION,\n        name: 'Car Count',\n        color: '#0073bb',\n        aggregates: {\n          [MONTH_RESOLUTION]: [\n            {\n              x: new Date(2000, 0, 0).getTime(),\n              y: 10,\n            }, {\n              x: new Date(2000, 3, 0).getTime(),\n              y: 20,\n            }, {\n              x: new Date(2000, 6, 0).getTime(),\n              y: 50,\n            }, {\n              x: new Date(2000, 9, 0).getTime(),\n              y: 35,\n            }, {\n              x: new Date(2001, 0, 0).getTime(),\n              y: 15,\n            }\n          ]\n        },\n      },\n      {\n        id: 'boat-count',\n        dataType: 'NUMBER',\n        name: 'Boat Count',\n        color: '#dd6b10',\n        resolution: MONTH_RESOLUTION,\n        aggregates: {\n          [MONTH_RESOLUTION]: [{\n            x: new Date(2000, 0, 0).getTime(),\n            y: 8,\n          }, {\n            x: new Date(2000, 3, 0).getTime(),\n            y: 15,\n          }, {\n            x: new Date(2000, 6, 0).getTime(),\n            y: 45,\n          }, {\n            x: new Date(2000, 9, 0).getTime(),\n            y: 10,\n          }, {\n            x: new Date(2001, 0, 0).getTime(),\n            y: 100,\n          }]\n        },\n      }]}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"### Scatter chart with alarm\n\nYou can show the current latest alarm status on the legend through setting the `icon` property for the threshold.\n\nLearn how to display the alarms value as a threshold [here](/#section-threshold)"},{type:"code",content:"import { DataType, COMPARISON_OPERATOR, StatusIcon } from '@synchro-charts/core';\nconst MONTH_RESOLUTION = 1000 * 60 * 60 * 24 * 30; // one month\n<div style={{ width: '100%', height: '500px' }}>\n  <ScatterChart\n    widgetId=\"widget-id\"\n    viewport={{\n        start: new Date(1999, 11, 0),\n        end: new Date(2001, 2, 0),\n    }}\n    legend= {{\n      width: 100,\n      position: 'BOTTOM',\n    }}\n    dataStreams={[\n      {\n        id: 'car-count',\n        dataType: 'NUMBER',\n        resolution: MONTH_RESOLUTION,\n        color: '#0073bb',\n        name: 'Car Count',\n        aggregates: {\n          [MONTH_RESOLUTION]: [\n            {\n              x: new Date(2000, 0, 0).getTime(),\n              y: 10,\n            }, {\n              x: new Date(2000, 3, 0).getTime(),\n              y: 20,\n            }, {\n              x: new Date(2000, 6, 0).getTime(),\n              y: 50,\n            }, {\n              x: new Date(2000, 9, 0).getTime(),\n              y: 35,\n            }, {\n              x: new Date(2001, 0, 0).getTime(),\n              y: 15,\n            }\n          ]\n        },\n      },\n      {\n        id: 'boat-count',\n        dataType: 'NUMBER',\n        color: '#dd6b10',\n        name: 'Boat Count',\n        resolution: MONTH_RESOLUTION,\n        aggregates: {\n          [MONTH_RESOLUTION]: [{\n            x: new Date(2000, 0, 0).getTime(),\n            y: 8,\n          }, {\n            x: new Date(2000, 3, 0).getTime(),\n            y: 15,\n          }, {\n            x: new Date(2000, 6, 0).getTime(),\n            y: 45,\n          }, {\n            x: new Date(2000, 9, 0).getTime(),\n            y: 10,\n          }, {\n            x: new Date(2001, 0, 0).getTime(),\n            y: 100,\n          }]\n        },\n      }]}\n\n    annotations={{\n      y: [\n        {\n          color: '#d13212',\n          value: 90,\n          comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n          icon: StatusIcon.ACTIVE,\n          showValue: true,\n        }],\n    }}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"**Note**: This component requires a WebGL context to be initialized. Read more about how to set that up in the [WebGL context documentation](https://synchrocharts.com//#/WebGL%20context)"}]},878:function(n,t,e){n.exports={doclets:{},displayName:"StatusGrid",methods:[],props:[],examples:e(879)}},879:function(n,t,e){var a={"@synchro-charts/core":e(6),react:e(0),"./StatusGrid.js":e(218)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);\nconst StatusGrid$0 = require('./StatusGrid.js');\nconst StatusGrid = StatusGrid$0.default || (StatusGrid$0['StatusGrid'] || StatusGrid$0);",s);n.exports=[{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR, StreamType } from '@synchro-charts/core';\n\n<div style={{ width: '100%', height: '100%' }}>\n  <StatusGrid\n    dataStreams={[\n      {\n        id: 'wind-temperture',\n        name: 'Wind temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 15,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed',\n        name: 'Car speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 50,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n        associatedStreams: [{\n          id:'car-speed-alarm',\n          type: StreamType.ALARM,\n        }]\n      },\n      {\n        id: 'car-speed-alarm',\n        name: 'Car speed',\n        color: '#ff9900',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 'Warning',\n        }],\n        resolution: 0,\n        dataType: DataType.STRING,\n        streamType: StreamType.ALARM,\n      },\n      {\n        id: 'motor-rpm',\n        name: 'RPM',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 30,\n        }],\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n    ]}\n    labelsConfig={{ showName: true, showValue: true, showUnit: true }}\n    widgetId=\"widget-id\"\n    annotations={{\n      y: [{\n        color: '#1d8102',\n        value: 0,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      },\n        {\n          color: '#d13212',\n          value: 25,\n          comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n        },\n        {\n          color: '#ff9900',\n          value: 'Warning',\n          comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n          dataStreamIds: ['car-speed-alarm']\n        }],\n    }}\n    viewport={{ duration: 1000 }}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"Status Grid visualizes the latest status for a given data stream by emphasizing the current status of a property.\n\nThe color of the status grid is determined by the threshold color. If no threshold is provided or no status is\nbreaching the threshold, then the default color is grey.\n\nRegardless of the threshold color you provided, the color of the text will contrast for you automatically.\n\nThe status grid also provides a way for you to show or hide the name, the value and/or the unit through the labels' config.\n\n### Status grid without threshold"},{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR } from '@synchro-charts/core';\n\n<div style={{ width: '100%', height: '100%' }}>\n  <StatusGrid\n    dataStreams={[\n      {\n        id: 'wind-temperture',\n        name: 'Wind temperture',\n        data: [{\n          x: new Date(2001, 0, 0),\n          y: 15,\n        }],\n        unit: 'C', \n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'motor-rpm',\n        name: 'Motor RPM',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 30,\n        }],\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed',\n        name: 'Car speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 50,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n    ]}\n    labelsConfig={{ showName: true, showValue: true, showUnit: true }}\n    widgetId=\"widget-id\"\n    viewport={{ duration: 1000 }}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"### Status grid with threshold"},{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR } from '@synchro-charts/core';\n\n<div style={{ width: '100%', height: '100%' }}>\n  <StatusGrid\n    dataStreams={[\n      {\n        id: 'wind-temperture',\n        name: 'Wind temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 15,\n        }],\n        unit: 'C', \n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'motor-rpm',\n        name: 'Motor RPM',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 30,\n        }],\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      }\n    ]}\n    labelsConfig={{ showName: true, showValue: true, showUnit: true }}\n    widgetId=\"widget-id\"\n    annotations={{\n      y: [{\n        color: '#0073bb',\n        value: 0,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      },\n      {\n        color: '#1d8102',\n        value: 25,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      }],\n    }}\n    viewport={{ duration: 1000 }}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"Here is an example of a status grid breaching a blue threshold.\n\nWhile it is breached, it will color the cell with threshold color to indicate that the threshold is breached. If there is\na threshold and that threshold is not breached, the color of the cell will remain grey.\n\nThe color of the text is automatically set to white or black to provide readability depending on the background color.\n\n### Status grid with alarm"},{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR, StreamType } from '@synchro-charts/core';\n\n<div style={{ width: '100%', height: '100%' }}>\n  <StatusGrid\n    dataStreams={[\n      {\n        id: 'car-speed',\n        name: 'Car speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 50,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n        associatedStreams: [{\n          id:'car-speed-alarm',\n          type: StreamType.ALARM,\n        }]\n      },\n      {\n        id: 'car-speed-alarm',\n        name: 'Car speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 'Warning',\n        }],\n        resolution: 0,\n        dataType: DataType.STRING,\n        streamType: StreamType.ALARM,\n      }\n    ]}\n    labelsConfig={{ showName: true, showValue: true, showUnit: true }}\n    widgetId=\"widget-id\"\n    annotations={{\n      y: [{\n        color: '#ff9900',\n        value: 'Warning',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n        dataStreamIds: ['car-speed-alarm']\n      }],\n    }}\n    viewport={{ duration: 1000 }}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:'When you have an alarm data stream that is associated with another data stream, it will be combined into one single\nstatus grid cell to display both information in a single place. It will emphasize the alarm status while indicating the\nassociated property value.\n\nTo associate a data stream to an alarm data stream, you will need to specify the `associatedDataStream` property for\nthe property data stream to provide it with the association to the alarm.\n\nAn example of an association:\n\n```jsx\n    dataStreams<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token operator">...</span>  \n        associatedDataStream<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n            id<span class="token operator">:</span> <span class="token string">\'alarm-data-stream-id\'</span><span class="token punctuation">,</span>\n            type<span class="token operator">:</span> <span class="token string">\'ALARM\'</span>\n        <span class="token punctuation">}</span><span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span><span class="token punctuation">}</span>\n```\n\nHovering over the status grid will give you more in-depth information about the data value as well as the alarm status.'}]},880:function(n,t,e){n.exports={doclets:{},displayName:"StatusTimeline",methods:[],props:[],examples:e(881)}},881:function(n,t,e){var a={"@synchro-charts/core":e(6),react:e(0),"./StatusTimeline.js":e(219)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);\nconst StatusTimeline$0 = require('./StatusTimeline.js');\nconst StatusTimeline = StatusTimeline$0.default || (StatusTimeline$0['StatusTimeline'] || StatusTimeline$0);",s);n.exports=[{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR, StreamType } from '@synchro-charts/core';\nconst MONTH_RESOLUTION = 1000 * 60 * 60 * 24 * 30; // one month\n<div style={{ width: '100%', height: '300px' }}>\n  <StatusTimeline\n    alarms={{expires: undefined}}\n    dataStreams={[\n      {\n        id: 'car-speed-alarm',\n        name: 'Car speed',\n        aggregates: {\n          [MONTH_RESOLUTION]: [{\n            x: new Date(2000, 0, 0).getTime(),\n            y: 'Normal',\n          }, {\n            x: new Date(2000, 3, 0).getTime(),\n            y: 'Warning',\n          }, {\n            x: new Date(2000, 6, 0).getTime(),\n            y: 'Critical',\n          }, {\n            x: new Date(2000, 9, 0).getTime(),\n            y: 'Warning',\n          }, {\n            x: new Date(2000, 9, 15).getTime(),\n            y: 'Normal',\n          }]\n        },\n        resolution: 1000 * 60 * 60 * 24 * 30, // one month\n        dataType: DataType.STRING,\n        streamType: StreamType.ALARM,\n      },\n    ]}\n    widgetId=\"widget-id\"\n    annotations={{\n      y: [{\n        color: '#d13212',\n        value: 'Critical',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n      }, {\n        color: '#ff9900',\n        value: 'Warning',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n      }, {\n        color: '#1d8102',\n        value: 'Normal',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n      }],\n    }}\n    legend= {{\n      width: 100,\n      position: LEGEND_POSITION.BOTTOM,\n    }}\n    viewport={{ yMin: 0, yMax: 100, start: new Date(1999, 0, 0), end: new Date(2001, 6, 0) }}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:'Each bar in the status timeline represents a period of the time that the associated data point that is active.\n\nThe color of the bar is determined by the threshold that is considered breached by the data point. If no data is breaching\nthe threshold, the default color is grey.\n\nIf there is no data point in a given point in time, the chart will display grey stripe to indicate no value.\n\nBelow is an example of utilizing the following threshold to color the status timeline.\nNote that also the threshold rules will be used to determine the legend.\n\n```jsx\n  annotations<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    y<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      color<span class="token operator">:</span> <span class="token string">\'#d13212\'</span><span class="token punctuation">,</span>\n      value<span class="token operator">:</span> <span class="token string">\'Critical\'</span><span class="token punctuation">,</span>\n      comparisonOperator<span class="token operator">:</span> <span class="token constant">COMPARISON_OPERATOR</span><span class="token punctuation">.</span><span class="token constant">EQUAL</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      color<span class="token operator">:</span> <span class="token string">\'#ff9900\'</span><span class="token punctuation">,</span>\n      value<span class="token operator">:</span> <span class="token string">\'Warning\'</span><span class="token punctuation">,</span>\n      comparisonOperator<span class="token operator">:</span> <span class="token constant">COMPARISON_OPERATOR</span><span class="token punctuation">.</span><span class="token constant">EQUAL</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      color<span class="token operator">:</span> <span class="token string">\'#1d8102\'</span><span class="token punctuation">,</span>\n      value<span class="token operator">:</span> <span class="token string">\'Normal\'</span><span class="token punctuation">,</span>\n      comparisonOperator<span class="token operator">:</span> <span class="token constant">COMPARISON_OPERATOR</span><span class="token punctuation">.</span><span class="token constant">EQUAL</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span>\n```\n\n### Configuring status expiration\n\nThe status timeline allows customization of how long a data point is considered active.\nThis is achieved by providing an alarms object with `expires` property in milliseconds.\n\nIn the first example above we demonstrate a case where status never expires, i.e. when `expires` is `undefined`.\nIf a data point has a given value associated with no expiration, then the data point is considered active until a new data point occurs.\n\nHowever, if we want to have a data point to be considered active for a set period of a time, we can provide the alarm\'s `expires` in milliseconds.\nIn this case, the data is considered expired, when either the point in time is further away from the expired time, or a new data point occurs.\n\nBelow is an example of one month expiration,\n\n```jsx\nalarms<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> expires<span class="token operator">:</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n```'},{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR, StreamType } from '@synchro-charts/core';\nconst MONTH_RESOLUTION = 1000 * 60 * 60 * 24 * 30; // one month\n<div style={{ width: '100%', height: '300px' }}>\n  <StatusTimeline\n    alarms={{expires: 1000 * 60 * 60 * 24 * 30 }}\n    dataStreams={[\n      {\n        id: 'car-speed-alarm',\n        name: 'Car speed',\n        aggregates: {\n          [MONTH_RESOLUTION]: [{\n            x: new Date(2000, 0, 0).getTime(),\n            y: 'Normal',\n          }, {\n            x: new Date(2000, 3, 0).getTime(),\n            y: 'Warning',\n          }, {\n            x: new Date(2000, 6, 0).getTime(),\n            y: 'Critical',\n          }, {\n            x: new Date(2000, 9, 0).getTime(),\n            y: 'Warning',\n          }, {\n            x: new Date(2000, 9, 15).getTime(0),\n            y: 'Normal',\n          }]\n        },\n        resolution: 1000 * 60 * 60 * 24 * 30, // one month\n        dataType: DataType.STRING,\n        streamType: StreamType.ALARM,\n      },\n    ]}\n    widgetId=\"widget-id\"\n    annotations={{\n      y: [{\n        color: '#d13212',\n        value: 'Critical',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n      }, {\n        color: '#ff9900',\n        value: 'Warning',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n      }, {\n        color: '#1d8102',\n        value: 'Normal',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n      }],\n    }}\n    legend= {{\n      width: 100,\n      position: LEGEND_POSITION.BOTTOM,\n    }}\n    viewport={{ yMin: 0, yMax: 100, start: new Date(1999, 0, 0), end: new Date(2001, 6, 0) }}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"**Note**: This component requires a WebGL context to be initialized. Read more about how to set that up in the [WebGL context documentation](https://synchrocharts.com//#/WebGL%20context)"}]},882:function(n,t,e){n.exports={doclets:{},displayName:"Table",methods:[],props:[],examples:e(883)}},883:function(n,t,e){var a={"@synchro-charts/core":e(6),react:e(0),"./Table.js":e(220)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);\nconst Table$0 = require('./Table.js');\nconst Table = Table$0.default || (Table$0['Table'] || Table$0);",s);n.exports=[{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR } from '@synchro-charts/core';\nconst windTableColumn = {\n  header: 'Wind temperture',\n  rows:[\n    'wind-temperture-station-1',\n    'wind-temperture-station-2',\n    'wind-temperture-station-3',\n    'wind-temperture-station-4',\n    'wind-temperture-station-5',\n    'wind-temperture-station-6',\n  ],\n};\n\nconst carSpeedTableColumn = {\n  header: 'Car speed',\n  rows:[\n    'car-speed',\n    'car-speed-2',\n    'car-speed-3',\n    'car-speed-4',\n    'car-speed-5',\n    'car-speed-6',\n  ],\n};\n\n<div style={{ width: '100%', height: '300px' }}>\n  <Table\n    dataStreams={[\n      {\n        id: 'wind-temperture-station-1',\n        name: 'Wind temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 15,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-2',\n        name: 'Wind temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 30,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-3',\n        name: 'Wind temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 40,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-4',\n        name: 'Wind temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 50,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-5',\n        name: 'Wind temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 60,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-6',\n        name: 'Wind temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 70,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed',\n        name: 'Car speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 50,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed-2',\n        name: 'Car speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 100,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed-3',\n        name: 'Car speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 110,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed-4',\n        name: 'Car speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 120,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed-5',\n        name: 'Car speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 130,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed-6',\n        name: 'Car speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 160,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      }\n    ]}\n    widgetId=\"widget-id\"\n    viewport={{ duration: 1000 }}\n    tableColumns={[windTableColumn, carSpeedTableColumn]}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:'Table components help visualizes a group of data streams that is closely associated with each other under one column.\nEach of the cells in the table represents one data stream. You have to use the `tableColumns` property to group a\nset of data streams under one column.\n\nAn example of creating the table column:\n\n```jsx\n<span class="token keyword">const</span> windTableColumn <span class="token operator">=</span> <span class="token punctuation">{</span>\n  header<span class="token operator">:</span> <span class="token string">\'Wind temperture\'</span><span class="token punctuation">,</span>\n  rows<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">\'wind-temperture-station-1\'</span><span class="token punctuation">,</span> <span class="token string">\'wind-temperture-station-2\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n```\n\nThe `header` property is the name of the column and the `rows` property is a list of data streams that will be rendered under that\ncolumn in the array\'s order.\n\nIn this example, we are showing temperatures from two different weather stations.\n\n### Table with thresholds'},{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR } from '@synchro-charts/core';\nconst windTableColumn = {\n  header: 'Wind temperture',\n  rows:[\n    'wind-temperture-station-1',\n    'wind-temperture-station-2',\n    'wind-temperture-station-3',\n    'wind-temperture-station-4',\n    'wind-temperture-station-5',\n    'wind-temperture-station-6',\n  ],\n};\n\nconst carSpeedTableColumn = {\n  header: 'Car speed',\n  rows: [\n    'car-speed', \n    'car-speed-2',\n    'car-speed-3',\n    'car-speed-4',\n    'car-speed-5',\n    'car-speed-6',\n  ],\n};\n\n<div style={{ width: '100%', height: '300px' }}>\n  <Table\n    dataStreams={[\n      {\n        id: 'wind-temperture-station-1',\n        name: 'Wind temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 15,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-2',\n        name: 'Wind temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 30,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-3',\n        name: 'Wind temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 40,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-4',\n        name: 'Wind temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 50,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-5',\n        name: 'Wind temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 60,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-6',\n        name: 'Wind temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 70,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed',\n        name: 'Car speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 50,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed-2',\n        name: 'Car speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 100,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed-3',\n        name: 'Car speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 110,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed-4',\n        name: 'Car speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 120,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed-5',\n        name: 'Car speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 130,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'car-speed-6',\n        name: 'Car speed',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 160,\n        }],\n        unit: 'MPH',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      }\n    ]}\n    widgetId=\"widget-id\"\n    annotations={{\n      y: [{\n        color: '#d13212',\n        value: 0,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      }, {\n        color: '#ff9900',\n        value: 20,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      }, {\n        color: '#1d8102',\n        value: 40,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      }, {\n        color: '#687078',\n        value: 60,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      }, {\n        color: '#3184c2',\n        value: 100,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      }, {\n        color: '#FF0000',\n        value: 120,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      }, {\n        color: '#1d8102',\n        value: 160,\n        comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN_EQUAL,\n      }],\n    }}\n    legend= {{\n      width: 100,\n      position: LEGEND_POSITION.BOTTOM,\n    }}\n    viewport={{ duration: 1000 }}\n    tableColumns={[windTableColumn, carSpeedTableColumn]}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"### Table with alarms\n\nIn this example we are rendering the `wind temperature` data and its associated alarm data.\n\nIn order to have the status icon rendered next to the alarm status, you need to use the `icon` property in the threshold.\n\nLike the KPI, table status icon currently supports:\n\n1.  error\n2.  active\n3.  normal\n4.  acknowledged\n5.  snoozed\n6.  disabled\n7.  latched"},{type:"code",content:"import { LEGEND_POSITION, DataType, COMPARISON_OPERATOR, StatusIcon, StreamType } from '@synchro-charts/core';\nconst windTableColumn = {\n    header: 'Wind temperture',\n    rows:[\n      'wind-temperture-station-1', \n      'wind-temperture-station-2',\n      'wind-temperture-station-3',\n      'wind-temperture-station-4',\n      'wind-temperture-station-5',\n      'wind-temperture-station-6',\n    ],\n};\n\nconst windTempAlarm = {\n  header: 'Status',\n  rows:[\n    'wind-temperture-station-1-alarm', \n    'wind-temperture-station-2-alarm',\n    'wind-temperture-station-3-alarm',\n    'wind-temperture-station-4-alarm',\n    'wind-temperture-station-5-alarm',\n    'wind-temperture-station-6-alarm',\n  ],\n};\n\n<div style={{ width: '100%', height: '300px' }}>\n  <Table\n    dataStreams={[\n      {\n        id: 'wind-temperture-station-1',\n        name: 'Wind temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 15,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-2',\n        name: 'Wind temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 30,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-3',\n        name: 'Wind temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 40,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-4',\n        name: 'Wind temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 50,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-5',\n        name: 'Wind temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 60,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-6',\n        name: 'Wind temperture',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 70,\n        }],\n        unit: 'C',\n        resolution: 0,\n        dataType: DataType.NUMBER,\n      },\n      {\n        id: 'wind-temperture-station-1-alarm',\n        name: 'station 1 alarm',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 'ACTIVE',\n        }],\n        resolution: 0,\n        dataType: DataType.STRING,\n        streamType: StreamType.ALARM,\n      },\n      {\n        id: 'wind-temperture-station-2-alarm',\n        name: 'station 2 alarm',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 'WARNING',\n        }],\n        resolution: 0,\n        dataType: DataType.STRING,\n        streamType: StreamType.ALARM,\n      },\n      {\n        id: 'wind-temperture-station-3-alarm',\n        name: 'station 3 alarm',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 'ERROR',\n        }],\n        resolution: 0,\n        dataType: DataType.STRING,\n        streamType: StreamType.ALARM,\n      },\n      {\n        id: 'wind-temperture-station-4-alarm',\n        name: 'station 4 alarm',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 'NORMAL',\n        }],\n        resolution: 0,\n        dataType: DataType.STRING,\n        streamType: StreamType.ALARM,\n      },\n      {\n        id: 'wind-temperture-station-5-alarm',\n        name: 'station 5 alarm',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 'SNOOZED',\n        }],\n        resolution: 0,\n        dataType: DataType.STRING,\n        streamType: StreamType.ALARM,\n      },\n      {\n        id: 'wind-temperture-station-6-alarm',\n        name: 'station 6 alarm',\n        data: [{\n          x: new Date(2001, 0, 0).getTime(),\n          y: 'DISABLED',\n        }],\n        resolution: 0,\n        dataType: DataType.STRING,\n        streamType: StreamType.ALARM,\n      },\n    ]}\n    widgetId=\"widget-id\"\n    annotations={{\n      y: [{\n        color: '#d13212',\n        value: 'ACTIVE',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n        icon: StatusIcon.ACTIVE\n      }, {\n        color: '#ff9900',\n        value: 'WARNING',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n        icon: StatusIcon.LATCHED\n      }, {\n        color: '#FF0000',\n        value: 'ERROR',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n        icon: StatusIcon.ERROR\n      }, {\n        color: '#1d8102',\n        value: 'NORMAL',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n        icon: StatusIcon.NORMAL\n      }, {\n        color: '#879596',\n        value: 'SNOOZED',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n        icon: StatusIcon.SNOOZED\n      }, {\n        color: '#687078',\n        value: 'DISABLED',\n        comparisonOperator: COMPARISON_OPERATOR.EQUAL,\n        icon: StatusIcon.DISABLED\n      }],\n    }}\n    legend= {{\n      width: 100,\n      position: LEGEND_POSITION.BOTTOM,\n    }}\n    viewport={{ duration: 1000 }}\n    tableColumns={[windTableColumn, windTempAlarm]}\n  />\n</div>",settings:{},evalInContext:o}]},884:function(n,t,e){var a={react:e(0)},s=e(9).default.bind(null,a);e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s),n.exports=[{type:"markdown",content:"> *   [Properties](#/API/Properties)\n> *   [Events](#/API/Events)"}]},885:function(n,t,e){var a={react:e(0)},s=e(9).default.bind(null,a);e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s),n.exports=[{type:"markdown",content:'*   `widgetId`: string\n\n    The ID of the widget. Must be unique across all widgets.\n\n***\n\n*   `viewport`: Object\n\n    Specifies the window of data which will be visible within the widget.\n\n    *   `start`: Date\n\n        (Optional) The earliest date within the viewport. Leave blank when viewing live time frames.\n\n    *   `end`: Date\n\n        (Optional) The latest date within the viewport. Leave blank when viewing live time frames.\n\n    *   `yMin`: number\n\n        (Optional) The minimum y-value viewable within the widget if present. Defaults to a value small enough to ensure\n        all data within the viewport falls at or above the provided `yMin`.\n\n    *   `yMax`: number\n\n        (Optional) The maximum y-value viewable within the widget if present. Defaults to a value large enough to ensure\n        all data within the viewport falls at or below the provided `yMax`.\n\n    *   `lastUpdatedBy`: string\n\n        (Optional) A mechanism to allow the internals of the widget framework to know the source of the last viewport update.\n        Leave this field undefined to communicate that this is an externally provided date which should force the utilization of this updated viewport.\n\n        Note: To be deprecated\n\n    *   `duration`: number\n\n        (Optional) The number of milliseconds the duration of the viewport is. Utilized to specify a live time frame. Leave blank when viewing historical time frames.\n\n    *   `group`: string\n\n        (Optional) The identifier for the viewport group which the widget will belong to. All widgets within a viewport group\n        will have their viewports \'synced\' to the same value, i.e. if you pan on one chart, all charts within\n        the viewport group will view the same data.\n\n        Omitting the `group` results in the widget not being part of any viewport group.\n\n***\n\n*   `axis`: Object\n\n    (Optional) Specifies x and y-axis related settings. Defaults to showing both x and y axis.\n\n    *   `showX`: boolean\n\n        (Optional) Setting to determine whether we show the x axis. Defaults to true.\n\n    *   `showY`: boolean\n\n        (Optional) Setting to determine whether we show the y axis and the horizontal grid lines. Defaults to true.\n\n    *   `labels`: object\n\n        (Optional) Setting to declare the axis labels\n\n        *   `yAxis`: object\n\n            (Optional) Settings to declare the y-axis labels\n\n            *   `content`: string\n\n                The y-axis label content\n\n***\n\n*   `size` : Object\n\n    (Optional): Specifies the precise dimensions that the widget should be. Defaults to take the size of the parent container.\n    If margins are not manually set, they will default to reasonable values that work well with the legend.\n\n    **Warning**: If you are not explicitly providing a size, it is important that the parent of the widget\n    contains no other children; otherwise, styling issues will occur due to overflow.\n\n    *   `width`: number\n\n        (Optional) The width of the entire widget, including margins, in pixels.\n\n    *   `height`: number\n\n        (Optional) The height of the entire widget, including margins, in pixels.\n\n    *   `marginRight`: number\n\n        (Optional) The margin between the data visualization area and either the legend (if the legend is positioned to the right) or the right side of the widget.\n        Starts at the right side of the viewport. Defaults to a value which provides sensible padding.\n\n    *   `marginLeft`: number\n\n        (Optional) The margin between the data visualization area and the left side of the chart.\n        Starts at the left side of the viewport. Provides space for the left-sided y axis.\n\n    *   `marginTop`: number\n\n    (Optional) The margin between the data visualization area and the top of the widget.\n    Starts at the top of the viewport.\n\n    *   `marginBottom`: number\n\n    (Optional) The margin between the data visualization area and either the legend (if the legend is positioned to the bottom) or the bottom of the widget.\n    Starts at the bottom of the viewport. Defaults to a value which provides sensible padding.\n\n***\n\n*   `dataStreams`: Object\\[]\n\n    A collection of data streams, each representing a single data set.\n\n    Each data stream contains the following information:\n\n    *   `id`: string\n\n        A unique identifier for a given data stream.\n\n    *   `data`: Object\\[]\n\n        Raw data (non-aggregated) for the stream. Note that once `resolution` is greater than 0, then it will switch from\n        reading the data from this `data` property to reading the data from the `aggregates` property.\n\n        *   `x`: number\n\n            Represents the point in time at which the data point was measured, in milliseconds since January 1, 1970 00:00:00 UTC, with leap seconds ignored.\n\n        *   `y`: number or string or boolean\n\n            The value measured within the data point. Type depends on the data streams `dataType`.\n\n    *   `resolution`: number\n\n        The resolution, in milliseconds, at which the data should be aggregated.\n        To display raw data, set the resolution to 0.\n\n    *   `dataType`: string\n\n        The type of data contained within this stream. Must be one of the following:\n\n        *   `NUMBER`: numerical data, such as `12.0`\n        *   `STRING`: string data, such as categorical data `"OK"`, `"WARNING"`, etc.\n        *   `BOOLEAN`: boolean data, such as `true` and `false`.\n\n    *   `name`: string\n\n        A name by which to refer to the data stream. Utilized in the legend.\n\n    *   `aggregates`: Object\n\n        (Optional) A map of resolution (in milliseconds) to its associated data points. The `resolution` in the `datastream`\n        is a key in the `aggregates` object and must match to one of them in order to visualize the data stream on the visualizations.\n\n        *   `resolution` (key): number\n            The resolution (in milliseconds) of the data.\n\n            *   data point (value): DataPoint\\[]\n                The data points that are associated to this resolution.\n\n    *   `detailedName`: string\n\n        (Optional) A more detailed name for the associated data stream, shown while hovering over the data stream information within the legend.\n\n    *   `unit`: string\n\n        (Optional) The measurement unit of the y-values contained within the associated data stream, e.g. "m/s", "count".\n        Utilized within the legend, etc. to give information about the data.\n\n    *   `color`: string\n\n        (Optional) A CSS color string, e.g. "#5e87b5" or "red".\n\n    *   `isLoading`: boolean\n\n        (Optional) Whether the data stream has never fetched data previously, and is currently fetching data. Defaults to false.\n\n    *   `isRefreshing`: boolean\n\n        (Optional) Whether the data stream is currently fetching data, regardless of whether it has fetched data previously. Defaults to false.\n\n    *   `error`: string\n\n        (Optional) A readable human error message if the data source this data stream is associated to has an error.\n\n    *   `associatedDataStreams`: Object\\[]\n\n        (Optional) Data streams that are associated alarms of the data streams.\n\n        *   `id`: string\n\n            The unique identifier for the data stream that is associated.\n\n        *   `streamType`: string\n\n            The data stream type for the associated data stream.\n\n            Must be one of the following:\n\n            *   `ALARM`: Alarm data stream type.\n            *   `ANOMALY`: Anomaly data stream type.\n            *   `ALARM_THRESHOLD`: Alarm threshold stream type.\n\n***\n\n*   `legend`: Object\n\n    (Optional) Legend configuration. Omit to have no legend.\n\n    *   `position`: string\n\n        The position of the legend within the widget. Must be one of the following:\n\n        *   `RIGHT`: Position the legend on the right portion of the widget.\n        *   `BOTTOM`: Position the legend on the bottom portion of the widget.\n    *   `width`: number\n\n        Width in pixels of the legend while in the `RIGHT` position. Has no effect while in the `BOTTOM` position.\n\n***\n\n*   `annotations`: Object\n\n    (Optional) Annotations provide a mechanism to annotate a value along either the x-axis or the y-axis.\n    Utilized to create thresholds to help monitor data streams to be within specified constraints.\n\n    *   `x`: Object\\[]\n\n    (Optional) A collection of x-annotations. An x-annotation provides a mechanism to annotate a value along the x-axis.\n\n    Each x-annotation contains the following information:\n\n    *   `color`: string\n\n        The color for the annotation line, value and label. Can be any valid CSS string, e.g. \'#333\' or \'red\'.\n\n    *   `value`: Date\n\n        The value in the graph where the annotation will appear.\n\n    *   `showValue`: boolean\n\n        (Optional) A setting to display the value of the annotation on the graph. Defaults to false.\n\n    *   `isEditable`: boolean\n\n        (Optional) A setting to control whether the annotation is configurable from within the widget. Defaults to false.\n\n    *   `id`: string\n\n        (Optional) The id for the annotation which can be set to any string value. This field allows annotations to be identified/distinguished when [`widgetUpdated`](#/API/Events) events are emitted.\n\n    *   `label`: Object\n\n        (Optional) a label which can be optionally displayed.\n\n        A label contains the following properties:\n\n        *   `text`: string\n\n            A string that appears above the annotation.\n\n        *   `show`: boolean\n\n            A setting to display the label of the annotation on the graph. Defaults to false.\n\n    *   `y`: Object\\[]\n\n        (Optional) collection of y-annotations. A y-annotation provides a mechanism to annotate a value along the y-axis.\n\n        Each y-annotation contains the following information:\n\n        *   `color`: string\n\n            The color for the annotation line, value and label. Can be any valid CSS string, e.g. \'#333\' or \'red\'.\n\n        *   `value`: number\n\n            The value in the graph where the annotation will appear.\n\n        *   `showValue`: boolean\n\n            (Optional) A setting to display the value of the annotation on the graph.\n\n        *   `comparisonOperator`: string\n\n            (Optional) A mechanism to provide a threshold. Select the operation you want to use for the threshold condition\n            against the annotations `value` attribute.\n\n            Must be one of the following:\n\n            *   `LT`: Less than.\n            *   `LTE`: Less than or equals.\n            *   `GT`: Greater than.\n            *   `GTE`: Greater than or equals.\n            *   `EQ`: Equal.\n\n        *   `id`: string\n\n            (Optional) The id for the annotation which can be set to any string value. This field allows annotations to be identified/distinguished when [`widgetUpdated`](#/API/Events) events are emitted.\n\n        *   `isEditable`: boolean\n\n            (Optional) A setting to control whether the annotation is configurable from within the widget. Defaults to false.\n            For example when `isEditable` is true on a line chart, you are able to drag the annotation handle to change the annotation value and emit [`widgetUpdated`](#/API/Events) events reflecting the new annotation.\n\n        *   `severity`: number\n\n            (Optional) Specifies the severity of the threshold being breached. The lower the numerical number, the more importance is attributed to the threshold.\n            The `severity` is used to determine which threshold to indicate as breached when a `DataStream` has multiple thresholds that are breached, simultaneously.\n\n        *   `label`: Object\n\n            (Optional) a label which can be optionally displayed.\n\n            A label contains the following properties:\n\n            *   `text`: string\n\n                A string that appears above the annotation.\n\n            *   `show`: boolean\n\n                A setting to display the label of the annotation on the graph.\n*   `thresholdOptions`: Object or Boolean\n\n    (Optional) An threshold objects object to configure the thresholds. This setting will applie to all the thresholds.\n    Also, note that you can pass in `false` to disable all threshold options\n\n    *   `showColor`: boolean\n        (Optional) A setting to color the data points when it passes the threshold\n\n***\n\n*   `trends`: Object\\[]\n\n    (Optional) A collection of trend lines to be visualized on the data in the viewport.\n\n    Each trend line contains the following information:\n\n    *   `dataStreamId`: string\n\n        The ID of the associated data stream. If this ID does not match any data stream, the trend line will be ignored.\n\n    *   `type`: string\n\n        The type of trend line to apply against the data. Must be equal to one of the following strings:\n\n        *   `linear-regression`: Least-squares linear regression algorithm to determine the line of best fit against the data.'}]},886:function(n,t,e){var a={react:e(0)},s=e(9).default.bind(null,a);e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s),n.exports=[{type:"markdown",content:'To communicate any changes triggered from the widgets internally, the widget will initiate the following events which you may optionally listen for.\n\n### `widgetUpdated`\n\nAn event fired when the configuration of a widget is altered.\n\nCurrently, this event is only fired when\n\n1.  The name of a `dataStream` is updated from within the legend\n\n2.  A y-annotation is dragged to a new value\n\n### `dateRangeChange`\n\nAn event which is fired upon manually enacted changes to the view port, such as panning or zooming into a chart.\n\nThe structure is the following:\n\n```js\n<span class="token punctuation">{</span>\n  <span class="token comment">// [startDate, endDate, lastUpdatedBy]</span>\n  detail<span class="token operator">:</span> <span class="token punctuation">[</span>Date<span class="token punctuation">,</span> Date<span class="token punctuation">,</span> string <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n```'}]},887:function(n,t,e){var a={react:e(0)},s=e(9).default.bind(null,a);e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s),n.exports=[{type:"markdown",content:"> *   [Synchronization](#/Features/Synchronization)\n> *   [Performance](#/Features/Performance)\n> *   [Annotation](#/Features/Annotation)\n> *   [Threshold](#/Features/Threshold)\n> *   [Trends](#/Features/Trends)\n> *   [Configuration updates](#/Features/Configuration%20updates)"}]},888:function(n,t,e){var a={"@synchro-charts/react":e(8),react:e(0)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s);n.exports=[{type:"code",content:"import { LineChart } from \"@synchro-charts/react\";\n\nconst DAY_RESOLUTION = 1000 * 60 * 60 * 24; // one day\n<div style={{ width: \"900px\", height: \"400px\", display: \"flex\" }}>\n  <div style={{ width: \"300px\", height: \"400px\" }}>\n    <LineChart\n      widgetId=\"chart-1\"\n      viewport={{\n        start: new Date(2000, 0, 0),\n        end: new Date(2001, 0, 0),\n        group: 'my-group',\n      }}\n      dataStreams={[\n        {\n          id: 'car-count',\n          dataType: 'NUMBER',\n          color: '#1d8102',\n          name: 'Car Count',\n          resolution: DAY_RESOLUTION, // one day\n          aggregates: {\n            [DAY_RESOLUTION]: [\n              {\n                x: new Date(2000, 1, 0).getTime(),\n                y: 7,\n              },\n              {\n                x: new Date(2000, 3, 0).getTime(),\n                y: 18,\n              },\n              {\n                x: new Date(2000, 4, 0).getTime(),\n                y: 11,\n              },\n              {\n                x: new Date(2000, 5, 0).getTime(),\n                y: 30,\n              },\n              {\n                x: new Date(2000, 7, 0).getTime(),\n                y: 16,\n              },\n              {\n                x: new Date(2000, 8, 0).getTime(),\n                y: 26,\n              },\n              {\n                x: new Date(2000, 10, 0).getTime(),\n                y: 46,\n              },\n              {\n                x: new Date(2000, 11, 0).getTime(),\n                y: 100,\n              },\n            ]\n          }\n        },\n      ]}\n    />\n  </div>\n\n  <div style={{ width: \"300px\", height: \"400px\" }}>\n    <LineChart\n      widgetId=\"chart-2\"\n      viewport={{\n        start: new Date(2000, 0, 0),\n        end: new Date(2001, 0, 0),\n        group: 'my-group',\n      }}\n      dataStreams={[\n        {\n          id: 'car-count',\n          dataType: 'NUMBER',\n          color: 'purple',\n          name: 'Car Count',\n          resolution: DAY_RESOLUTION, // one day\n          aggregates: {\n            [DAY_RESOLUTION]: [\n              {\n                x: new Date(2000, 1, 0).getTime(),\n                y: 7,\n              },\n              {\n                x: new Date(2000, 3, 0).getTime(),\n                y: 18,\n              },\n              {\n                x: new Date(2000, 4, 0).getTime(),\n                y: 11,\n              },\n              {\n                x: new Date(2000, 5, 0).getTime(),\n                y: 30,\n              },\n              {\n                x: new Date(2000, 7, 0).getTime(),\n                y: 16,\n              },\n              {\n                x: new Date(2000, 8, 0).getTime(),\n                y: 26,\n              },\n              {\n                x: new Date(2000, 10, 0).getTime(),\n                y: 46,\n              },\n              {\n                x: new Date(2000, 11, 0).getTime(),\n                y: 100,\n              },\n            ]\n          }\n        },\n      ]}\n    />\n  </div>\n  <div style={{ width: \"300px\", height: \"400px\" }}>\n    <LineChart\n      widgetId=\"chart-3\"\n      viewport={{\n        start: new Date(2000, 0, 0),\n        end: new Date(2001, 0, 0),\n        group: 'my-group',\n      }}\n      dataStreams={[\n        {\n          id: 'car-count',\n          dataType: 'NUMBER',\n          color: 'red',\n          name: 'Car Count',\n          resolution: DAY_RESOLUTION, // one day\n          aggregates: {\n            [DAY_RESOLUTION]: [\n              {\n                x: new Date(2000, 1, 0).getTime(),\n                y: 7,\n              },\n              {\n                x: new Date(2000, 3, 0).getTime(),\n                y: 18,\n              },\n              {\n                x: new Date(2000, 4, 0).getTime(),\n                y: 11,\n              },\n              {\n                x: new Date(2000, 5, 0).getTime(),\n                y: 30,\n              },\n              {\n                x: new Date(2000, 7, 0).getTime(),\n                y: 16,\n              },\n              {\n                x: new Date(2000, 8, 0).getTime(),\n                y: 26,\n              },\n              {\n                x: new Date(2000, 10, 0).getTime(),\n                y: 46,\n              },\n              {\n                x: new Date(2000, 11, 0).getTime(),\n                y: 100,\n              },\n            ]\n          }\n        },\n      ]}\n    />\n  </div>\n</div>;",settings:{},evalInContext:o},{type:"markdown",content:'Utilizing the `group` property within the `viewport` API, we can define a group of charts which will stay in sync.\n\nBelow is an example of three synchronized charts:\n\nNOTE: This is achieved by giving each of the three charts the same `group` value. If this attribute is not provided, no synchronization will occur.\n\n### How To Synchronize\n\nThe default behavior of a chart is to not synchronize with any other charts. To opt into synchronizing with a group of charts, simply pass in a matching `group` string in the `viewport`.\n\n```jsx\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LineChart</span></span>\n  <span class="token attr-name">widgetId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chart-1<span class="token punctuation">"</span></span>\n  <span class="token attr-name">viewport</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    group<span class="token operator">:</span> <span class="token string">\'my-group\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">...</span>\n<span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LineChart</span></span>\n  <span class="token attr-name">widgetId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chart-2<span class="token punctuation">"</span></span>\n  <span class="token attr-name">viewport</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    group<span class="token operator">:</span> <span class="token string">\'my-group\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">...</span>\n<span class="token punctuation">/></span></span>\n```\n\nAny number of view port groups may be defined, such as below:\n\n```jsx\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LineChart</span></span>\n  <span class="token attr-name">widgetId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chart-1<span class="token punctuation">"</span></span>\n  <span class="token attr-name">viewport</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    group<span class="token operator">:</span> <span class="token string">\'my-group\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>  <span class="token attr-name">...</span>\n<span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LineChart</span></span>\n  <span class="token attr-name">widgetId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chart-2<span class="token punctuation">"</span></span>\n  <span class="token attr-name">viewport</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    group<span class="token operator">:</span> <span class="token string">\'my-group\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>  <span class="token attr-name">...</span>\n<span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LineChart</span></span>\n  <span class="token attr-name">widgetId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chart-3<span class="token punctuation">"</span></span>\n  <span class="token attr-name">viewport</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    group<span class="token operator">:</span> <span class="token string">\'my-second-group\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>  <span class="token attr-name">...</span>\n<span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LineChart</span></span>\n  <span class="token attr-name">widgetId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chart-4<span class="token punctuation">"</span></span>\n  <span class="token attr-name">viewport</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    group<span class="token operator">:</span> <span class="token string">\'my-second-group\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">...</span>\n<span class="token punctuation">/></span></span>\n```\n\nHere we have defined two `group`s: `my-group` and `my-second-group`.\n\nWhen you interact with one chart within a view port group, all the charts will stay in sync.'}]},889:function(n,t,e){var a={"@synchro-charts/react":e(8),react:e(0)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s);n.exports=[{type:"code",content:'import {LineChart} from "@synchro-charts/react";\n\nconst DAY_RESOLUTION = 1000 * 60 * 60 * 24; // one day\n<div style={{width: "900px", height: "400px", display: "flex"}}>\n  <div style={{width: "100%", height: "400px"}}>\n    <LineChart\n      widgetId="chart-1"\n      viewport={{\n        duration: 5 * 60000,\n        group: \'my-group\',\n      }}\n      dataStreams={[]}\n    />\n  </div>\n</div>;',settings:{},evalInContext:o},{type:"markdown",content:'Live mode is a concept where the chart will automatically shift the viewport forward. The live mode frame rate is\ndetermined by the chart width as well as the `duartion`. If you have a small duration with a wide chart width, then the\nframe rate will update more frequently than the large duration in a smaller chart width.\n\n### How to enable live mode\n\nBy having `duartion` property within the `viewport` API, we can enable live mode. The `duration` specifies the time range\nfrom `now - duration` to `now` in the viewport.\n\nTo disable this feature, simple set the `start` and the `end` property instead of the `duration`.\n\n```jsx\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LineChart</span></span>\n  <span class="token attr-name">viewport</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    duartion<span class="token operator">:</span> <span class="token constant">SECOND_IN_MS</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">...</span>\n<span class="token punctuation">/></span></span>\n```'}]},890:function(n,t,e){var a={"@synchro-charts/react":e(8),react:e(0)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s);n.exports=[{type:"markdown",content:"Performance is a key goal of Synchro Charts - we wish to allow people to visualize lots of data across many charts, while retaining a smooth user experience.\n\nInteract with the charts below using the following gestures:\n\n*   **Pan**: hold **shift**, click and drag on any chart\n*   **Zoom In**: **double-click** on a position within a chart to zoom into that area.\n*   **Zoom Out**: hold **shift** and **double-click** on a position within a chart to zoom away from that area.\n*   **Restrict Time Span**: Click and drag through the interval of time you wish to restrict the viewport to.\n\nBelow is an example of synchronizing a group of charts containing half a million data points synchronized across 9 charts:"},{type:"code",content:"import { ScatterChart } from \"@synchro-charts/react\";\n\nconst NUM_CHARTS = 9;\nconst NUM_POINTS = Math.round(500000 / NUM_CHARTS);\nconst TIME_SPAN = 1000 * 60 * 60 * 24 * 20;\n\n<div style={{ width: \"910px\", height: \"1200px\", display: \"flex\", \"flexWrap\": 'wrap' }}>\n{\nnew Array(3 * 3).fill(null).map((_, i) => {\nreturn (\n  <div key={i} style={{ width: \"290px\", height: \"400px\" }}>\n    <ScatterChart\n      widgetId={`chart-${i}`}\n      size={{ marginRight: 10 }}\n      viewport={{\n        yMin: -250,\n        yMax: 250,\n        start: new Date(2000, 0, 0),\n        end: new Date(2000, 0, 1),\n        group: 'perf'\n      }}\n      dataStreams={[\n        {\n          id: 'car-count',\n          dataType: 'NUMBER',\n          name: 'Car Count',\n          color: i % 2 == 0 ? '#0073bb' : '#dd6b10',\n          resolution: 0,\n          /** Alter this number to change the number of data points on each chart! */\n          data: new Array(NUM_POINTS).fill(null).map((_, pointIndex) => {\n            const x = new Date(new Date(2000, 0, 0).getTime() + TIME_SPAN * (pointIndex / NUM_POINTS)).getTime();\n            return {\n              x, \n              y: Math.sin(x / 90000) * 200 + Math.random() * 40,\n            };\n          }),\n        },\n      ]}\n    />\n  </div>\n)\n})\n}\n</div>",settings:{},evalInContext:o}]},891:function(n,t,e){var a={"@synchro-charts/react":e(8),react:e(0)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s);n.exports=[{type:"code",content:"import { LineChart, ScatterChart, BarChart } from \"@synchro-charts/react\";\n\nconst DAY_RESOLUTION = 1000 * 60 * 60 * 24; // one day\nconst style = { width: '100%' };\n\nconst standardAnnotation = {\n  color: 'red',\n  value: 40,\n  showValue: true,\n};\n\nconst annotations = {\n  y: [standardAnnotation],\n};\nconst viewport = {\n  start: new Date(2000, 0, 0),\n  end: new Date(2001, 0, 0),\n  group: 'viewport-group',\n};\nconst legend = {\n  width: 100,\n  position: 'BOTTOM',\n}\nconst dataStreams = [{\n  id: 'car-count',\n  dataType: 'NUMBER',\n  color: '#1d8102',\n  name: 'Car Count',\n  resolution: DAY_RESOLUTION, // one day\n  aggregates: {\n    [DAY_RESOLUTION]: [{\n      x: new Date(2000, 1, 0).getTime(),\n      y: 7,\n    }, {\n      x: new Date(2000, 3, 0).getTime(),\n      y: 18,\n    }, {\n      x: new Date(2000, 4, 0).getTime(),\n      y: 11,\n    }, {\n      x: new Date(2000, 5, 0).getTime(),\n      y: 30,\n    }, {\n      x: new Date(2000, 7, 0).getTime(),\n      y: 16,\n    }, {\n      x: new Date(2000, 8, 0).getTime(),\n      y: 26,\n    }, {\n      x: new Date(2000, 10, 0).getTime(),\n      y: 46,\n    }, {\n      x: new Date(2000, 11, 0).getTime(),\n      y: 100,\n    }]\n  }\n}];\n\n<div style={{ display: 'flex', width: '100%', height: '500px' }}>\n  <LineChart\n    style={style}\n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewport={viewport}\n    legend={legend}\n    dataStreams={dataStreams}\n  />\n  <ScatterChart\n    style={style}\n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewport={viewport}\n    legend={legend}\n    dataStreams={dataStreams}\n  />\n  <BarChart\n    style={style}\n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewport={viewport}\n    legend={legend}\n    dataStreams={[{\n      id: 'car-count',\n      dataType: 'NUMBER',\n      resolution: 1000 * 60 * 24 * 60 * 24,\n      color: '#1d8102',\n      aggregates: {\n        [1000 * 60 * 24 * 60 * 24]: [{\n          x: new Date(2000, 1, 0).getTime(),\n          y: 7,\n        }, {\n          x: new Date(2000, 3, 0).getTime(),\n          y: 18,\n        }, {\n          x: new Date(2000, 4, 0).getTime(),\n          y: 11,\n        }, {\n          x: new Date(2000, 5, 0).getTime(),\n          y: 30,\n        }, {\n          x: new Date(2000, 7, 0).getTime(),\n          y: 16,\n        }, {\n          x: new Date(2000, 8, 0).getTime(),\n          y: 26,\n        }, {\n          x: new Date(2000, 10, 0).getTime(),\n          y: 46,\n        }, {\n          x: new Date(2000, 11, 0).getTime(),\n          y: 100,\n        }]\n      }\n    }]}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:'Annotations allow you to visually check if a metric has crossed a pre-defined value,\nor to mark an event that has happened at a specific point in time.\n\n### How To Set Up Annotations\n\nSimply pass in a `Y annotation` array to visualize the Y annotation on the graph. Here is an exmaple:\n\n```jsx\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LineChart</span></span>\n    <span class="token attr-name">...</span>\n    <span class="token attr-name">annotations</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n       y<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n           color<span class="token operator">:</span> <span class="token string">\'red\'</span><span class="token punctuation">,</span>\n           value<span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>\n           showValue<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n       <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n     <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n  <span class="token punctuation">/></span></span>\n```\n\nWhen there are no thresholds, passing in the threshold options will not affect anything.\n\n```jsx\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LineChart</span></span>\n    <span class="token attr-name">...</span>\n    <span class="token attr-name">annotations</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n       y<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n           color<span class="token operator">:</span> <span class="token string">\'red\'</span><span class="token punctuation">,</span>\n           value<span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>\n           showValue<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n       <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n       thresholdOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n           showColor<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n       <span class="token punctuation">}</span>               \n     <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n  <span class="token punctuation">/></span></span>\n```\n\n### Draggable annotations'},{type:"code",content:"import { LineChart, ScatterChart, BarChart } from \"@synchro-charts/react\";\n\nconst DAY_RESOLUTION = 1000 * 60 * 60 * 24; // one day\nconst style = { width: '100%' };\n\nconst draggableAnnotationOne = {\n  color: 'blue',\n  value: 60,\n  showValue: true,\n  isEditable: true, // enables dragging of annotation\n};\n\nconst draggableAnnotationTwo = {\n  color: 'red',\n  value: 30,\n  showValue: true,\n  isEditable: true, // enables dragging of annotation\n};\n\nconst annotations = {\n  y: [draggableAnnotationOne, draggableAnnotationTwo],\n};\nconst viewport = {\n  start: new Date(2000, 0, 0),\n  end: new Date(2001, 0, 0),\n  group: 'viewport-group',\n};\nconst legend = {\n  width: 100,\n  position: 'BOTTOM',\n}\nconst dataStreams = [{\n  id: 'car-count',\n  dataType: 'NUMBER',\n  color: '#1d8102',\n  name: 'Car Count',\n  resolution: DAY_RESOLUTION, // one day\n  aggregates: {\n    [DAY_RESOLUTION]: [{\n      x: new Date(2000, 1, 0).getTime(),\n      y: 7,\n    }, {\n      x: new Date(2000, 3, 0).getTime(),\n      y: 18,\n    }, {\n      x: new Date(2000, 4, 0).getTime(),\n      y: 11,\n    }, {\n      x: new Date(2000, 5, 0).getTime(),\n      y: 30,\n    }, {\n      x: new Date(2000, 7, 0).getTime(),\n      y: 16,\n    }, {\n      x: new Date(2000, 8, 0).getTime(),\n      y: 26,\n    }, {\n      x: new Date(2000, 10, 0).getTime(),\n      y: 46,\n    }, {\n      x: new Date(2000, 11, 0).getTime(),\n      y: 100,\n    }]\n  }\n}];\n\n<div style={{ display: 'flex', width: '100%', height: '500px' }}>\n  <LineChart\n    style={style}\n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewport={viewport}\n    legend={legend}\n    dataStreams={dataStreams}\n  />\n  <ScatterChart\n    style={style}\n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewport={viewport}\n    legend={legend}\n    dataStreams={dataStreams}\n  />\n  <BarChart\n    style={style}\n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewport={viewport}\n    legend={legend}\n    dataStreams={[{\n      id: 'car-count',\n      dataType: 'NUMBER',\n      resolution: 1000 * 60 * 24 * 60 * 24,\n      color: '#1d8102',\n      aggregates: {\n        [1000 * 60 * 24 * 60 * 24]: [{\n          x: new Date(2000, 1, 0).getTime(),\n          y: 7,\n        }, {\n          x: new Date(2000, 3, 0).getTime(),\n          y: 18,\n        }, {\n          x: new Date(2000, 4, 0).getTime(),\n          y: 11,\n        }, {\n          x: new Date(2000, 5, 0).getTime(),\n          y: 30,\n        }, {\n          x: new Date(2000, 7, 0).getTime(),\n          y: 16,\n        }, {\n          x: new Date(2000, 8, 0).getTime(),\n          y: 26,\n        }, {\n          x: new Date(2000, 10, 0).getTime(),\n          y: 46,\n        }, {\n          x: new Date(2000, 11, 0).getTime(),\n          y: 100,\n        }]\n      }\n    }]}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:'To enable dragging of Y Annotations as shown above, set `isEditable` of the annotation to `true` (`isEditable` is `false` by default).\nWhen an annotation is dragged to a new value, a [`widgetUpdated`](#/API/Events) event is emitted\nwhich contains the updated annotation value along with other properties of the widget. **Note:** only Y Annotations are\ndraggable at this time.\n\n```jsx\n<span class="token keyword">const</span> draggableAnnotation <span class="token operator">=</span> <span class="token punctuation">{</span>\n  color<span class="token operator">:</span> <span class="token string">\'blue\'</span><span class="token punctuation">,</span>\n  value<span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span>\n  showValue<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  isEditable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// enables dragging of annotation</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n```'}]},892:function(n,t,e){var a={"@synchro-charts/react":e(8),react:e(0)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s);n.exports=[{type:"code",content:"import { LineChart, ScatterChart, BarChart } from \"@synchro-charts/react\";\n\nconst DAY_RESOLUTION = 1000 * 60 * 60 * 24; // one day\nconst style = { width: '100%' };\n\nconst standardThreshold = {\n  color: '#d13212',\n  value: 40,\n  showValue: true,\n  comparisonOperator: 'GTE',\n};\n\nconst annotations = {\n  y: [standardThreshold],\n};\nconst viewport = {\n  start: new Date(2000, 0, 0),\n  end: new Date(2001, 0, 0),\n  group: 'threshold',\n};\nconst legend = {\n  width: 100,\n  position: 'BOTTOM',\n}\n\nconst dataStreams = [{\n  id: 'car-count',\n  dataType: 'NUMBER',\n  color: '#1d8102',\n  name: 'Car Count',\n  resolution: DAY_RESOLUTION, // one day\n  aggregates: {\n    [DAY_RESOLUTION]: [{\n      x: new Date(2000, 1, 0).getTime(),\n      y: 7,\n    }, {\n      x: new Date(2000, 3, 0).getTime(),\n      y: 18,\n    }, {\n      x: new Date(2000, 4, 0).getTime(),\n      y: 11,\n    }, {\n      x: new Date(2000, 5, 0).getTime(),\n      y: 30,\n    }, {\n      x: new Date(2000, 7, 0).getTime(),\n      y: 16,\n    }, {\n      x: new Date(2000, 8, 0).getTime(),\n      y: 26,\n    }, {\n      x: new Date(2000, 10, 0).getTime(),\n      y: 46,\n    }, {\n      x: new Date(2000, 11, 0).getTime(),\n      y: 100,\n    }]\n  }\n}];\n\n<div style={{ display: 'flex', width: '100%', height: '500px' }}>\n  <LineChart\n    style={style}\n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewport={viewport}\n    legend={legend}\n    dataStreams={dataStreams}\n  />\n  <ScatterChart\n    style={style}\n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewport={viewport}\n    legend={legend}\n    dataStreams={dataStreams}\n  />\n  <BarChart\n    style={style}\n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewport={viewport}\n    legend={legend}\n    dataStreams={[{\n      id: 'car-count',\n      dataType: 'NUMBER',\n      resolution: 1000 * 60 * 24 * 60 * 24,\n      color: '#1d8102',\n      aggregates: {\n        [1000 * 60 * 24 * 60 * 24]: [{\n          x: new Date(2000, 1, 0).getTime(),\n          y: 7,\n        }, {\n          x: new Date(2000, 3, 0).getTime(),\n          y: 18,\n        }, {\n          x: new Date(2000, 4, 0).getTime(),\n          y: 11,\n        }, {\n          x: new Date(2000, 5, 0).getTime(),\n          y: 30,\n        }, {\n          x: new Date(2000, 7, 0).getTime(),\n          y: 16,\n        }, {\n          x: new Date(2000, 8, 0).getTime(),\n          y: 26,\n        }, {\n          x: new Date(2000, 10, 0).getTime(),\n          y: 46,\n        }, {\n          x: new Date(2000, 11, 0).getTime(),\n          y: 100,\n        }]\n      }\n    }]}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:'Threshold allows you quickly visualize if a metric is outside of a pre-defined value by coloring the physical data points on the graph.\n\nA threshold is a type of annotation; that is to say, all thresholds are annotations, but not all annotations are thresholds.\nIn order to make an annotation become a threshold, the property `comparisonOperator` is needed in the annotation object.\nUnlike an annotation, when a metric passes a threshold, the legend and the tooltip will change to the threshold color.\n\nBy default, the thresholds will have coloration enabled. Meaning, when data passes the threshold, it will change to the threshold color.\n**Note: Currently, only y-annotations can become a threshold.**\n\n### How To Set Up Thresholds\n\nBy default, annotations are not thresholds. To elevate an Y annotation into a threshold, pass in the `comparisonOperator` property.\n\n`Note`: the default behavior of a threshold is to show the color change when data points pass through a threshold.\n\n```jsx\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LineChart</span></span>\n    <span class="token attr-name">...</span>\n    <span class="token attr-name">annotations</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n       y<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n           color<span class="token operator">:</span> <span class="token string">\'red\'</span><span class="token punctuation">,</span>\n           value<span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>\n           showValue<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n           comparisonOperator<span class="token operator">:</span> <span class="token string">\'GTE\'</span><span class="token punctuation">,</span>\n       <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> \n     <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n  <span class="token punctuation">/></span></span>\n```\n\nIn order to turn off the default behavior of the threshold data coloring, simply pass in `showColor: false`\n\n```jsx\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LineChart</span></span>\n    <span class="token attr-name">...</span>\n    <span class="token attr-name">annotations</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n       y<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n           color<span class="token operator">:</span> <span class="token string">\'red\'</span><span class="token punctuation">,</span>\n           value<span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>\n           showValue<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n           comparisonOperator<span class="token operator">:</span> <span class="token string">\'GTE\'</span><span class="token punctuation">,</span>\n       <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n       thresholdOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n           showColor<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n       <span class="token punctuation">}</span>               \n     <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n  <span class="token punctuation">/></span></span>\n```\n\nAlternatively, you may pass in a boolean `false` into the `thresholdOptions` to turn off all threshold defaults.\n\n```jsx\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LineChart</span></span>\n    <span class="token attr-name">...</span>\n    <span class="token attr-name">annotations</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n       y<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n           color<span class="token operator">:</span> <span class="token string">\'red\'</span><span class="token punctuation">,</span>\n           value<span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>\n           showValue<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n           comparisonOperator<span class="token operator">:</span> <span class="token string">\'GTE\'</span><span class="token punctuation">,</span>\n       <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n       thresholdOptions<span class="token operator">:</span> <span class="token boolean">false</span>          \n     <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n  <span class="token punctuation">/></span></span>\n```\n\n### Draggable thresholds'},{type:"code",content:"import { LineChart, ScatterChart, BarChart } from \"@synchro-charts/react\";\n\nconst DAY_RESOLUTION = 1000 * 60 * 60 * 24; // one day\nconst style = { width: '100%' };\n\nconst draggableThresholdTwo = {\n  color: 'red',\n  value: 40,\n  showValue: true,\n  comparisonOperator: 'GTE',\n  isEditable: true,\n};\n\nconst draggableThresholdOne = {\n  color: 'blue',\n  value: 18,\n  showValue: true,\n  comparisonOperator: 'LTE',\n  isEditable: true,\n};\n\nconst annotations = {\n  y: [draggableThresholdOne, draggableThresholdTwo],\n};\nconst viewport = {\n  start: new Date(2000, 0, 0),\n  end: new Date(2001, 0, 0),\n  group: 'threshold',\n};\nconst legend = {\n  width: 100,\n  position: 'BOTTOM',\n}\n\nconst dataStreams = [{\n  id: 'car-count',\n  dataType: 'NUMBER',\n  color: '#1d8102',\n  name: 'Car Count',\n  resolution: DAY_RESOLUTION, // one day\n  aggregates: {\n    [DAY_RESOLUTION]: [{\n      x: new Date(2000, 1, 0).getTime(),\n      y: 7,\n    }, {\n      x: new Date(2000, 3, 0).getTime(),\n      y: 18,\n    }, {\n      x: new Date(2000, 4, 0).getTime(),\n      y: 11,\n    }, {\n      x: new Date(2000, 5, 0).getTime(),\n      y: 30,\n    }, {\n      x: new Date(2000, 7, 0).getTime(),\n      y: 16,\n    }, {\n      x: new Date(2000, 8, 0).getTime(),\n      y: 26,\n    }, {\n      x: new Date(2000, 10, 0).getTime(),\n      y: 46,\n    }, {\n      x: new Date(2000, 11, 0).getTime(),\n      y: 100,\n    }]\n  }\n}];\n\n<div style={{ display: 'flex', width: '100%', height: '500px' }}>\n  <LineChart\n    style={style}\n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewport={viewport}\n    legend={legend}\n    dataStreams={dataStreams}\n  />\n  <ScatterChart\n    style={style}\n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewport={viewport}\n    legend={legend}\n    dataStreams={dataStreams}\n  />\n  <BarChart\n    style={style}\n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewport={viewport}\n    legend={legend}\n    dataStreams={[{\n      id: 'car-count',\n      dataType: 'NUMBER',\n      resolution: 1000 * 60 * 24 * 60 * 24,\n      color: '#1d8102',\n      aggregates: {\n        [1000 * 60 * 24 * 60 * 24]: [{\n          x: new Date(2000, 1, 0).getTime(),\n          y: 7,\n        }, {\n          x: new Date(2000, 3, 0).getTime(),\n          y: 18,\n        }, {\n          x: new Date(2000, 4, 0).getTime(),\n          y: 11,\n        }, {\n          x: new Date(2000, 5, 0).getTime(),\n          y: 30,\n        }, {\n          x: new Date(2000, 7, 0).getTime(),\n          y: 16,\n        }, {\n          x: new Date(2000, 8, 0).getTime(),\n          y: 26,\n        }, {\n          x: new Date(2000, 10, 0).getTime(),\n          y: 46,\n        }, {\n          x: new Date(2000, 11, 0).getTime(),\n          y: 100,\n        }]\n      }\n    }]}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:'To enable dragging of thresholds as shown above, set `isEditable` of the threshold to `true` (`isEditable` is `false` by default).\nWhen a threshold is dragged to a new value, a [`widgetUpdated`](#/API/Events) event is emitted\nwhich contains the updated threshold value along with other properties of the widget.\n\n```jsx\n<span class="token keyword">const</span> draggableThreshold <span class="token operator">=</span> <span class="token punctuation">{</span>\n  color<span class="token operator">:</span> <span class="token string">\'red\'</span><span class="token punctuation">,</span>\n  value<span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>\n  showValue<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  comparisonOperator<span class="token operator">:</span> <span class="token string">\'GTE\'</span><span class="token punctuation">,</span>\n  isEditable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n```\n\n### Threshold breaching/chart coloration logic explained\n\nIf you have two thresholds that has the same comparison operator pointing upwards but at different value,\nthen you will create threshold bands.'},{type:"code",content:"import { LineChart, ScatterChart, BarChart } from \"@synchro-charts/react\";\n\nconst style = { width: '100%' }; \nconst annotations = {\n  y: [{\n    color: '#d13212',\n    value: 40,\n    showValue: true,\n    comparisonOperator: 'GTE',\n  }, {\n    color: '#ff9900',\n    value: 20,\n    showValue: true,\n    comparisonOperator: 'GTE',\n  }],\n};\nconst viewport = {\n   start: new Date(2000, 0, 0),\n   end: new Date(2001, 0, 0),\n};\nconst legend = {\n  width: 100,\n  position: 'BOTTOM',\n}\n\nconst dataStreams = [{\n  id: 'car-count',\n  dataType: 'NUMBER',\n  color: 'black',\n  name: 'Car Count',\n  resolution: 1000 * 60 * 60 * 24, // one day\n  aggregates: {\n    [1000 * 60 * 60 * 24]: [{\n      x: new Date(2000, 1, 0).getTime(),\n      y: 7,\n    }, {\n      x: new Date(2000, 3, 0).getTime(),\n      y: 18,\n    }, {\n      x: new Date(2000, 4, 0).getTime(),\n      y: 11,\n    }, {\n      x: new Date(2000, 5, 0).getTime(),\n      y: 30,\n    }, {\n      x: new Date(2000, 7, 0).getTime(),\n      y: 16,\n    }, {\n      x: new Date(2000, 8, 0).getTime(),\n      y: 26,\n    }, {\n      x: new Date(2000, 10, 0).getTime(),\n      y: 46,\n    }, {\n      x: new Date(2000, 11, 0).getTime(),\n      y: 100,\n    }]\n  },\n}];\n\n<div style={{ display: 'flex', width: '100%', height: '500px' }}>\n  <LineChart\n    style={style}        \n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewport={viewport}\n    legend={legend}\n    dataStreams={dataStreams}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"Here is an example of threshold with negative threshold values and with the same comparison operators pointing downwards."},{type:"code",content:"import { LineChart, ScatterChart, BarChart } from \"@synchro-charts/react\";\n\nconst style = { width: '100%' }; \nconst annotations = {\n  y: [{\n    color: '#d13212',\n    value: -40,\n    showValue: true,\n    comparisonOperator: 'LTE',\n  }, {\n    color: '#ff9900',\n    value: -20,\n    showValue: true,\n    comparisonOperator: 'LTE',\n  }],\n};\nconst viewport = {\n   start: new Date(2000, 0, 0),\n   end: new Date(2001, 0, 0),\n};\nconst legend = {\n  width: 100,\n  position: 'BOTTOM',\n}\n\nconst dataStreams = [{\n  id: 'car-count',\n  dataType: 'NUMBER',\n  color: 'black',\n  name: 'Car Count',\n  resolution: 1000 * 60 * 60 * 24, // one day\n  aggregates: {\n    [1000 * 60 * 60 * 24]: [{\n      x: new Date(2000, 1, 0).getTime(),\n      y: -7,\n    }, {\n      x: new Date(2000, 3, 0).getTime(),\n      y: -18,\n    }, {\n      x: new Date(2000, 4, 0).getTime(),\n      y: -11,\n    }, {\n      x: new Date(2000, 5, 0).getTime(),\n      y: -30,\n    }, {\n      x: new Date(2000, 7, 0).getTime(),\n      y: -16,\n    }, {\n      x: new Date(2000, 8, 0).getTime(),\n      y: -26,\n    }, {\n      x: new Date(2000, 10, 0).getTime(),\n      y: -46,\n    }, {\n      x: new Date(2000, 11, 0).getTime(),\n      y: -100,\n    }]\n  },\n}];\n\n<div style={{ display: 'flex', width: '100%', height: '500px' }}>\n  <LineChart\n    style={style}        \n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewport={viewport}\n    legend={legend}\n    dataStreams={dataStreams}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"Below is an example of two horizontal thresholds intersecting each other with opposing comparison operator.\nNotice that the upper threshold's color overrides the lower threshold's color."},{type:"code",content:"import { LineChart, ScatterChart, BarChart } from \"@synchro-charts/react\";\n\nconst style = { width: '100%' }; \nconst annotations = {\n  y: [{\n    color: '#d13212',\n    value: 90,\n    showValue: true,\n    comparisonOperator: 'LTE',\n  }, {\n    color: '#ff9900',\n    value: 20,\n    showValue: true,\n    comparisonOperator: 'GTE',\n  }],\n};\nconst viewport = {\n   start: new Date(2000, 0, 0),\n   end: new Date(2001, 0, 0),\n};\nconst legend = {\n  width: 100,\n  position: 'BOTTOM',\n}\n\nconst dataStreams = [{\n  id: 'car-count',\n  dataType: 'NUMBER',\n  color: 'black',\n  name: 'Car Count',\n  resolution: 1000 * 60 * 60 * 24, // one day\n  aggregates: {\n    [1000 * 60 * 60 * 24]: [{\n      x: new Date(2000, 1, 0).getTime(),\n      y: 7,\n    }, {\n      x: new Date(2000, 3, 0).getTime(),\n      y: 18,\n    }, {\n      x: new Date(2000, 4, 0).getTime(),\n      y: 11,\n    }, {\n      x: new Date(2000, 5, 0).getTime(),\n      y: 30,\n    }, {\n      x: new Date(2000, 7, 0).getTime(),\n      y: 16,\n    }, {\n      x: new Date(2000, 8, 0).getTime(),\n      y: 26,\n    }, {\n      x: new Date(2000, 10, 0).getTime(),\n      y: 46,\n    }, {\n      x: new Date(2000, 11, 0).getTime(),\n      y: 100,\n    }]\n  },\n}];\n\n<div style={{ display: 'flex', width: '100%', height: '500px' }}>\n  <LineChart\n    style={style}        \n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewport={viewport}\n    legend={legend}\n    dataStreams={dataStreams}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"This is an example of two thresholds intersecting each other with opposing comparison operator in the values below 0.\nNotice that the threshold color with greater negative value overrides the lesser negative value."},{type:"code",content:"import { LineChart, ScatterChart, BarChart } from \"@synchro-charts/react\";\n\nconst style = { width: '100%' }; \nconst annotations = {\n  y: [{\n    color: '#d13212',\n    value: -90,\n    showValue: true,\n    comparisonOperator: 'GTE',\n  }, {\n    color: '#ff9900',\n    value: -20,\n    showValue: true,\n    comparisonOperator: 'LTE',\n  }],\n};\nconst viewport = {\n   start: new Date(2000, 0, 0),\n   end: new Date(2001, 0, 0),\n};\nconst legend = {\n  width: 100,\n  position: 'BOTTOM',\n}\n\nconst dataStreams = [{\n  id: 'car-count',\n  dataType: 'NUMBER',\n  color: 'black',\n  name: 'Car Count',\n  resolution: 1000 * 60 * 60 * 24, // one day\n  aggregates: {\n    [1000 * 60 * 60 * 24]: [{\n      x: new Date(2000, 1, 0).getTime(),\n      y: -7,\n    }, {\n      x: new Date(2000, 3, 0).getTime(),\n      y: -18,\n    }, {\n      x: new Date(2000, 4, 0).getTime(),\n      y: -11,\n    }, {\n      x: new Date(2000, 5, 0).getTime(),\n      y: -30,\n    }, {\n      x: new Date(2000, 7, 0).getTime(),\n      y: -16,\n    }, {\n      x: new Date(2000, 8, 0).getTime(),\n      y: -26,\n    }, {\n      x: new Date(2000, 10, 0).getTime(),\n      y: -46,\n    }, {\n      x: new Date(2000, 11, 0).getTime(),\n      y: -100,\n    }]\n  },\n}];\n\n\n<div style={{ display: 'flex', width: '100%', height: '500px' }}>\n  <LineChart\n    style={style}        \n    annotations={annotations}\n    widgetId=\"widget-id\"\n    viewport={viewport}\n    legend={legend}\n    dataStreams={dataStreams}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:'### Threshold severity\n\nOften with thresholds, we will have multiple thresholds applied to a single data stream. In certain cases, there will be particular thresholds\nwhich when breached is more important than a different, but also breached threshold.\n\nFor example, if you have a warning threshold, and a critical error threshold, we would to ensure that the \'critical error\' threshold was displayed as being breached, rather than the \'warning\' threshold.\n\nTo make the \'critical error\' threshold a higher priority, we will utilize the `threshold.severity` property as such:\n\n```js\n<span class="token keyword">const</span> annotations <span class="token operator">=</span> <span class="token punctuation">{</span>\n  y<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n    severity<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    label<span class="token operator">:</span> <span class="token string">\'critical error\'</span><span class="token punctuation">,</span>\n    color<span class="token operator">:</span> <span class="token string">\'red\'</span><span class="token punctuation">,</span>\n    value<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n    comparisonOperator<span class="token operator">:</span> <span class="token string">\'GT\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    label<span class="token operator">:</span> <span class="token string">\'warning\'</span><span class="token punctuation">,</span>\n    severity<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    color<span class="token operator">:</span> <span class="token string">\'orange\'</span><span class="token punctuation">,</span>\n    value<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n    comparisonOperator<span class="token operator">:</span> <span class="token string">\'GT\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n```\n\nNote that if severity is left undefined, any threshold with a defined severity will be considered higher priority.'}]},893:function(n,t,e){var a={"@synchro-charts/react":e(8),react:e(0)},s=e(9).default.bind(null,a),o=e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s);n.exports=[{type:"code",content:"import { ScatterChart } from \"@synchro-charts/react\";\n<div style={{ width: '100%', height: '500px' }}>\n  <ScatterChart\n    trends={[{\n      dataStreamId: 'car-count',\n      type: 'linear-regression',\n    }]}\n    widgetId=\"widget-id\"\n    viewport={{\n      start: new Date(2000, 0, 0),\n      end: new Date(2001, 0, 0),\n    }}\n    legend={{\n      width: 100,\n      position: 'BOTTOM',\n    }}\n    dataStreams={[{\n      color: '#1d8102',\n      name: 'Car Count',\n      id: 'car-count',\n      dataType: 'NUMBER',\n      resolution: 1000 * 60 * 60 * 24, // one day\n      aggregates: {\n        [1000 * 60 * 60 * 24]: [{\n          x: new Date(2000, 1, 0),\n          y: 7,\n        }, {\n          x: new Date(2000, 3, 0),\n          y: 18,\n        }, {\n          x: new Date(2000, 4, 0),\n          y: 11,\n        }, {\n          x: new Date(2000, 5, 0),\n          y: 30,\n        }, {\n          x: new Date(2000, 7, 0),\n          y: 16,\n        }, {\n          x: new Date(2000, 8, 0),\n          y: 26,\n        }, {\n          x: new Date(2000, 10, 0),\n          y: 46,\n        }, {\n          x: new Date(2000, 11, 0),\n          y: 29,\n        }]\n      },\n    }]}\n  />\n</div>",settings:{},evalInContext:o},{type:"markdown",content:"Trend lines allow you to view overall trends in the data at a glance and, in the case of regression analysis, determine how closely the data fits a specific model.\nTrend lines only make use of the data within the viewport, in addition to the two data points immediately outside of the viewport on either end.\nFurthermore, trend lines are computed on the data after aggregation at the declared resolution.\n\n**Note**: Currently we only support linear regressions for trend lines, but this may be extended in the future.\nIf there is a type that you want, please let us know!"}]},894:function(n,t,e){var a={react:e(0)},s=e(9).default.bind(null,a);e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s),n.exports=[{type:"markdown",content:'Certain customization to the widget will cause the widget to emit `widgetUpdate` event. This event contains certain information\nabout the configuration change.\n\nBelow is an example of how you would listen for this event and act on the change.\n\n```jsx\nelement<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'widgetUpdated\'</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// Do something with the newly updated widget configuration change</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n```\n\nThe widget updated event object will contain the chart\'s API. For example, an update to the data streams name, the chart\nwill emit an event that looks like this\n\n```js\n<span class="token punctuation">{</span>\n  <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token comment">// Other chart configs</span>\n  widgetId<span class="token operator">:</span> <span class="token string">\'widget-id\'</span><span class="token punctuation">,</span>  \n  dataStreams<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">\'some-stream\'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">\'updated-name\'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n```\n\nNote that the `widgetId` will always guaranteed come back as part of the event object. However, for the `dataStreams`\nproperty, the `data` will be omitted.'}]},895:function(n,t,e){var a={react:e(0)},s=e(9).default.bind(null,a);e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s),n.exports=[{type:"markdown",content:'Important things to know when building a new component:\n\n1.  Use `viewportHandler` to sync up with all the other component in order to provide the synchronization feature.\n    *   A good example to follow is the `sc-table` component.\n\n```js\n  <span class="token function">componentDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>viewportGroups<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> viewportGroup<span class="token operator">:</span> <span class="token string">\'The name of the viewport group\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> \n  <span class="token punctuation">}</span>\n  \n  <span class="token function">disconnectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>viewportGroups<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>widgetId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// clean up</span>\n  <span class="token punctuation">}</span>\n```'}]},896:function(n,t,e){var a={react:e(0)},s=e(9).default.bind(null,a);e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s),n.exports=[{type:"markdown",content:"*   Data must be time series with numerical values, i.e. a data point must be `(x = timestamp, y = number)`\n*   Does not handle aggregations of data client side.\n*   Line charts will support on the scale of a half million points performantly if defined statically. Primary performance bottleneck will be on the number of charts updating simultaneously, and the amount of network requests firing."}]},897:function(n,t,e){var a={react:e(0)},s=e(9).default.bind(null,a);e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s),n.exports=[{type:"markdown",content:"Accessibility is a concern that the team takes seriously and plans to improve upon, but it has not yet been tackled in development.\n\n*   Colors are WCAG AA Compliant.\n*   Charts are not fully keyboard accessible - some gestures are mouse only.\n*   Data visualized within a chart is not screen reader friendly.\n*   Annotations, tooltips, and legends are all screen reader friendly."}]},898:function(n,t,e){var a={react:e(0)},s=e(9).default.bind(null,a);e(10).default.bind(null,"const React$0 = require('react');\nconst React = React$0.default || (React$0['React'] || React$0);",s),n.exports=[{type:"markdown",content:"Synchro Charts components are all supported broadly across all modern browsers, including IE11. Due to usage of WebGL, users with misconfigured or missing graphics drivers may face problems."}]},900:function(n,t,e){"use strict";e.r(t),e.d(t,"Demo",(function(){return I}));var a=e(47),s=e(48),o=e(50),i=e(49),r=e(14),c=e(51),p=e(0),l=e.n(p),d=e(59),u=e(91),h=e(92),m=e(8),g=e(6),y=e(42),w=e(63),T=function(n,t){return 15*Math.sin(n/(8*t))+Math.pow(3*Math.random(),2)+Math.log(n)+100+Math.random()/10+Math.random()/100+Math.random()/1e3},f=function(n){return Math.floor(n/y.a)*y.a},S=function(n){for(var t=n.start,e=n.end,a=n.streamId,s=n.resolution,o=f(t.getTime()),i=[];o<=e.getTime();)if(o+=s,Math.random()>=.1){var r=T(o,s);i.push({x:f(o),y:r})}return{id:a,name:a,resolution:s,data:[],aggregates:Object(w.a)({},s,i),dataType:"some-id-3"===a?g.DataType.STRING:g.DataType.NUMBER}},k={GTE:">=",GT:">",LTE:"<=",LT:"<",EQ:"="},v=function(n){var t=n.threshold,e=n.removeThreshold,a=n.thresholdId,s=t.color,o=t.value,i=t.comparisonOperator,r=t.isEditable,c=t.label,p=c?c.text:"";return l.a.createElement("tbody",null,l.a.createElement("tr",{className:"threshold-list-item-container"},l.a.createElement("td",{className:"color-container"},l.a.createElement("div",{className:"color-block",style:{background:s}})),l.a.createElement("td",null,o),l.a.createElement("td",null,k[i]),l.a.createElement("td",null,r.toString()),l.a.createElement("td",null,p),l.a.createElement("td",{style:{display:"flex",justifyContent:"space-around"}},l.a.createElement(d.a,{onClick:function(){return e(a)}},"Remove"))))},x=function(n){return/^(\+|-)?(Infinity|\d+)(\.\d+)?e?((\+|-)?\d+)?$/.test(String(n))},b=function(n){var t=n.dataStreamName,e=n.trend,a=n.removeTrendLine;return l.a.createElement("tbody",null,l.a.createElement("tr",{key:"".concat(e.dataStreamId,"---").concat(e.type),className:"trend-line-list-item-container"},l.a.createElement("td",{className:"color-container",style:{paddingLeft:"11px"}},l.a.createElement("div",{className:"color-block",style:{background:e.color}})),l.a.createElement("td",{style:{paddingLeft:"22px"}},t),l.a.createElement("td",{style:{display:"flex",justifyContent:"space-around"}},l.a.createElement(d.a,{onClick:function(){return a(e.dataStreamId,e.type)}},"Remove"))))},O=e(240),E=(e(866),{lineChart:m.LineChart,barChart:m.BarChart,scatterChart:m.ScatterChart}),j=["#0073bb","#dd6b10","#1d8102","#8b3333"],_=Object(c.a)(Array(2)).map((function(n,t){var e=S({start:new Date(1998,0,0),end:new Date(2e3,0,1),streamId:"some-id-".concat(t),resolution:y.a});return Object(r.a)(Object(r.a)({},e),{},{name:"Asset "+t,detailedName:"Asset ".concat(t," - Factory ").concat(t),color:j[t],unit:"m/s"})})),R={widgetId:"fake-id",legend:{position:g.LEGEND_POSITION.BOTTOM,width:170},viewport:{start:new Date(1998,0,0),end:new Date(2e3,0,1)},dataStreams:_},C=[{id:g.COMPARISON_OPERATOR.LESS_THAN,text:"Less than '<'"},{id:g.COMPARISON_OPERATOR.LESS_THAN_EQUAL,text:"Less than or equal '<='"},{id:g.COMPARISON_OPERATOR.GREATER_THAN,text:"Greater than '>'"},{id:g.COMPARISON_OPERATOR.GREATER_THAN_EQUAL,text:"Greater than or equal '>='"},{id:g.COMPARISON_OPERATOR.EQUAL,text:"Equal '='"}],D=[{id:"false",text:"Disabled"},{id:"true",text:"Enabled"}],A=[{id:"lineChart",text:"Line Chart"},{id:"scatterChart",text:"Scatter Chart"},{id:"barChart",text:"Bar Chart"}],I=function(n){Object(o.a)(e,n);var t=Object(i.a)(e);function e(n){var s;return Object(a.a)(this,e),(s=t.call(this,n))._handleDragEvent=function(n){s.setState({annotations:n.srcElement.annotations})},s.addStream=function(){var n=s.config.dataStreams.length,t=j[n%j.length];if(null!=(n+1).toString()){var e=S({start:new Date(1998,0,0),end:new Date(2e3,0,1),streamId:"some-id-".concat(n),resolution:y.a});s.setState({config:Object(r.a)(Object(r.a)({},s.config),{},{dataStreams:[].concat(Object(c.a)(s.config.dataStreams),[Object(r.a)(Object(r.a)({},e),{},{name:"Asset "+n,detailedName:"Asset ".concat(n," - Factory ").concat(n),color:t,unit:"m/s"})])})})}},s.removeStream=function(){s.setState({config:Object(r.a)(Object(r.a)({},s.config),{},{dataStreams:s.config.dataStreams.slice(0,-1)})})},s.changeComponent=function(n){s.setState({componentTag:n.detail.id})},s.getThresholds=function(){return s.state.annotations&&s.state.annotations.y?s.state.annotations.y.filter((function(n){return null!=n.comparisonOperator})):[]},s.doesThresholdExist=function(){return s.getThresholds().some((function(n){return n.value===s.annotationValue&&n.comparisonOperator===s.state.annotationComp}))},s.changeAnnotationValue=function(n){if(null!=n&&null!=n.detail){var t=n.detail.value;x(t)||s.setState({annotationValue:t}),x(t)&&s.setState({annotationValue:Number(t)})}},s.changeAnnotationLabel=function(n){null!=n&&null!=n.detail&&s.setState({annotationLabel:n.detail.value})},s.saveThreshold=function(){var n=s.state,t=n.annotationColor,e=n.annotationValue,a=n.annotationComp,o=n.annotationEditable,i=n.annotationLabel,p={id:Object(O.v4)(),color:t,value:e,showValue:!0,comparisonOperator:a,isEditable:"true"===o};void 0!==i&&(p.label={text:i,show:!0}),s.setState({annotations:Object(r.a)(Object(r.a)({},s.state.annotations),{},{y:[].concat(Object(c.a)(s.state.annotations.y||[]),[p])}),annotationValue:0,isEditable:"false",annotationLabel:void 0})},s.changeAnnotationColor=function(n){null!=n&&null!=n.detail&&s.setState({annotationColor:n.detail.value})},s.changeAnnotationEditable=function(n){null!=n&&null!=n.detail&&s.setState({annotationEditable:n.detail.id})},s.changeAnnotationComparator=function(n){null!=n&&null!=n.detail&&s.setState({annotationComp:n.detail.id})},s.removeThreshold=function(n){var t=s.state.annotations;if(null!=t&&null!=t.y&&0!==t.y.length){var e=t.y;s.setState({annotations:Object(r.a)(Object(r.a)({},t),{},{y:e.filter((function(t,e){return e!==n}))})})}},s.doesTrendExist=function(){return""===s.state.trendDataId||s.state.trends.some((function(n){return n.dataStreamId===s.trendDataId&&n.type===s.trendType}))},s.addTrend=function(){if(!s.doesTrendExist()){var n=[].concat(Object(c.a)(s.state.trends),[{type:s.state.trendType,dataStreamId:s.state.trendDataId,color:s.state.trendColor}]);s.setState({trends:n})}},s.changeTrendColor=function(n){null!=n&&null!=n.detail&&s.setState({trendColor:n.detail.value})},s.changeTrendDataId=function(n){if(null!=n&&null!=n.detail){var t=n.detail.id,e=s.config.dataStreams.find((function(n){return n.id===t}));e&&s.setState({trendColor:e.color||"black",trendDataId:t})}},s.trendOptions=function(){return s.config.dataStreams.map((function(n){return{id:n.id,text:n.name}}))},s.currentTrend=function(){var n=s.state.trendDataId;return""===n||null==n?"Please select a trend":s.config.dataStreams.find((function(t){return t.id===n})).name},s.removeTrend=function(n,t){var e=s.state.trends.filter((function(e){return e.dataStreamId!==n||e.type!==t}));s.setState({trends:e})},s.currentChartOption=function(){var n=s.state.componentTag;return A.find((function(t){return t.id===n})).text},s.currentComparatorOption=function(){var n=s.state.annotationComp;return C.find((function(t){return t.id===n})).text},s.currentDraggableOption=function(){var n=s.state.annotationEditable;return D.find((function(t){return t.id===n})).text},s.state={numCharts:1,componentTag:"lineChart",trendDataId:"",trendType:g.TREND_TYPE.LINEAR,trendColor:"black",trends:[],annotationColor:"#d13212",annotationValue:0,annotationComp:g.COMPARISON_OPERATOR.LESS_THAN,annotationLabel:void 0,annotationEditable:"false",config:Object(r.a)(Object(r.a)({},R),{},{viewport:Object(r.a)(Object(r.a)({},R.viewport),{},{start:new Date(1998,0,0),end:new Date(1998,1,0)})}),annotations:{x:[],y:[],thresholdOptions:{showColor:!0}}},s}return Object(s.a)(e,[{key:"config",get:function(){return this.state.config}},{key:"componentDidMount",value:function(){document.body.addEventListener("widgetUpdated",this._handleDragEvent)}},{key:"componentWillUnmount",value:function(){document.body.removeEventListener("widgetUpdated",this._handleDragEvent)}},{key:"render",value:function(){var n=this,t=E[this.state.componentTag];return l.a.createElement("div",{style:{fontSize:"1.3rem"}},l.a.createElement("div",{style:{display:"flex"}},l.a.createElement("label",{htmlFor:"display"},l.a.createElement("strong",null,"Display: "),l.a.createElement(u.a,{items:A,onItemClick:this.changeComponent},this.currentChartOption())),l.a.createElement("div",{style:{flexGrow:"1"}}),l.a.createElement("div",null,l.a.createElement(d.a,{onClick:this.addStream},"Add Data")," ",l.a.createElement(d.a,{disabled:0===this.numCharts,onClick:this.removeStream},"Remove Data")," ")),l.a.createElement("div",{style:{display:"flex",flexWrap:"wrap"}},new Array(this.state.numCharts).fill(0).map((function(e){return l.a.createElement("div",{key:e,className:"chart-container",style:{height:"400px",width:"100%"}},l.a.createElement(t,{widgetId:n.config.widgetId+e.toString(),viewport:Object(r.a)(Object(r.a)({},n.config.viewport),{},{duration:n.duration,group:"DEMO_GROUP"}),legend:n.config.legend,dataStreams:n.config.dataStreams,annotations:n.state.annotations,trends:n.state.trends}))}))),l.a.createElement("div",{className:"configurations"},l.a.createElement("div",null,l.a.createElement("h2",null,"Thresholds"),l.a.createElement("table",{className:"configuration-table"},l.a.createElement("tr",null,l.a.createElement("th",null,"Color"),l.a.createElement("th",null,"Value"),l.a.createElement("th",null,"Comparator"),l.a.createElement("th",null,"Draggable"),l.a.createElement("th",null,"Label (Optional)")),l.a.createElement("tr",null,l.a.createElement("td",null,l.a.createElement(h.a,{type:"color",value:this.state.annotationColor,onChange:this.changeAnnotationColor})),l.a.createElement("td",{style:{maxWidth:"80px"}},l.a.createElement(h.a,Object.assign({},this.state.annotationComp!==g.COMPARISON_OPERATOR.EQUAL&&{type:"number"},{onChange:this.changeAnnotationValue,value:this.state.annotationValue}))),l.a.createElement("td",null,l.a.createElement(u.a,{items:C,onItemClick:this.changeAnnotationComparator},this.currentComparatorOption())),l.a.createElement("td",null,l.a.createElement(u.a,{items:D,onItemClick:this.changeAnnotationEditable},this.currentDraggableOption())),l.a.createElement("td",{style:{maxWidth:"220px"}},l.a.createElement(h.a,{onChange:this.changeAnnotationLabel,value:this.state.annotationLabel})),l.a.createElement("td",null,l.a.createElement(d.a,{onClick:this.saveThreshold,disabled:this.doesThresholdExist()},"Add Threshold"))),this.getThresholds().map((function(t,e){return l.a.createElement(v,{threshold:t,thresholdId:e,removeThreshold:n.removeThreshold,key:"".concat(t.id)})}))))),l.a.createElement("div",{className:"configurations"},l.a.createElement("div",null,l.a.createElement("h2",null,"Trends"),l.a.createElement("table",{className:"configuration-table"},l.a.createElement("tr",null,l.a.createElement("th",null,"Color"),l.a.createElement("th",null,"Data Set")),l.a.createElement("tr",null,l.a.createElement("td",null,l.a.createElement(h.a,{type:"color",value:this.state.trendColor,onChange:this.changeTrendColor})),l.a.createElement("td",null,l.a.createElement(u.a,{items:this.trendOptions(),onItemClick:this.changeTrendDataId},this.currentTrend())),l.a.createElement("td",null,l.a.createElement(d.a,{onClick:this.addTrend,disabled:this.doesTrendExist()},"Add Trend"))),this.state.trends.map((function(t){var e=n.config.dataStreams.find((function(n){return n.id===t.dataStreamId}));return e?l.a.createElement(b,{dataStreamName:e.name,trend:t,removeTrendLine:n.removeTrend}):null}))))))}}]),e}(l.a.Component)}},[[243,5,6]]]);